{
  "id": "AP_f3a3553f",
  "title": "删除链表的倒数第N个节点",
  "alternative_titles": [],
  "platform": "leetcode",
  "url": "https://leetcode.cn/problems/remove-nth-node-from-end-of-list/",
  "description": "一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。\n\n进阶：你能尝试使用一趟扫描实现吗？",
  "examples": [
    {
      "input": "见图",
      "output": "见图",
      "explanation": null,
      "image": "https://file1.kamacoder.com/i/algo/20210510085957392.png"
    },
    {
      "input": "head = [1], n = 1",
      "output": "[]",
      "explanation": null,
      "image": null
    },
    {
      "input": "head = [1,2], n = 1",
      "output": "[1]",
      "explanation": null,
      "image": null
    }
  ],
  "constraints": [],
  "algorithm_tags": [
    "双指针",
    "单次遍历"
  ],
  "data_structure_tags": [
    "链表"
  ],
  "technique_tags": [
    "虚拟头结点",
    "双指针"
  ],
  "difficulty": null,
  "solution_approach": "通过使用双指针法，利用一个虚拟头结点来简化边界条件处理。首先让快指针先移动n+1步，然后快慢指针同时移动直到快指针到达链表尾部。此时慢指针正好位于要删除节点的前驱节点位置，从而可以方便地执行删除操作。",
  "key_insights": [
    {
      "content": "采用双指针（fast和slow），其中fast先走n+1步，这样保证了当fast到达末尾时，slow正好处于待删除节点之前。"
    },
    {
      "content": "引入虚拟头结点简化了对头结点可能被删除的情况的处理。"
    }
  ],
  "step_by_step_explanation": [
    {
      "name": "思路",
      "text": "双指针的经典应用，如果要删除倒数第n个节点，让fast移动n步，然后让fast和slow同时移动，直到fast指向链表末尾。删掉slow所指向的节点就可以了。",
      "resources": [],
      "code_snippets": [
        {
          "language": "cpp",
          "code": "class Solution {public: ListNode* removeNthFromEnd(ListNode* head, int n) {ListNode* dummyHead = new ListNode(0);dummyHead->next = head;ListNode* slow = dummyHead;ListNode* fast = dummyHead;while(n-- && fast != NULL) {fast = fast->next;}fast = fast->next; while (fast != NULL) {fast = fast->next;slow = slow->next;}slow->next = slow->next->next; return dummyHead->next;}};",
          "description": "C++实现删除链表倒数第n个节点"
        },
        {
          "language": "java",
          "code": "class Solution {public ListNode removeNthFromEnd(ListNode head, int n) {ListNode dummyNode = new ListNode(0);dummyNode.next = head;ListNode fastIndex = dummyNode;ListNode slowIndex = dummyNode;for (int i = 0; i <= n; i++) {fastIndex = fastIndex.next;}while (fastIndex != null) {fastIndex = fastIndex.next;slowIndex = slowIndex.next;}if (slowIndex.next != null) {slowIndex.next = slowIndex.next.next;}return dummyNode.next;}}",
          "description": "Java实现删除链表倒数第n个节点"
        },
        {
          "language": "java",
          "code": "class Solution {public ListNode removeNthFromEnd(ListNode head, int n) {ListNode s = new ListNode(-1, head);remove(s, n);return s.next;}public int remove(ListNode p, int n) {if (p == null) {return 0;}int net = remove(p.next, n);if (net == n) {p.next = p.next.next;}return net + 1;}}",
          "description": "Java递归实现删除链表倒数第n个节点"
        },
        {
          "language": "python",
          "code": "class Solution: def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode: dummy_head = ListNode(0, head) slow = fast = dummy_head for i in range(n+1): fast = fast.next while fast: slow = slow.next fast = fast.next slow.next = slow.next.next return dummy_head.next",
          "description": "Python实现删除链表倒数第n个节点"
        }
      ],
      "subsections": []
    },
    {
      "name": "其他语言版本",
      "text": "#Java:",
      "resources": [],
      "code_snippets": [
        {
          "language": "C++",
          "code": "class Solution {public: ListNode* removeNthFromEnd(ListNode* head, int n) {ListNode* dummyHead = new ListNode(0);dummyHead->next = head;ListNode* slow = dummyHead;ListNode* fast = dummyHead;while(n-- && fast != NULL) {fast = fast->next;}fast = fast->next;while (fast != NULL) {fast = fast->next;slow = slow->next;}slow->next = slow->next->next;return dummyHead->next;}};",
          "description": "使用双指针删除链表中倒数第n个节点"
        },
        {
          "language": "Java",
          "code": "class Solution {public ListNode removeNthFromEnd(ListNode head, int n) {ListNode dummyNode = new ListNode(0);dummyNode.next = head;ListNode fastIndex = dummyNode;ListNode slowIndex = dummyNode;for (int i = 0; i <= n; i++) {fastIndex = fastIndex.next;}while (fastIndex != null) {fastIndex = fastIndex.next;slowIndex = slowIndex.next;}if (slowIndex.next != null) {slowIndex.next = slowIndex.next.next;}return dummyNode.next;}}",
          "description": "使用双指针删除链表中倒数第n个节点"
        },
        {
          "language": "Java",
          "code": "class Solution {public ListNode removeNthFromEnd(ListNode head, int n) {ListNode s = new ListNode(-1, head);remove(s, n);return s.next;}public int remove(ListNode p, int n) {if (p == null) {return 0;}int net = remove(p.next, n);if (net == n) {p.next = p.next.next;}return net + 1;}}",
          "description": "递归方法删除链表中倒数第n个节点"
        },
        {
          "language": "Python",
          "code": "class Solution: def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode: dummy_head = ListNode(0, head) slow = fast = dummy_head for i in range(n+1): fast = fast.next while fast: slow = slow.next fast = fast.next slow.next = slow.next.next return dummy_head.next",
          "description": "使用双指针删除链表中倒数第n个节点"
        }
      ],
      "subsections": []
    },
    {
      "name": "Java:",
      "text": "class Solution {",
      "resources": [],
      "code_snippets": [
        {
          "language": "cpp",
          "code": "class Solution {public: ListNode* removeNthFromEnd(ListNode* head, int n) {ListNode* dummyHead = new ListNode(0);dummyHead->next = head;ListNode* slow = dummyHead;ListNode* fast = dummyHead;while(n-- && fast != NULL) {fast = fast->next;}fast = fast->next; while (fast != NULL) {fast = fast->next;slow = slow->next;}slow->next = slow->next->next;return dummyHead->next;}};",
          "description": "C++实现删除链表倒数第n个节点"
        },
        {
          "language": "java",
          "code": "class Solution {public ListNode removeNthFromEnd(ListNode head, int n) {ListNode dummyNode = new ListNode(0);dummyNode.next = head;ListNode fastIndex = dummyNode;ListNode slowIndex = dummyNode;for (int i = 0; i <= n; i++) {fastIndex = fastIndex.next;}while (fastIndex != null) {fastIndex = fastIndex.next;slowIndex = slowIndex.next;}if (slowIndex.next != null) {slowIndex.next = slowIndex.next.next;}return dummyNode.next;}}",
          "description": "Java实现删除链表倒数第n个节点"
        },
        {
          "language": "java",
          "code": "class Solution {public ListNode removeNthFromEnd(ListNode head, int n) {ListNode s = new ListNode(-1, head);remove(s, n);return s.next;}public int remove(ListNode p, int n) {if (p == null) {return 0;}int net = remove(p.next, n);if (net == n) {p.next = p.next.next;}return net + 1;}}",
          "description": "使用递归的Java实现删除链表倒数第n个节点"
        },
        {
          "language": "python",
          "code": "class Solution: def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode: dummy_head = ListNode(0, head) slow = fast = dummy_head for i in range(n+1): fast = fast.next while fast: slow = slow.next fast = fast.next slow.next = slow.next.next return dummy_head.next",
          "description": "Python实现删除链表倒数第n个节点"
        }
      ],
      "subsections": []
    },
    {
      "name": "Python:",
      "text": "# Definition for singly-linked list.",
      "resources": [],
      "code_snippets": [
        {
          "language": "C++",
          "code": "class Solution {public: ListNode* removeNthFromEnd(ListNode* head, int n) {ListNode* dummyHead = new ListNode(0);dummyHead->next = head;ListNode* slow = dummyHead;ListNode* fast = dummyHead;while(n-- && fast != NULL) {fast = fast->next;}fast = fast->next; while (fast != NULL) {fast = fast->next;slow = slow->next;}slow->next = slow->next->next;return dummyHead->next;}};",
          "description": "使用双指针法删除链表的倒数第n个节点"
        },
        {
          "language": "Java",
          "code": "class Solution {public ListNode removeNthFromEnd(ListNode head, int n) {ListNode dummyNode = new ListNode(0);dummyNode.next = head;ListNode fastIndex = dummyNode;ListNode slowIndex = dummyNode;for (int i = 0; i <= n; i++) {fastIndex = fastIndex.next;}while (fastIndex != null) {fastIndex = fastIndex.next;slowIndex = slowIndex.next;}if (slowIndex.next != null) {slowIndex.next = slowIndex.next.next;}return dummyNode.next;}}",
          "description": "使用双指针法删除链表的倒数第n个节点"
        },
        {
          "language": "Java",
          "code": "class Solution {public ListNode removeNthFromEnd(ListNode head, int n) {ListNode s = new ListNode(-1, head);remove(s, n);return s.next;}public int remove(ListNode p, int n) {if (p == null) {return 0;}int net = remove(p.next, n);if (net == n) {p.next = p.next.next;}return net + 1;}}",
          "description": "通过递归方法删除链表的倒数第n个节点"
        },
        {
          "language": "Python",
          "code": "class Solution: def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode: dummy_head = ListNode(0, head) slow = fast = dummy_head for i in range(n+1): fast = fast.next while fast: slow = slow.next fast = fast.next slow.next = slow.next.next return dummy_head.next",
          "description": "使用双指针法删除链表的倒数第n个节点"
        }
      ],
      "subsections": []
    }
  ],
  "complexity_analysis": {
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "explanation": null
  },
  "code_solutions": [
    {
      "language": "C++",
      "code": "class Solution {public: ListNode* removeNthFromEnd(ListNode* head, int n) {ListNode* dummyHead = new ListNode(0);dummyHead->next = head;ListNode* slow = dummyHead;ListNode* fast = dummyHead;while(n-- && fast != NULL) {fast = fast->next;}fast = fast->next;while (fast != NULL) {fast = fast->next;slow = slow->next;}slow->next = slow->next->next;return dummyHead->next;}};",
      "description": "使用双指针法，创建虚拟头结点，通过移动快慢指针来定位并删除倒数第n个节点"
    },
    {
      "language": "Java",
      "code": "class Solution {public ListNode removeNthFromEnd(ListNode head, int n) {ListNode dummyNode = new ListNode(0);dummyNode.next = head;ListNode fastIndex = dummyNode;ListNode slowIndex = dummyNode;for (int i = 0; i <= n; i++) {fastIndex = fastIndex.next;}while (fastIndex != null) {fastIndex = fastIndex.next;slowIndex = slowIndex.next;}if (slowIndex.next != null) {slowIndex.next = slowIndex.next.next;}return dummyNode.next;}}",
      "description": "使用双指针法，创建虚拟头结点，通过移动快慢指针来定位并删除倒数第n个节点"
    },
    {
      "language": "Java",
      "code": "class Solution {public ListNode removeNthFromEnd(ListNode head, int n) {ListNode s = new ListNode(-1, head);remove(s, n);return s.next;}public int remove(ListNode p, int n) {if (p == null) {return 0;}int net = remove(p.next, n);if (net == n) {p.next = p.next.next;}return net + 1;}}",
      "description": "使用递归方法，创建一个哑节点指向原链表头，递归地找到并删除倒数第n个节点"
    },
    {
      "language": "Python",
      "code": "class Solution: def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode: dummy_head = ListNode(0, head) slow = fast = dummy_head for i in range(n+1): fast = fast.next while fast: slow = slow.next fast = fast.next slow.next = slow.next.next return dummy_head.next",
      "description": "使用双指针法，创建虚拟头结点，通过移动快慢指针来定位并删除倒数第n个节点"
    }
  ],
  "common_mistakes": [
    "忘记处理链表长度小于等于n的情况。",
    "没有正确设置fast指针提前走n+1步。",
    "在删除节点后未检查next指针是否为空即进行操作，可能导致空指针异常。"
  ],
  "similar_problems": [],
  "follow_up_questions": [],
  "all_resources": [
    {
      "type": "image",
      "content": "https://file1.kamacoder.com/i/algo/20210510085957392.png",
      "description": "这张图片展示了链表中删除节点的过程，具体为从包含节点1至5的链表中移除节点4。",
      "context": "示例 1 的链表示意图，展示了删除倒数第2个节点前后的链表状态。"
    },
    {
      "type": "image",
      "content": "https://file1.kamacoder.com/i/algo/19.删除链表的倒数第N个节点.png",
      "description": "这张图片展示了使用双指针（快慢指针）算法在链表中删除倒数第n个节点的过程，具体为n=2的情况。",
      "context": "图片相关说明"
    },
    {
      "type": "image",
      "content": "https://file1.kamacoder.com/i/algo/19.删除链表的倒数第N个节点1.png",
      "description": "这张图片展示了使用双指针（快慢指针）在链表中定位特定节点的算法过程。",
      "context": "图片相关说明"
    },
    {
      "type": "image",
      "content": "https://file1.kamacoder.com/i/algo/19.删除链表的倒数第N个节点2.png",
      "description": "这张图片展示了使用双指针（slow和fast）遍历单链表的过程，用于检测链表的特定位置或特性。",
      "context": "图片相关说明"
    },
    {
      "type": "image",
      "content": "https://file1.kamacoder.com/i/algo/19.删除链表的倒数第N个节点3.png",
      "description": "这张图片展示了通过双指针（slow和fast）在链表中删除特定节点的过程，具体为删除slow指针指向节点的下一个节点。",
      "context": "图片相关说明"
    },
    {
      "type": "gif",
      "content": "https://file1.kamacoder.com/i/algo/20210510085957392.png",
      "description": "GIF展示了通过双指针方法删除链表中倒数第N个节点的过程，其中包括了fast指针先移动N步，然后fast和slow指针同步前进直到fast到达链表末尾，最后删除slow所指向的节点。",
      "context": "该GIF动画展示了如何通过双指针技术定位并删除链表中倒数第n个节点的过程。"
    },
    {
      "type": "gif",
      "content": "https://file1.kamacoder.com/i/algo/19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9.png",
      "description": "GIF展示了双指针在链表中移动的过程，用以定位并删除倒数第n个节点。",
      "context": "GIF动画展示了fast指针先移动n+1步后，fast和slow指针同步向链表末尾移动的过程，直到找到并删除倒数第N个节点。"
    },
    {
      "type": "gif",
      "content": "https://file1.kamacoder.com/i/algo/19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B91.png",
      "description": "GIF展示了使用快慢指针在链表中定位并删除倒数第N个节点的过程。",
      "context": "该GIF动画展示了fast指针先移动n+1步后，与slow指针同时向链表末尾移动的过程，直到找到倒数第N个节点以便进行删除操作。"
    },
    {
      "type": "gif",
      "content": "https://file1.kamacoder.com/i/algo/19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B92.png",
      "description": "GIF展示了在链表中通过快慢指针同时移动来定位并删除倒数第N个节点的过程。",
      "context": "此GIF动画展示了fast和slow两个指针同时移动的过程，直到fast指针到达链表末尾，以此来定位待删除节点的位置。"
    },
    {
      "type": "gif",
      "content": "https://file1.kamacoder.com/i/algo/19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B93.png",
      "description": "GIF展示了在链表中通过双指针技术找到并删除倒数第N个节点的过程。",
      "context": "该GIF展示了如何通过调整指针位置来删除链表中倒数第N个节点的过程。"
    }
  ],
  "source_file": "F:\\My_project\\programmercarl_articles\\problems\\双指针\\删除链表的倒数第N个节点.txt",
  "extracted_at": "2025-07-21T01:43:09.263767",
  "raw_content": "删除链表的倒数第N个节点\n力扣题目链接(https://leetcode.cn/problems/remove-nth-node-from-end-of-list/)\n\n给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。\n\n进阶：你能尝试使用一趟扫描实现吗？\n\n示例 1：\n\nhttps://file1.kamacoder.com/i/algo/20210510085957392.png\n\n输入：head = [1,2,3,4,5], n = 2 输出：[1,2,3,5]\n\n示例 2：\n\n输入：head = [1], n = 1 输出：[]\n\n示例 3：\n\n输入：head = [1,2], n = 1 输出：[1]\n\n\n\n#思路\n双指针的经典应用，如果要删除倒数第n个节点，让fast移动n步，然后让fast和slow同时移动，直到fast指向链表末尾。删掉slow所指向的节点就可以了。\n\n思路是这样的，但要注意一些细节。\n\n分为如下几步：\n\n首先这里我推荐大家使用虚拟头结点，这样方便处理删除实际头结点的逻辑，如果虚拟头结点不清楚，可以看这篇： 链表：听说用虚拟头节点会方便很多？(opens new window)\n\n定义fast指针和slow指针，初始值为虚拟头结点，如图：\n\nhttps://file1.kamacoder.com/i/algo/19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9.png\n\nfast首先走n + 1步 ，为什么是n+1呢，因为只有这样同时移动的时候slow才能指向删除节点的上一个节点（方便做删除操作），如图： \n\nhttps://file1.kamacoder.com/i/algo/19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B91.png\n\nfast和slow同时移动，直到fast指向末尾，如题：  https://file1.kamacoder.com/i/algo/19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B92.png//图片中有错别词：应该将“只到”改为“直到”\n\n删除slow指向的下一个节点，如图： \n\nhttps://file1.kamacoder.com/i/algo/19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B93.png\n\n此时不难写出如下C++代码：\n\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode* dummyHead = new ListNode(0);\n        dummyHead->next = head;\n        ListNode* slow = dummyHead;\n        ListNode* fast = dummyHead;\n        while(n-- && fast != NULL) {\n            fast = fast->next;\n        }\n        fast = fast->next; // fast再提前走一步，因为需要让slow指向删除节点的上一个节点\n        while (fast != NULL) {\n            fast = fast->next;\n            slow = slow->next;\n        }\n        slow->next = slow->next->next; \n        \n        // ListNode *tmp = slow->next;  C++释放内存的逻辑\n        // slow->next = tmp->next;\n        // delete tmp;\n        \n        return dummyHead->next;\n    }\n};\n时间复杂度: O(n)\n空间复杂度: O(1)\n#其他语言版本\n#Java:\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        //新建一个虚拟头节点指向head\n        ListNode dummyNode = new ListNode(0);\n        dummyNode.next = head;\n        //快慢指针指向虚拟头节点\n        ListNode fastIndex = dummyNode;\n        ListNode slowIndex = dummyNode;\n\n        // 只要快慢指针相差 n 个结点即可\n        for (int i = 0; i <= n; i++) {\n            fastIndex = fastIndex.next;\n        }\n        while (fastIndex != null) {\n            fastIndex = fastIndex.next;\n            slowIndex = slowIndex.next;\n        }\n\n        // 此时 slowIndex 的位置就是待删除元素的前一个位置。\n        // 具体情况可自己画一个链表长度为 3 的图来模拟代码来理解\n        // 检查 slowIndex.next 是否为 null，以避免空指针异常\n        if (slowIndex.next != null) {\n            slowIndex.next = slowIndex.next.next;\n        }\n        return dummyNode.next;\n    }\n}\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        // 创建一个新的哑节点，指向原链表头  \n        ListNode s = new ListNode(-1, head);\n        // 递归调用remove方法，从哑节点开始进行删除操作  \n        remove(s, n);\n        // 返回新链表的头（去掉可能的哑节点）  \n        return s.next;\n    }\n    \n    public int remove(ListNode p, int n) {\n        // 递归结束条件：如果当前节点为空，返回0  \n        if (p == null) {\n            return 0;\n        }\n        // 递归深入到下一个节点  \n        int net = remove(p.next, n);\n        // 如果当前节点是倒数第n个节点，进行删除操作  \n        if (net == n) {\n            p.next = p.next.next;  \n        }\n        // 返回当前节点的总深度  \n        return net + 1;\n    }\n}\n#Python:\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n\nclass Solution:\n    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:\n        # 创建一个虚拟节点，并将其下一个指针设置为链表的头部\n        dummy_head = ListNode(0, head)\n        \n        # 创建两个指针，慢指针和快指针，并将它们初始化为虚拟节点\n        slow = fast = dummy_head\n        \n        # 快指针比慢指针快 n+1 步\n        for i in range(n+1):\n            fast = fast.next\n        \n        # 移动两个指针，直到快速指针到达链表的末尾\n        while fast:\n            slow = slow.next\n            fast = fast.next\n        \n        # 通过更新第 (n-1) 个节点的 next 指针删除第 n 个节点\n        slow.next = slow.next.next\n        \n        return dummy_head.next"
}