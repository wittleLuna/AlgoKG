{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"showArrow\", \"headerClass\", \"isActive\", \"onItemClick\", \"forceRender\", \"className\", \"classNames\", \"styles\", \"prefixCls\", \"collapsible\", \"accordion\", \"panelKey\", \"extra\", \"header\", \"expandIcon\", \"openMotion\", \"destroyInactivePanel\", \"children\"];\nimport classNames from 'classnames';\nimport CSSMotion from 'rc-motion';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport React from 'react';\nimport PanelContent from \"./PanelContent\";\nvar CollapsePanel = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$showArrow = props.showArrow,\n    showArrow = _props$showArrow === void 0 ? true : _props$showArrow,\n    headerClass = props.headerClass,\n    isActive = props.isActive,\n    onItemClick = props.onItemClick,\n    forceRender = props.forceRender,\n    className = props.className,\n    _props$classNames = props.classNames,\n    customizeClassNames = _props$classNames === void 0 ? {} : _props$classNames,\n    _props$styles = props.styles,\n    styles = _props$styles === void 0 ? {} : _props$styles,\n    prefixCls = props.prefixCls,\n    collapsible = props.collapsible,\n    accordion = props.accordion,\n    panelKey = props.panelKey,\n    extra = props.extra,\n    header = props.header,\n    expandIcon = props.expandIcon,\n    openMotion = props.openMotion,\n    destroyInactivePanel = props.destroyInactivePanel,\n    children = props.children,\n    resetProps = _objectWithoutProperties(props, _excluded);\n  var disabled = collapsible === 'disabled';\n  var ifExtraExist = extra !== null && extra !== undefined && typeof extra !== 'boolean';\n  var collapsibleProps = _defineProperty(_defineProperty(_defineProperty({\n    onClick: function onClick() {\n      onItemClick === null || onItemClick === void 0 || onItemClick(panelKey);\n    },\n    onKeyDown: function onKeyDown(e) {\n      if (e.key === 'Enter' || e.keyCode === KeyCode.ENTER || e.which === KeyCode.ENTER) {\n        onItemClick === null || onItemClick === void 0 || onItemClick(panelKey);\n      }\n    },\n    role: accordion ? 'tab' : 'button'\n  }, 'aria-expanded', isActive), 'aria-disabled', disabled), \"tabIndex\", disabled ? -1 : 0);\n\n  // ======================== Icon ========================\n  var iconNodeInner = typeof expandIcon === 'function' ? expandIcon(props) : /*#__PURE__*/React.createElement(\"i\", {\n    className: \"arrow\"\n  });\n  var iconNode = iconNodeInner && /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: \"\".concat(prefixCls, \"-expand-icon\")\n  }, ['header', 'icon'].includes(collapsible) ? collapsibleProps : {}), iconNodeInner);\n  var collapsePanelClassNames = classNames(\"\".concat(prefixCls, \"-item\"), _defineProperty(_defineProperty({}, \"\".concat(prefixCls, \"-item-active\"), isActive), \"\".concat(prefixCls, \"-item-disabled\"), disabled), className);\n  var headerClassName = classNames(headerClass, \"\".concat(prefixCls, \"-header\"), _defineProperty({}, \"\".concat(prefixCls, \"-collapsible-\").concat(collapsible), !!collapsible), customizeClassNames.header);\n\n  // ======================== HeaderProps ========================\n  var headerProps = _objectSpread({\n    className: headerClassName,\n    style: styles.header\n  }, ['header', 'icon'].includes(collapsible) ? {} : collapsibleProps);\n\n  // ======================== Render ========================\n  return /*#__PURE__*/React.createElement(\"div\", _extends({}, resetProps, {\n    ref: ref,\n    className: collapsePanelClassNames\n  }), /*#__PURE__*/React.createElement(\"div\", headerProps, showArrow && iconNode, /*#__PURE__*/React.createElement(\"span\", _extends({\n    className: \"\".concat(prefixCls, \"-header-text\")\n  }, collapsible === 'header' ? collapsibleProps : {}), header), ifExtraExist && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-extra\")\n  }, extra)), /*#__PURE__*/React.createElement(CSSMotion, _extends({\n    visible: isActive,\n    leavedClassName: \"\".concat(prefixCls, \"-content-hidden\")\n  }, openMotion, {\n    forceRender: forceRender,\n    removeOnLeave: destroyInactivePanel\n  }), function (_ref, motionRef) {\n    var motionClassName = _ref.className,\n      motionStyle = _ref.style;\n    return /*#__PURE__*/React.createElement(PanelContent, {\n      ref: motionRef,\n      prefixCls: prefixCls,\n      className: motionClassName,\n      classNames: customizeClassNames,\n      style: motionStyle,\n      styles: styles,\n      isActive: isActive,\n      forceRender: forceRender,\n      role: accordion ? 'tabpanel' : void 0\n    }, children);\n  }));\n});\nexport default CollapsePanel;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}