{"ast":null,"code":"import { genStyleHooks, mergeToken } from '../../theme/internal';\nimport { initComponentToken, initInputToken } from './token';\nexport { initComponentToken, initInputToken };\nconst genTextAreaStyle = token => {\n  const {\n    componentCls,\n    paddingLG\n  } = token;\n  const textareaPrefixCls = `${componentCls}-textarea`;\n  return {\n    // Raw Textarea\n    [`textarea${componentCls}`]: {\n      maxWidth: '100%',\n      // prevent textarea resize from coming out of its container\n      height: 'auto',\n      minHeight: token.controlHeight,\n      lineHeight: token.lineHeight,\n      verticalAlign: 'bottom',\n      transition: `all ${token.motionDurationSlow}`,\n      resize: 'vertical',\n      [`&${componentCls}-mouse-active`]: {\n        transition: `all ${token.motionDurationSlow}, height 0s, width 0s`\n      }\n    },\n    // Wrapper for resize\n    [`${componentCls}-textarea-affix-wrapper-resize-dirty`]: {\n      width: 'auto'\n    },\n    [textareaPrefixCls]: {\n      position: 'relative',\n      '&-show-count': {\n        [`${componentCls}-data-count`]: {\n          position: 'absolute',\n          bottom: token.calc(token.fontSize).mul(token.lineHeight).mul(-1).equal(),\n          insetInlineEnd: 0,\n          color: token.colorTextDescription,\n          whiteSpace: 'nowrap',\n          pointerEvents: 'none'\n        }\n      },\n      [`\n        &-allow-clear > ${componentCls},\n        &-affix-wrapper${textareaPrefixCls}-has-feedback ${componentCls}\n      `]: {\n        paddingInlineEnd: paddingLG\n      },\n      [`&-affix-wrapper${componentCls}-affix-wrapper`]: {\n        padding: 0,\n        [`> textarea${componentCls}`]: {\n          fontSize: 'inherit',\n          border: 'none',\n          outline: 'none',\n          background: 'transparent',\n          minHeight: token.calc(token.controlHeight).sub(token.calc(token.lineWidth).mul(2)).equal(),\n          '&:focus': {\n            boxShadow: 'none !important'\n          }\n        },\n        [`${componentCls}-suffix`]: {\n          margin: 0,\n          '> *:not(:last-child)': {\n            marginInline: 0\n          },\n          // Clear Icon\n          [`${componentCls}-clear-icon`]: {\n            position: 'absolute',\n            insetInlineEnd: token.paddingInline,\n            insetBlockStart: token.paddingXS\n          },\n          // Feedback Icon\n          [`${textareaPrefixCls}-suffix`]: {\n            position: 'absolute',\n            top: 0,\n            insetInlineEnd: token.paddingInline,\n            bottom: 0,\n            zIndex: 1,\n            display: 'inline-flex',\n            alignItems: 'center',\n            margin: 'auto',\n            pointerEvents: 'none'\n          }\n        }\n      },\n      [`&-affix-wrapper${componentCls}-affix-wrapper-rtl`]: {\n        [`${componentCls}-suffix`]: {\n          [`${componentCls}-data-count`]: {\n            direction: 'ltr',\n            insetInlineStart: 0\n          }\n        }\n      },\n      [`&-affix-wrapper${componentCls}-affix-wrapper-sm`]: {\n        [`${componentCls}-suffix`]: {\n          [`${componentCls}-clear-icon`]: {\n            insetInlineEnd: token.paddingInlineSM\n          }\n        }\n      }\n    }\n  };\n};\n// ============================== Export ==============================\nexport default genStyleHooks(['Input', 'TextArea'], token => {\n  const inputToken = mergeToken(token, initInputToken(token));\n  return [genTextAreaStyle(inputToken)];\n}, initComponentToken, {\n  resetFont: false\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}