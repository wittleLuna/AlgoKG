{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport classNames from 'classnames';\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport * as React from 'react';\nimport { usePanelContext } from \"../../context\";\nimport useScrollTo from \"./useScrollTo\";\nvar SCROLL_DELAY = 300;\n// Not use JSON.stringify to avoid dead loop\nfunction flattenUnits(units) {\n  return units.map(function (_ref) {\n    var value = _ref.value,\n      label = _ref.label,\n      disabled = _ref.disabled;\n    return [value, label, disabled].join(',');\n  }).join(';');\n}\nexport default function TimeColumn(props) {\n  var units = props.units,\n    value = props.value,\n    optionalValue = props.optionalValue,\n    type = props.type,\n    onChange = props.onChange,\n    onHover = props.onHover,\n    onDblClick = props.onDblClick,\n    changeOnScroll = props.changeOnScroll;\n  var _usePanelContext = usePanelContext(),\n    prefixCls = _usePanelContext.prefixCls,\n    cellRender = _usePanelContext.cellRender,\n    now = _usePanelContext.now,\n    locale = _usePanelContext.locale;\n  var panelPrefixCls = \"\".concat(prefixCls, \"-time-panel\");\n  var cellPrefixCls = \"\".concat(prefixCls, \"-time-panel-cell\");\n\n  // ========================== Refs ==========================\n  var ulRef = React.useRef(null);\n\n  // ========================= Scroll =========================\n  var checkDelayRef = React.useRef();\n  var clearDelayCheck = function clearDelayCheck() {\n    clearTimeout(checkDelayRef.current);\n  };\n\n  // ========================== Sync ==========================\n  var _useScrollTo = useScrollTo(ulRef, value !== null && value !== void 0 ? value : optionalValue),\n    _useScrollTo2 = _slicedToArray(_useScrollTo, 3),\n    syncScroll = _useScrollTo2[0],\n    stopScroll = _useScrollTo2[1],\n    isScrolling = _useScrollTo2[2];\n\n  // Effect sync value scroll\n  useLayoutEffect(function () {\n    syncScroll();\n    clearDelayCheck();\n    return function () {\n      stopScroll();\n      clearDelayCheck();\n    };\n  }, [value, optionalValue, flattenUnits(units)]);\n\n  // ========================= Change =========================\n  // Scroll event if sync onScroll\n  var onInternalScroll = function onInternalScroll(event) {\n    clearDelayCheck();\n    var target = event.target;\n    if (!isScrolling() && changeOnScroll) {\n      checkDelayRef.current = setTimeout(function () {\n        var ul = ulRef.current;\n        var firstLiTop = ul.querySelector(\"li\").offsetTop;\n        var liList = Array.from(ul.querySelectorAll(\"li\"));\n        var liTopList = liList.map(function (li) {\n          return li.offsetTop - firstLiTop;\n        });\n        var liDistList = liTopList.map(function (top, index) {\n          if (units[index].disabled) {\n            return Number.MAX_SAFE_INTEGER;\n          }\n          return Math.abs(top - target.scrollTop);\n        });\n\n        // Find min distance index\n        var minDist = Math.min.apply(Math, _toConsumableArray(liDistList));\n        var minDistIndex = liDistList.findIndex(function (dist) {\n          return dist === minDist;\n        });\n        var targetUnit = units[minDistIndex];\n        if (targetUnit && !targetUnit.disabled) {\n          onChange(targetUnit.value);\n        }\n      }, SCROLL_DELAY);\n    }\n  };\n\n  // ========================= Render =========================\n  var columnPrefixCls = \"\".concat(panelPrefixCls, \"-column\");\n  return /*#__PURE__*/React.createElement(\"ul\", {\n    className: columnPrefixCls,\n    ref: ulRef,\n    \"data-type\": type,\n    onScroll: onInternalScroll\n  }, units.map(function (_ref2) {\n    var label = _ref2.label,\n      unitValue = _ref2.value,\n      disabled = _ref2.disabled;\n    var inner = /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(cellPrefixCls, \"-inner\")\n    }, label);\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: unitValue,\n      className: classNames(cellPrefixCls, _defineProperty(_defineProperty({}, \"\".concat(cellPrefixCls, \"-selected\"), value === unitValue), \"\".concat(cellPrefixCls, \"-disabled\"), disabled)),\n      onClick: function onClick() {\n        if (!disabled) {\n          onChange(unitValue);\n        }\n      },\n      onDoubleClick: function onDoubleClick() {\n        if (!disabled && onDblClick) {\n          onDblClick();\n        }\n      },\n      onMouseEnter: function onMouseEnter() {\n        onHover(unitValue);\n      },\n      onMouseLeave: function onMouseLeave() {\n        onHover(null);\n      },\n      \"data-value\": unitValue\n    }, cellRender ? cellRender(unitValue, {\n      prefixCls: prefixCls,\n      originNode: inner,\n      today: now,\n      type: 'time',\n      subType: type,\n      locale: locale\n    }) : inner);\n  }));\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}