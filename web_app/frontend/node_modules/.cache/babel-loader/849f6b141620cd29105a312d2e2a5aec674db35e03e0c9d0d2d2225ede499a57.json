{"ast":null,"code":"import * as React from 'react';\nimport cls from 'classnames';\nimport useMergeSemantic from '../../_util/hooks/useMergeSemantic';\nimport { useComponentConfig } from '../../config-provider/context';\nconst useMergedPickerSemantic = (pickerType, classNames, styles, popupClassName, popupStyle) => {\n  const {\n    classNames: contextClassNames,\n    styles: contextStyles\n  } = useComponentConfig(pickerType);\n  const [mergedClassNames, mergedStyles] = useMergeSemantic([contextClassNames, classNames], [contextStyles, styles], {\n    popup: {\n      _default: 'root'\n    }\n  });\n  return React.useMemo(() => {\n    var _a, _b;\n    // ClassNames\n    const filledClassNames = Object.assign(Object.assign({}, mergedClassNames), {\n      popup: Object.assign(Object.assign({}, mergedClassNames.popup), {\n        root: cls((_a = mergedClassNames.popup) === null || _a === void 0 ? void 0 : _a.root, popupClassName)\n      })\n    });\n    // Styles\n    const filledStyles = Object.assign(Object.assign({}, mergedStyles), {\n      popup: Object.assign(Object.assign({}, mergedStyles.popup), {\n        root: Object.assign(Object.assign({}, (_b = mergedStyles.popup) === null || _b === void 0 ? void 0 : _b.root), popupStyle)\n      })\n    });\n    // Return\n    return [filledClassNames, filledStyles];\n  }, [mergedClassNames, mergedStyles, popupClassName, popupStyle]);\n};\nexport default useMergedPickerSemantic;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}