{"ast":null,"code":"/**\r\n * 用户认证服务 - 更新版本\r\n */class AuthService{constructor(){this.baseURL='/api/v1';this.tokenKey='auth_token';this.userKey='current_user';}// 获取存储的令牌\ngetToken(){return localStorage.getItem(this.tokenKey);}// 设置令牌\nsetToken(token){localStorage.setItem(this.tokenKey,token);}// 移除令牌\nremoveToken(){localStorage.removeItem(this.tokenKey);localStorage.removeItem(this.userKey);}// 获取当前用户\ngetCurrentUser(){const userStr=localStorage.getItem(this.userKey);return userStr?JSON.parse(userStr):null;}// 设置当前用户\nsetCurrentUser(user){localStorage.setItem(this.userKey,JSON.stringify(user));}// 检查是否已登录\nisAuthenticated(){return!!this.getToken();}// 获取请求头\ngetAuthHeaders(){const token=this.getToken();return{'Content-Type':'application/json',...(token&&{'Authorization':`Bearer ${token}`})};}// 处理API响应 - 增强错误处理\nasync handleResponse(response){console.log(`API响应: ${response.status} ${response.url}`);if(!response.ok){let errorMessage=`HTTP ${response.status}`;let errorDetail='';try{const errorData=await response.json();errorDetail=errorData.detail||errorData.message||JSON.stringify(errorData);}catch(e){// 如果无法解析JSON，尝试获取文本\ntry{errorDetail=await response.text();}catch(textError){errorDetail='无法获取错误详情';}}console.error(`API错误 ${response.status}:`,errorDetail);// 根据状态码提供更具体的错误信息\nswitch(response.status){case 400:errorMessage='请求参数错误: '+errorDetail;break;case 401:errorMessage='未授权访问，请重新登录';this.removeToken();// 清除无效token\nbreak;case 403:errorMessage='访问被拒绝: '+errorDetail;break;case 404:errorMessage='请求的资源不存在';break;case 500:errorMessage='服务器内部错误，请稍后重试';break;case 502:errorMessage='服务器连接错误';break;case 503:errorMessage='服务暂时不可用';break;default:errorMessage=`请求失败 (${response.status}): ${errorDetail}`;}throw new Error(errorMessage);}try{return await response.json();}catch(e){console.warn('响应不是有效的JSON格式');return{};}}// **新增: 测试登录方法**\nasync testLogin(){console.log('发送测试登录请求...');try{const response=await fetch(`${this.baseURL}/auth/test-login`,{method:'POST',headers:{'Content-Type':'application/json','Accept':'application/json'},body:JSON.stringify({test:true,timestamp:Date.now()})});console.log('测试登录响应状态:',response.status);if(!response.ok){const errorText=await response.text();console.error('测试登录错误响应:',errorText);let errorMessage='测试登录失败';try{const errorJson=JSON.parse(errorText);errorMessage=errorJson.detail||errorJson.message||errorMessage;}catch{errorMessage+=`: HTTP ${response.status}`;}throw new Error(errorMessage);}const result=await response.json();console.log('测试登录成功:',result);return result;}catch(error){console.error('测试登录异常:',error);throw new Error(`测试登录失败: ${error.message}`);}}// **增强: 用户注册 - 添加更好的错误处理**\nasync register(data){console.log('发送注册请求:',{...data,password:'[HIDDEN]'});try{const response=await fetch(`${this.baseURL}/auth/register`,{method:'POST',headers:{'Content-Type':'application/json','Accept':'application/json'},body:JSON.stringify(data)});console.log('注册响应状态:',response.status);const result=await this.handleResponse(response);// 保存令牌和用户信息\nthis.setToken(result.access_token);this.setCurrentUser(result.user);console.log('注册成功');return result;}catch(error){console.error('注册失败:',error);throw error;}}// **增强: 用户登录 - 添加更好的错误处理**\nasync login(data){console.log('发送登录请求:',{...data,password:'[HIDDEN]'});try{const response=await fetch(`${this.baseURL}/auth/login`,{method:'POST',headers:{'Content-Type':'application/json','Accept':'application/json'},body:JSON.stringify(data)});const result=await this.handleResponse(response);// 保存令牌和用户信息\nthis.setToken(result.access_token);this.setCurrentUser(result.user);console.log('登录成功');return result;}catch(error){console.error('登录失败:',error);throw error;}}// **新增: 检查API连通性**\nasync checkApiHealth(){try{const response=await fetch(`${this.baseURL.replace('/api/v1','')}/health`,{method:'GET'});return response.ok;}catch(error){console.error('API健康检查失败:',error);return false;}}// 用户登出\nasync logout(){try{await fetch(`${this.baseURL}/auth/logout`,{method:'POST',headers:this.getAuthHeaders()});console.log('服务端登出成功');}catch(error){console.warn('服务端登出失败:',error);}finally{// 无论请求是否成功，都清除本地存储\nthis.removeToken();console.log('本地登出完成');}}// 获取用户资料\nasync getUserProfile(){const response=await fetch(`${this.baseURL}/auth/me`,{headers:this.getAuthHeaders()});return this.handleResponse(response);}// 更新用户信息\nasync updateUser(data){const response=await fetch(`${this.baseURL}/auth/me`,{method:'PUT',headers:this.getAuthHeaders(),body:JSON.stringify(data)});const result=await this.handleResponse(response);// 更新本地存储的用户信息\nthis.setCurrentUser(result);return result;}// 验证令牌\nasync verifyToken(){const response=await fetch(`${this.baseURL}/auth/verify-token`,{headers:this.getAuthHeaders()});const result=await this.handleResponse(response);// 更新本地存储的用户信息\nthis.setCurrentUser(result);return result;}// 添加收藏\nasync addFavorite(itemType,itemId,title,description){const response=await fetch(`${this.baseURL}/auth/favorites`,{method:'POST',headers:this.getAuthHeaders(),body:JSON.stringify({item_type:itemType,item_id:itemId,title,description})});return this.handleResponse(response);}// 获取收藏列表\nasync getFavorites(itemType){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:50;let offset=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;const params=new URLSearchParams({limit:limit.toString(),offset:offset.toString()});if(itemType){params.append('item_type',itemType);}const response=await fetch(`${this.baseURL}/auth/favorites?${params}`,{headers:this.getAuthHeaders()});return this.handleResponse(response);}// 移除收藏\nasync removeFavorite(itemType,itemId){const response=await fetch(`${this.baseURL}/auth/favorites/${itemType}/${itemId}`,{method:'DELETE',headers:this.getAuthHeaders()});await this.handleResponse(response);}// 添加搜索历史\nasync addSearchHistory(query,searchType){let resultsCount=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;const response=await fetch(`${this.baseURL}/auth/search-history`,{method:'POST',headers:this.getAuthHeaders(),body:JSON.stringify({query,search_type:searchType,results_count:resultsCount})});return this.handleResponse(response);}// 获取搜索历史\nasync getSearchHistory(searchType){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:50;let offset=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;const params=new URLSearchParams({limit:limit.toString(),offset:offset.toString()});if(searchType){params.append('search_type',searchType);}const response=await fetch(`${this.baseURL}/auth/search-history?${params}`,{headers:this.getAuthHeaders()});return this.handleResponse(response);}// 清空搜索历史\nasync clearSearchHistory(searchType){const params=searchType?`?search_type=${searchType}`:'';const response=await fetch(`${this.baseURL}/auth/search-history${params}`,{method:'DELETE',headers:this.getAuthHeaders()});await this.handleResponse(response);}// 会话管理相关方法\nasync createSession(sessionData){const response=await fetch(`${this.baseURL}/auth/sessions`,{method:'POST',headers:this.getAuthHeaders(),body:JSON.stringify(sessionData)});return this.handleResponse(response);}async getUserSessions(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:50;let offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;const params=new URLSearchParams({limit:limit.toString(),offset:offset.toString()});const response=await fetch(`${this.baseURL}/auth/sessions?${params}`,{headers:this.getAuthHeaders()});return this.handleResponse(response);}async getSession(sessionId){const response=await fetch(`${this.baseURL}/auth/sessions/${sessionId}`,{headers:this.getAuthHeaders()});return this.handleResponse(response);}async updateSession(sessionId,sessionData){const response=await fetch(`${this.baseURL}/auth/sessions/${sessionId}`,{method:'PUT',headers:this.getAuthHeaders(),body:JSON.stringify(sessionData)});return this.handleResponse(response);}async deleteSession(sessionId){const response=await fetch(`${this.baseURL}/auth/sessions/${sessionId}`,{method:'DELETE',headers:this.getAuthHeaders()});await this.handleResponse(response);}}// 导出单例实例\nexport const authService=new AuthService();export default authService;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}