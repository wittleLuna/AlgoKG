{
  "id": "AP181",
  "name": "动态规划",
  "alias": [
    "DP",
    "dp",
    "动规",
    "Dynamic Programming"
  ],
  "type": "algorithm_paradigm",
  "description": "动态规划是一种通过将复杂问题分解为更小的子问题来求解的方法，适用于具有重叠子问题和最优子结构的问题。它通过把原问题分解为相对简单的子问题的方式求解复杂问题。",
  "key_concepts": [
    "最优子结构",
    "无后效性",
    "子问题重叠",
    "记忆化",
    "状态转移"
  ],
  "applications": [
    "数字三角形问题",
    "背包问题",
    "最短路径问题",
    "最长公共子序列问题"
  ],
  "created_at": "2025-07-19T12:56:48Z",
  "updated_at": "2025-07-19T12:57:20Z",
  "source_files": [
    "动态规划_wiki.txt",
    "动态规划_kama.txt"
  ],
  "spacy_entities": {
    "PROBLEM_TYPE": [
      "最长公共子序列问题",
      "数字三角形问题",
      "子序列",
      "背包问题",
      "01背包问题"
    ],
    "COMPLEXITY": [
      "O(n²)",
      "O(n^2)",
      "O(2^r)"
    ],
    "ALGORITHM_PARADIGM": [
      "动态规划",
      "DP",
      "贪心",
      "图论",
      "dp",
      "动规",
      "Dynamic Programming",
      "贪心算法"
    ],
    "SPECIFIC_ALGORITHM": [
      "二分查找"
    ],
    "DATA_STRUCTURE": [
      "数组",
      "图"
    ],
    "TECHNIQUE": [
      "记忆化"
    ],
    "CORE_CONCEPT": [
      "重叠子问题",
      "动态规划",
      "状态转移方程",
      "初始化",
      "记忆化",
      "最优子结构",
      "状态转移",
      "时间复杂度",
      "无后效性",
      "子问题重叠",
      "顶点",
      "路径",
      "递归",
      "遍历顺序"
    ]
  }
}