{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"prefixCls\", \"steps\", \"defaultCurrent\", \"current\", \"onChange\", \"onClose\", \"onFinish\", \"open\", \"mask\", \"arrow\", \"rootClassName\", \"placement\", \"renderPanel\", \"gap\", \"animated\", \"scrollIntoViewOptions\", \"zIndex\", \"closeIcon\", \"closable\", \"builtinPlacements\", \"disabledInteraction\"];\nimport * as React from 'react';\nimport Portal from '@rc-component/portal';\nimport Trigger from '@rc-component/trigger';\nimport classNames from 'classnames';\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport { useMemo } from 'react';\nimport { useClosable } from \"./hooks/useClosable\";\nimport useTarget from \"./hooks/useTarget\";\nimport Mask from \"./Mask\";\nimport { getPlacements } from \"./placements\";\nimport TourStep from \"./TourStep\";\nimport { getPlacement } from \"./util\";\nvar CENTER_PLACEHOLDER = {\n  left: '50%',\n  top: '50%',\n  width: 1,\n  height: 1\n};\nvar defaultScrollIntoViewOptions = {\n  block: 'center',\n  inline: 'center'\n};\nvar Tour = function Tour(props) {\n  var _props$prefixCls = props.prefixCls,\n    prefixCls = _props$prefixCls === void 0 ? 'rc-tour' : _props$prefixCls,\n    _props$steps = props.steps,\n    steps = _props$steps === void 0 ? [] : _props$steps,\n    defaultCurrent = props.defaultCurrent,\n    current = props.current,\n    onChange = props.onChange,\n    onClose = props.onClose,\n    _onFinish = props.onFinish,\n    open = props.open,\n    _props$mask = props.mask,\n    mask = _props$mask === void 0 ? true : _props$mask,\n    _props$arrow = props.arrow,\n    arrow = _props$arrow === void 0 ? true : _props$arrow,\n    rootClassName = props.rootClassName,\n    placement = props.placement,\n    renderPanel = props.renderPanel,\n    gap = props.gap,\n    animated = props.animated,\n    _props$scrollIntoView = props.scrollIntoViewOptions,\n    scrollIntoViewOptions = _props$scrollIntoView === void 0 ? defaultScrollIntoViewOptions : _props$scrollIntoView,\n    _props$zIndex = props.zIndex,\n    zIndex = _props$zIndex === void 0 ? 1001 : _props$zIndex,\n    closeIcon = props.closeIcon,\n    closable = props.closable,\n    builtinPlacements = props.builtinPlacements,\n    disabledInteraction = props.disabledInteraction,\n    restProps = _objectWithoutProperties(props, _excluded);\n  var triggerRef = React.useRef();\n  var _useMergedState = useMergedState(0, {\n      value: current,\n      defaultValue: defaultCurrent\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 2),\n    mergedCurrent = _useMergedState2[0],\n    setMergedCurrent = _useMergedState2[1];\n  var _useMergedState3 = useMergedState(undefined, {\n      value: open,\n      postState: function postState(origin) {\n        return mergedCurrent < 0 || mergedCurrent >= steps.length ? false : origin !== null && origin !== void 0 ? origin : true;\n      }\n    }),\n    _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n    mergedOpen = _useMergedState4[0],\n    setMergedOpen = _useMergedState4[1];\n\n  // Record if already rended in the DOM to avoid `findDOMNode` issue\n  var _React$useState = React.useState(mergedOpen),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    hasOpened = _React$useState2[0],\n    setHasOpened = _React$useState2[1];\n  var openRef = React.useRef(mergedOpen);\n  useLayoutEffect(function () {\n    if (mergedOpen) {\n      if (!openRef.current) {\n        setMergedCurrent(0);\n      }\n      setHasOpened(true);\n    }\n    openRef.current = mergedOpen;\n  }, [mergedOpen]);\n  var _ref = steps[mergedCurrent] || {},\n    target = _ref.target,\n    stepPlacement = _ref.placement,\n    stepStyle = _ref.style,\n    stepArrow = _ref.arrow,\n    stepClassName = _ref.className,\n    stepMask = _ref.mask,\n    _ref$scrollIntoViewOp = _ref.scrollIntoViewOptions,\n    stepScrollIntoViewOptions = _ref$scrollIntoViewOp === void 0 ? defaultScrollIntoViewOptions : _ref$scrollIntoViewOp,\n    stepCloseIcon = _ref.closeIcon,\n    stepClosable = _ref.closable;\n  var mergedClosable = useClosable(stepClosable, stepCloseIcon, closable, closeIcon);\n  var mergedMask = mergedOpen && (stepMask !== null && stepMask !== void 0 ? stepMask : mask);\n  var mergedScrollIntoViewOptions = stepScrollIntoViewOptions !== null && stepScrollIntoViewOptions !== void 0 ? stepScrollIntoViewOptions : scrollIntoViewOptions;\n  var _useTarget = useTarget(target, open, gap, mergedScrollIntoViewOptions),\n    _useTarget2 = _slicedToArray(_useTarget, 2),\n    posInfo = _useTarget2[0],\n    targetElement = _useTarget2[1];\n  var mergedPlacement = getPlacement(targetElement, placement, stepPlacement);\n\n  // ========================= arrow =========================\n  var mergedArrow = targetElement ? typeof stepArrow === 'undefined' ? arrow : stepArrow : false;\n  var arrowPointAtCenter = _typeof(mergedArrow) === 'object' ? mergedArrow.pointAtCenter : false;\n  useLayoutEffect(function () {\n    var _triggerRef$current;\n    (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 ? void 0 : _triggerRef$current.forceAlign();\n  }, [arrowPointAtCenter, mergedCurrent]);\n\n  // ========================= Change =========================\n  var onInternalChange = function onInternalChange(nextCurrent) {\n    setMergedCurrent(nextCurrent);\n    onChange === null || onChange === void 0 ? void 0 : onChange(nextCurrent);\n  };\n  var mergedBuiltinPlacements = useMemo(function () {\n    if (builtinPlacements) {\n      return typeof builtinPlacements === 'function' ? builtinPlacements({\n        arrowPointAtCenter: arrowPointAtCenter\n      }) : builtinPlacements;\n    }\n    return getPlacements(arrowPointAtCenter);\n  }, [builtinPlacements, arrowPointAtCenter]);\n\n  // ========================= Render =========================\n  // Skip if not init yet\n  if (targetElement === undefined || !hasOpened) {\n    return null;\n  }\n  var handleClose = function handleClose() {\n    setMergedOpen(false);\n    onClose === null || onClose === void 0 ? void 0 : onClose(mergedCurrent);\n  };\n  var getPopupElement = function getPopupElement() {\n    return /*#__PURE__*/React.createElement(TourStep, _extends({\n      arrow: mergedArrow,\n      key: \"content\",\n      prefixCls: prefixCls,\n      total: steps.length,\n      renderPanel: renderPanel,\n      onPrev: function onPrev() {\n        onInternalChange(mergedCurrent - 1);\n      },\n      onNext: function onNext() {\n        onInternalChange(mergedCurrent + 1);\n      },\n      onClose: handleClose,\n      current: mergedCurrent,\n      onFinish: function onFinish() {\n        handleClose();\n        _onFinish === null || _onFinish === void 0 ? void 0 : _onFinish();\n      }\n    }, steps[mergedCurrent], {\n      closable: mergedClosable\n    }));\n  };\n  var mergedShowMask = typeof mergedMask === 'boolean' ? mergedMask : !!mergedMask;\n  var mergedMaskStyle = typeof mergedMask === 'boolean' ? undefined : mergedMask;\n\n  // when targetElement is not exist, use body as triggerDOMNode\n  var getTriggerDOMNode = function getTriggerDOMNode(node) {\n    return node || targetElement || document.body;\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Mask, {\n    zIndex: zIndex,\n    prefixCls: prefixCls,\n    pos: posInfo,\n    showMask: mergedShowMask,\n    style: mergedMaskStyle === null || mergedMaskStyle === void 0 ? void 0 : mergedMaskStyle.style,\n    fill: mergedMaskStyle === null || mergedMaskStyle === void 0 ? void 0 : mergedMaskStyle.color,\n    open: mergedOpen,\n    animated: animated,\n    rootClassName: rootClassName,\n    disabledInteraction: disabledInteraction\n  }), /*#__PURE__*/React.createElement(Trigger, _extends({}, restProps, {\n    builtinPlacements: mergedBuiltinPlacements,\n    ref: triggerRef,\n    popupStyle: stepStyle,\n    popupPlacement: mergedPlacement,\n    popupVisible: mergedOpen,\n    popupClassName: classNames(rootClassName, stepClassName),\n    prefixCls: prefixCls,\n    popup: getPopupElement,\n    forceRender: false,\n    destroyPopupOnHide: true,\n    zIndex: zIndex,\n    getTriggerDOMNode: getTriggerDOMNode,\n    arrow: !!mergedArrow\n  }), /*#__PURE__*/React.createElement(Portal, {\n    open: mergedOpen,\n    autoLock: true\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(rootClassName, \"\".concat(prefixCls, \"-target-placeholder\")),\n    style: _objectSpread(_objectSpread({}, posInfo || CENTER_PLACEHOLDER), {}, {\n      position: 'fixed',\n      pointerEvents: 'none'\n    })\n  }))));\n};\nexport default Tour;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}