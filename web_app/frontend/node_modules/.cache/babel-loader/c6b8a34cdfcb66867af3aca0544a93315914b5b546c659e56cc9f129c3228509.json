{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"prefixCls\", \"style\", \"onStartMove\", \"onOffsetChange\", \"values\", \"handleRender\", \"activeHandleRender\", \"draggingIndex\", \"draggingDelete\", \"onFocus\"];\nimport * as React from 'react';\nimport { flushSync } from 'react-dom';\nimport { getIndex } from \"../util\";\nimport Handle from \"./Handle\";\nvar Handles = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var prefixCls = props.prefixCls,\n    style = props.style,\n    onStartMove = props.onStartMove,\n    onOffsetChange = props.onOffsetChange,\n    values = props.values,\n    handleRender = props.handleRender,\n    activeHandleRender = props.activeHandleRender,\n    draggingIndex = props.draggingIndex,\n    draggingDelete = props.draggingDelete,\n    onFocus = props.onFocus,\n    restProps = _objectWithoutProperties(props, _excluded);\n  var handlesRef = React.useRef({});\n\n  // =========================== Active ===========================\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    activeVisible = _React$useState2[0],\n    setActiveVisible = _React$useState2[1];\n  var _React$useState3 = React.useState(-1),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    activeIndex = _React$useState4[0],\n    setActiveIndex = _React$useState4[1];\n  var onActive = function onActive(index) {\n    setActiveIndex(index);\n    setActiveVisible(true);\n  };\n  var onHandleFocus = function onHandleFocus(e, index) {\n    onActive(index);\n    onFocus === null || onFocus === void 0 || onFocus(e);\n  };\n  var onHandleMouseEnter = function onHandleMouseEnter(e, index) {\n    onActive(index);\n  };\n\n  // =========================== Render ===========================\n  React.useImperativeHandle(ref, function () {\n    return {\n      focus: function focus(index) {\n        var _handlesRef$current$i;\n        (_handlesRef$current$i = handlesRef.current[index]) === null || _handlesRef$current$i === void 0 || _handlesRef$current$i.focus();\n      },\n      hideHelp: function hideHelp() {\n        flushSync(function () {\n          setActiveVisible(false);\n        });\n      }\n    };\n  });\n\n  // =========================== Render ===========================\n  // Handle Props\n  var handleProps = _objectSpread({\n    prefixCls: prefixCls,\n    onStartMove: onStartMove,\n    onOffsetChange: onOffsetChange,\n    render: handleRender,\n    onFocus: onHandleFocus,\n    onMouseEnter: onHandleMouseEnter\n  }, restProps);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, values.map(function (value, index) {\n    var dragging = draggingIndex === index;\n    return /*#__PURE__*/React.createElement(Handle, _extends({\n      ref: function ref(node) {\n        if (!node) {\n          delete handlesRef.current[index];\n        } else {\n          handlesRef.current[index] = node;\n        }\n      },\n      dragging: dragging,\n      draggingDelete: dragging && draggingDelete,\n      style: getIndex(style, index),\n      key: index,\n      value: value,\n      valueIndex: index\n    }, handleProps));\n  }), activeHandleRender && activeVisible && /*#__PURE__*/React.createElement(Handle, _extends({\n    key: \"a11y\"\n  }, handleProps, {\n    value: values[activeIndex],\n    valueIndex: null,\n    dragging: draggingIndex !== -1,\n    draggingDelete: draggingDelete,\n    render: activeHandleRender,\n    style: {\n      pointerEvents: 'none'\n    },\n    tabIndex: null,\n    \"aria-hidden\": true\n  })));\n});\nif (process.env.NODE_ENV !== 'production') {\n  Handles.displayName = 'Handles';\n}\nexport default Handles;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}