{"ast":null,"code":"import axios from'axios';class ApiService{constructor(){this.client=void 0;this.baseURL=void 0;this.baseURL=process.env.REACT_APP_API_URL||'http://127.0.0.1/api';this.client=axios.create({baseURL:this.baseURL,timeout:30000,headers:{'Content-Type':'application/json'}});// 请求拦截器\nthis.client.interceptors.request.use(config=>{var _config$method;console.log(`发送请求: ${(_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase()} ${config.url}`);return config;},error=>{console.error('请求错误:',error);return Promise.reject(error);});// 响应拦截器\nthis.client.interceptors.response.use(response=>{console.log(`收到响应: ${response.status} ${response.config.url}`);return response;},error=>{var _error$message,_error$response,_error$response2;console.error('响应错误:',error);// 检查是否是用户主动取消的请求\nif(error.code==='ERR_CANCELED'||(_error$message=error.message)!==null&&_error$message!==void 0&&_error$message.includes('canceled')){// 用户主动取消，不显示错误提示\nthrow error;}if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===500){throw new Error('服务器内部错误，请稍后重试');}else if(((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)===404){throw new Error('请求的资源不存在');}else if(error.code==='ECONNABORTED'){throw new Error('请求超时，请检查网络连接');}throw error;});}/**\n   * 发送问答查询\n   */async query(request,signal){try{const response=await this.client.post('/api/v1/qa/query',request,{signal});return response.data;}catch(error){console.error('查询失败:',error);throw error;}}/**\n   * 流式问答查询\n   */async*queryStream(request,signal){try{var _response$body;const response=await fetch(`${this.baseURL}/api/v1/qa/query/stream`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(request),signal// 添加AbortSignal支持\n});if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}const reader=(_response$body=response.body)===null||_response$body===void 0?void 0:_response$body.getReader();if(!reader){throw new Error('无法获取响应流');}const decoder=new TextDecoder();let buffer='';try{while(true){// 检查是否已被取消\nif(signal!==null&&signal!==void 0&&signal.aborted){throw new DOMException('请求已取消','AbortError');}const{done,value}=await reader.read();if(done)break;buffer+=decoder.decode(value,{stream:true});const lines=buffer.split('\\n');buffer=lines.pop()||'';for(const line of lines){if(line.startsWith('data: ')){try{const data=JSON.parse(line.slice(6));yield data;}catch(e){console.warn('解析SSE数据失败:',e);}}}}}finally{reader.releaseLock();}}catch(error){console.error('流式查询失败:',error);throw error;}}/**\n   * 获取相似题目\n   */async getSimilarProblems(problemTitle){let count=arguments.length>1&&arguments[1]!==undefined?arguments[1]:5;try{const response=await this.client.post('/api/v1/qa/similar-problems',{problem_title:problemTitle,count,include_solutions:true});return response.data;}catch(error){console.error('获取相似题目失败:',error);throw error;}}/**\n   * 处理概念点击\n   */async handleConceptClick(conceptName,sourceQuery,contextType){try{const response=await this.client.post('/api/v1/qa/concept/click',{concept_name:conceptName,source_query:sourceQuery,context_type:contextType});return response.data;}catch(error){console.error('处理概念点击失败:',error);throw error;}}/**\n   * 获取知识图谱数据\n   */async getGraphData(entityName,entityType){try{const response=await this.client.post('/api/v1/graph/query',{entity_name:entityName,entity_type:entityType,depth:2,limit:20});return response.data;}catch(error){console.error('获取图谱数据失败:',error);throw error;}}/**\n   * 获取题目图谱\n   */async getProblemGraph(problemTitle){try{const response=await this.client.get(`/api/v1/graph/problem/${encodeURIComponent(problemTitle)}/graph`);return response.data;}catch(error){console.error('获取题目图谱失败:',error);throw error;}}/**\n   * 获取概念图谱\n   */async getConceptGraph(conceptName){try{const response=await this.client.get(`/api/v1/graph/concept/${encodeURIComponent(conceptName)}/graph`);return response.data;}catch(error){console.error('获取概念图谱失败:',error);throw error;}}/**\n   * 提交反馈\n   */async submitFeedback(feedback){try{await this.client.post('/api/v1/qa/feedback',feedback);}catch(error){console.error('提交反馈失败:',error);throw error;}}/**\n   * 获取会话历史\n   */async getSessionHistory(sessionId){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;try{const response=await this.client.get(`/api/v1/qa/sessions/${sessionId}/history`,{params:{limit}});return response.data;}catch(error){console.error('获取会话历史失败:',error);throw error;}}/**\n   * 清除会话\n   */async clearSession(sessionId){try{await this.client.delete(`/api/v1/qa/sessions/${sessionId}`);}catch(error){console.error('清除会话失败:',error);throw error;}}/**\n   * 健康检查\n   */async healthCheck(){try{const response=await this.client.get('/health');return response.data;}catch(error){console.error('健康检查失败:',error);throw error;}}/**\n   * 获取图谱统计信息\n   */async getGraphStatistics(){try{const response=await this.client.get('/api/v1/graph/statistics');return response.data;}catch(error){console.error('获取图谱统计失败:',error);throw error;}}}// 创建单例实例\nexport const apiService=new ApiService();export default apiService;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}