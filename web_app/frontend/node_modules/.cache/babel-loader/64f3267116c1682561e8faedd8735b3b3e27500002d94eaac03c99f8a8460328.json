{"ast":null,"code":"import React,{useState,useEffect,useRef,useCallback}from'react';import{Card,Button,Space,Typography,message,Spin}from'antd';import{PlayCircleOutlined,PauseCircleOutlined,CaretRightOutlined,ReloadOutlined}from'@ant-design/icons';import*as d3 from'd3';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const{Text}=Typography;const EmbeddedAlgorithmVisualizer=_ref=>{let{code='',data=[64,34,25,12,22,11,90],algorithm='bubble_sort',height=200,autoPlay=false}=_ref;const[currentStep,setCurrentStep]=useState(0);const[steps,setSteps]=useState([]);const[isPlaying,setIsPlaying]=useState(false);const[isExecuting,setIsExecuting]=useState(false);const svgRef=useRef(null);const intervalRef=useRef(null);// 预定义算法代码\nconst getAlgorithmCode=useCallback(algorithmType=>{const templates={bubble_sort:`function bubbleSort(arr) {\n        const steps = [];\n        const n = arr.length;\n        let data = [...arr];\n        \n        steps.push({\n          id: 0,\n          description: \"开始冒泡排序\",\n          data: [...data],\n          highlights: [],\n          comparisons: []\n        });\n        \n        for (let i = 0; i < n - 1; i++) {\n          for (let j = 0; j < n - i - 1; j++) {\n            steps.push({\n              id: steps.length,\n              description: \\`比较 \\${data[j]} 和 \\${data[j + 1]}\\`,\n              data: [...data],\n              highlights: [j, j + 1],\n              comparisons: [j, j + 1]\n            });\n            \n            if (data[j] > data[j + 1]) {\n              [data[j], data[j + 1]] = [data[j + 1], data[j]];\n              steps.push({\n                id: steps.length,\n                description: \\`交换 \\${data[j + 1]} 和 \\${data[j]}\\`,\n                data: [...data],\n                highlights: [j, j + 1],\n                comparisons: [],\n                swaps: [j, j + 1]\n              });\n            }\n          }\n        }\n        \n        steps.push({\n          id: steps.length,\n          description: \"排序完成\",\n          data: [...data],\n          highlights: [],\n          comparisons: []\n        });\n        \n        return steps;\n      }`,selection_sort:`function selectionSort(arr) {\n        const steps = [];\n        const n = arr.length;\n        let data = [...arr];\n        \n        steps.push({\n          id: 0,\n          description: \"开始选择排序\",\n          data: [...data],\n          highlights: [],\n          comparisons: []\n        });\n        \n        for (let i = 0; i < n - 1; i++) {\n          let minIdx = i;\n          steps.push({\n            id: steps.length,\n            description: \\`寻找从位置 \\${i} 开始的最小元素\\`,\n            data: [...data],\n            highlights: [i],\n            comparisons: []\n          });\n          \n          for (let j = i + 1; j < n; j++) {\n            steps.push({\n              id: steps.length,\n              description: \\`比较 \\${data[j]} 和当前最小值 \\${data[minIdx]}\\`,\n              data: [...data],\n              highlights: [minIdx, j],\n              comparisons: [minIdx, j]\n            });\n            \n            if (data[j] < data[minIdx]) {\n              minIdx = j;\n              steps.push({\n                id: steps.length,\n                description: \\`找到新的最小值 \\${data[minIdx]} 在位置 \\${minIdx}\\`,\n                data: [...data],\n                highlights: [minIdx],\n                comparisons: []\n              });\n            }\n          }\n          \n          if (minIdx !== i) {\n            [data[i], data[minIdx]] = [data[minIdx], data[i]];\n            steps.push({\n              id: steps.length,\n              description: \\`交换 \\${data[minIdx]} 和 \\${data[i]}\\`,\n              data: [...data],\n              highlights: [i, minIdx],\n              comparisons: [],\n              swaps: [i, minIdx]\n            });\n          }\n        }\n        \n        steps.push({\n          id: steps.length,\n          description: \"排序完成\",\n          data: [...data],\n          highlights: [],\n          comparisons: []\n        });\n        \n        return steps;\n      }`};return templates[algorithmType]||templates.bubble_sort;},[]);// 执行算法\nconst executeAlgorithm=useCallback(async()=>{setIsExecuting(true);try{const algorithmCode=code||getAlgorithmCode(algorithm);const func=new Function('data',`\n        ${algorithmCode}\n        \n        if (typeof bubbleSort !== 'undefined') {\n          return bubbleSort(data);\n        } else if (typeof selectionSort !== 'undefined') {\n          return selectionSort(data);\n        }\n        \n        return [];\n      `);const result=func([...data]);setSteps(result||[]);setCurrentStep(0);if(autoPlay&&result&&result.length>0){setTimeout(()=>setIsPlaying(true),500);}}catch(error){console.error('算法执行错误:',error);message.error('算法执行出错');}finally{setIsExecuting(false);}},[code,algorithm,data,autoPlay,getAlgorithmCode]);// 初始化执行\nuseEffect(()=>{executeAlgorithm();},[executeAlgorithm]);// 可视化渲染\nuseEffect(()=>{if(!steps||!steps[currentStep]||!svgRef.current)return;const svg=d3.select(svgRef.current);svg.selectAll(\"*\").remove();const step=steps[currentStep];const margin={top:20,right:20,bottom:40,left:20};const width=400;const innerWidth=width-margin.left-margin.right;const innerHeight=height-margin.top-margin.bottom;const g=svg.append('g').attr('transform',`translate(${margin.left}, ${margin.top})`);const barWidth=innerWidth/step.data.length;const maxValue=Math.max(...step.data);const yScale=d3.scaleLinear().domain([0,maxValue]).range([innerHeight,0]);// 绘制数组元素\nconst bars=g.selectAll('.bar').data(step.data).enter().append('g').attr('class','bar').attr('transform',(d,i)=>`translate(${i*barWidth}, 0)`);// 绘制矩形\nbars.append('rect').attr('width',barWidth-2).attr('height',d=>innerHeight-yScale(d)).attr('y',d=>yScale(d)).attr('fill',(d,i)=>{if(step.highlights.includes(i)){return step.comparisons.includes(i)?'#ff4d4f':'#52c41a';}if(step.swaps&&(step.swaps[0]===i||step.swaps[1]===i)){return'#faad14';}return'#1890ff';}).attr('stroke','#fff').attr('stroke-width',1);// 添加数值标签\nbars.append('text').attr('x',barWidth/2).attr('y',d=>yScale(d)-5).attr('text-anchor','middle').attr('font-size','10px').attr('font-weight','bold').attr('fill','#333').text(d=>d);// 添加索引标签\nbars.append('text').attr('x',barWidth/2).attr('y',innerHeight+15).attr('text-anchor','middle').attr('font-size','8px').attr('fill','#666').text((d,i)=>i);},[currentStep,steps,height]);// 自动播放\nuseEffect(()=>{if(isPlaying&&steps&&steps.length>0&&currentStep<steps.length-1){intervalRef.current=setInterval(()=>{setCurrentStep(prev=>{if(!steps||prev>=steps.length-1){setIsPlaying(false);return prev;}return prev+1;});},1000);}else{setIsPlaying(false);if(intervalRef.current){clearInterval(intervalRef.current);intervalRef.current=null;}}return()=>{if(intervalRef.current){clearInterval(intervalRef.current);}};},[isPlaying,currentStep,steps]);const play=()=>{if(!steps||steps.length===0)return;if(currentStep>=steps.length-1){setCurrentStep(0);}setIsPlaying(true);};const pause=()=>{setIsPlaying(false);};const reset=()=>{pause();setCurrentStep(0);};const stepForward=()=>{if(!steps||steps.length===0)return;if(currentStep<steps.length-1){setCurrentStep(prev=>prev+1);}};if(isExecuting){return/*#__PURE__*/_jsxs(Card,{size:\"small\",style:{textAlign:'center',padding:'20px'},children:[/*#__PURE__*/_jsx(Spin,{}),/*#__PURE__*/_jsx(\"div\",{style:{marginTop:8},children:/*#__PURE__*/_jsx(Text,{type:\"secondary\",children:\"\\u6B63\\u5728\\u6267\\u884C\\u7B97\\u6CD5...\"})})]});}return/*#__PURE__*/_jsxs(Card,{title:\"\\u7B97\\u6CD5\\u53EF\\u89C6\\u5316\",size:\"small\",extra:/*#__PURE__*/_jsxs(Space,{size:\"small\",children:[/*#__PURE__*/_jsx(Button,{size:\"small\",type:isPlaying?\"default\":\"primary\",icon:isPlaying?/*#__PURE__*/_jsx(PauseCircleOutlined,{}):/*#__PURE__*/_jsx(PlayCircleOutlined,{}),onClick:isPlaying?pause:play,disabled:!steps||steps.length===0,children:isPlaying?'暂停':'播放'}),/*#__PURE__*/_jsx(Button,{size:\"small\",icon:/*#__PURE__*/_jsx(CaretRightOutlined,{}),onClick:stepForward,disabled:!steps||steps.length===0||currentStep>=steps.length-1}),/*#__PURE__*/_jsx(Button,{size:\"small\",icon:/*#__PURE__*/_jsx(ReloadOutlined,{}),onClick:reset,disabled:!steps||steps.length===0})]}),children:[/*#__PURE__*/_jsx(\"div\",{style:{textAlign:'center',marginBottom:12},children:steps&&steps[currentStep]&&/*#__PURE__*/_jsxs(Text,{style:{fontSize:'12px'},children:[\"\\u6B65\\u9AA4 \",currentStep+1,\"/\",steps.length,\": \",steps[currentStep].description]})}),/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center'},children:/*#__PURE__*/_jsx(\"svg\",{ref:svgRef,width:400,height:height,style:{border:'1px solid #f0f0f0',borderRadius:'4px'}})}),/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:8,display:'flex',justifyContent:'center',gap:12,fontSize:'10px'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',gap:2},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:8,height:8,backgroundColor:'#1890ff'}}),/*#__PURE__*/_jsx(\"span\",{children:\"\\u666E\\u901A\"})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',gap:2},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:8,height:8,backgroundColor:'#52c41a'}}),/*#__PURE__*/_jsx(\"span\",{children:\"\\u9AD8\\u4EAE\"})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',gap:2},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:8,height:8,backgroundColor:'#ff4d4f'}}),/*#__PURE__*/_jsx(\"span\",{children:\"\\u6BD4\\u8F83\"})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',gap:2},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:8,height:8,backgroundColor:'#faad14'}}),/*#__PURE__*/_jsx(\"span\",{children:\"\\u4EA4\\u6362\"})]})]})]});};export default EmbeddedAlgorithmVisualizer;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}