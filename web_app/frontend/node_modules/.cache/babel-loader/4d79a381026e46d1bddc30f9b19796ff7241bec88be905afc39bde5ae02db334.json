{"ast":null,"code":"import React,{useEffect,useRef}from'react';import{Card}from'antd';import*as d3 from'd3';import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const DataVisualization=_ref=>{let{step,width=600,height=300,type='array'}=_ref;const svgRef=useRef(null);useEffect(()=>{if(!step||!svgRef.current)return;const svg=d3.select(svgRef.current);svg.selectAll(\"*\").remove();// 清除之前的内容\nif(type==='array'){renderArrayVisualization(svg,step,width,height);}else if(type==='tree'){renderTreeVisualization(svg,step,width,height);}else if(type==='graph'){renderGraphVisualization(svg,step,width,height);}},[step,width,height,type]);const renderArrayVisualization=(svg,step,w,h)=>{const data=step.data;const margin={top:50,right:50,bottom:50,left:50};const innerWidth=w-margin.left-margin.right;const innerHeight=h-margin.top-margin.bottom;const g=svg.append('g').attr('transform',`translate(${margin.left}, ${margin.top})`);// 计算每个元素的位置和大小\nconst barWidth=innerWidth/data.length;const maxValue=Math.max(...data);const yScale=d3.scaleLinear().domain([0,maxValue]).range([innerHeight,0]);// 绘制数组元素\nconst bars=g.selectAll('.bar').data(data).enter().append('g').attr('class','bar').attr('transform',(d,i)=>`translate(${i*barWidth}, 0)`);// 绘制矩形\nbars.append('rect').attr('width',barWidth-2).attr('height',d=>innerHeight-yScale(d)).attr('y',d=>yScale(d)).attr('fill',(d,i)=>{if(step.highlights.includes(i)){return step.comparisons.includes(i)?'#ff4d4f':'#52c41a';}if(step.swaps&&(step.swaps[0]===i||step.swaps[1]===i)){return'#faad14';}return'#1890ff';}).attr('stroke','#fff').attr('stroke-width',1).style('transition','all 0.3s ease');// 添加数值标签\nbars.append('text').attr('x',barWidth/2).attr('y',d=>yScale(d)-5).attr('text-anchor','middle').attr('font-size','12px').attr('font-weight','bold').attr('fill','#333').text(d=>d);// 添加索引标签\nbars.append('text').attr('x',barWidth/2).attr('y',innerHeight+20).attr('text-anchor','middle').attr('font-size','10px').attr('fill','#666').text((d,i)=>i);// 添加动画效果\nif(step.swaps){const[i,j]=step.swaps;// 添加交换动画\ng.selectAll('.bar').filter((d,index)=>index===i||index===j).select('rect').transition().duration(300).attr('transform','scale(1.1)').transition().duration(300).attr('transform','scale(1)');}// 添加比较指示器\nif(step.comparisons.length===2){const[i,j]=step.comparisons;g.append('path').attr('d',`M ${i*barWidth+barWidth/2} ${innerHeight+35} \n                   Q ${(i+j)*barWidth/2+barWidth/2} ${innerHeight+50} \n                   ${j*barWidth+barWidth/2} ${innerHeight+35}`).attr('stroke','#ff4d4f').attr('stroke-width',2).attr('fill','none').attr('marker-end','url(#arrowhead)');// 添加箭头标记\nsvg.append('defs').append('marker').attr('id','arrowhead').attr('viewBox','0 -5 10 10').attr('refX',8).attr('refY',0).attr('markerWidth',6).attr('markerHeight',6).attr('orient','auto').append('path').attr('d','M0,-5L10,0L0,5').attr('fill','#ff4d4f');}};const renderTreeVisualization=(svg,step,w,h)=>{// 树形结构可视化实现\nconst margin={top:20,right:20,bottom:20,left:20};const innerWidth=w-margin.left-margin.right;const innerHeight=h-margin.top-margin.bottom;const g=svg.append('g').attr('transform',`translate(${margin.left}, ${margin.top})`);// 这里可以根据具体的树形数据结构来实现\n// 暂时显示提示信息\ng.append('text').attr('x',innerWidth/2).attr('y',innerHeight/2).attr('text-anchor','middle').attr('font-size','16px').attr('fill','#666').text('树形可视化 - 开发中');};const renderGraphVisualization=(svg,step,w,h)=>{// 图形结构可视化实现\nconst margin={top:20,right:20,bottom:20,left:20};const innerWidth=w-margin.left-margin.right;const innerHeight=h-margin.top-margin.bottom;const g=svg.append('g').attr('transform',`translate(${margin.left}, ${margin.top})`);// 这里可以根据具体的图形数据结构来实现\n// 暂时显示提示信息\ng.append('text').attr('x',innerWidth/2).attr('y',innerHeight/2).attr('text-anchor','middle').attr('font-size','16px').attr('fill','#666').text('图形可视化 - 开发中');};return/*#__PURE__*/_jsxs(Card,{title:\"\\u7B97\\u6CD5\\u53EF\\u89C6\\u5316\",size:\"small\",style:{minHeight:height+100},bodyStyle:{overflow:'visible'},children:[/*#__PURE__*/_jsx(\"div\",{style:{textAlign:'center',marginBottom:16},children:step&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{style:{fontSize:'14px',fontWeight:'bold',marginBottom:8},children:[\"\\u6B65\\u9AA4 \",step.id+1,\": \",step.description]}),step.message&&/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'12px',color:'#666'},children:step.message})]})}),/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center'},children:/*#__PURE__*/_jsx(\"svg\",{ref:svgRef,width:width,height:height,style:{border:'1px solid #f0f0f0',borderRadius:'4px'}})}),/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:16,display:'flex',justifyContent:'center',gap:16},children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',gap:4},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:12,height:12,backgroundColor:'#1890ff'}}),/*#__PURE__*/_jsx(\"span\",{style:{fontSize:'12px'},children:\"\\u666E\\u901A\\u5143\\u7D20\"})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',gap:4},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:12,height:12,backgroundColor:'#52c41a'}}),/*#__PURE__*/_jsx(\"span\",{style:{fontSize:'12px'},children:\"\\u9AD8\\u4EAE\\u5143\\u7D20\"})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',gap:4},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:12,height:12,backgroundColor:'#ff4d4f'}}),/*#__PURE__*/_jsx(\"span\",{style:{fontSize:'12px'},children:\"\\u6BD4\\u8F83\\u5143\\u7D20\"})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',gap:4},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:12,height:12,backgroundColor:'#faad14'}}),/*#__PURE__*/_jsx(\"span\",{style:{fontSize:'12px'},children:\"\\u4EA4\\u6362\\u5143\\u7D20\"})]})]})]});};export default DataVisualization;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}