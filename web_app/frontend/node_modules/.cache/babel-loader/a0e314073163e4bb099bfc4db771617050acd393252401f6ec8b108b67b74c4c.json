{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport { fillLegacyProps } from \"../utils/legacyUtil\";\nvar useFilterTreeData = function useFilterTreeData(treeData, searchValue, options) {\n  var fieldNames = options.fieldNames,\n    treeNodeFilterProp = options.treeNodeFilterProp,\n    filterTreeNode = options.filterTreeNode;\n  var fieldChildren = fieldNames.children;\n  return React.useMemo(function () {\n    if (!searchValue || filterTreeNode === false) {\n      return treeData;\n    }\n    var filterOptionFunc = typeof filterTreeNode === 'function' ? filterTreeNode : function (_, dataNode) {\n      return String(dataNode[treeNodeFilterProp]).toUpperCase().includes(searchValue.toUpperCase());\n    };\n    var filterTreeNodes = function filterTreeNodes(nodes) {\n      var keepAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return nodes.reduce(function (filtered, node) {\n        var children = node[fieldChildren];\n        var isMatch = keepAll || filterOptionFunc(searchValue, fillLegacyProps(node));\n        var filteredChildren = filterTreeNodes(children || [], isMatch);\n        if (isMatch || filteredChildren.length) {\n          filtered.push(_objectSpread(_objectSpread({}, node), {}, _defineProperty({\n            isLeaf: undefined\n          }, fieldChildren, filteredChildren)));\n        }\n        return filtered;\n      }, []);\n    };\n    return filterTreeNodes(treeData);\n  }, [treeData, searchValue, fieldChildren, treeNodeFilterProp, filterTreeNode]);\n};\nexport default useFilterTreeData;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}