{"ast":null,"code":"import React,{useState,useEffect,useRef,useCallback}from'react';import{Card,Button,Select,Slider,Space,Typography,Row,Col,message,Input}from'antd';import{PlayCircleOutlined,PauseCircleOutlined,CaretRightOutlined,ReloadOutlined}from'@ant-design/icons';// import MonacoEditor from '@monaco-editor/react';\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const{Title,Text}=Typography;const{Option}=Select;const{TextArea}=Input;const AlgorithmVisualizer=_ref=>{var _steps$currentStep;let{algorithm='bubble_sort',initialCode='',data=[64,34,25,12,22,11,90],onStepChange}=_ref;const[currentStep,setCurrentStep]=useState(0);const[steps,setSteps]=useState([]);const[isPlaying,setIsPlaying]=useState(false);const[speed,setSpeed]=useState(500);const[code,setCode]=useState(initialCode);const[selectedAlgorithm,setSelectedAlgorithm]=useState(algorithm);const[isExecuting,setIsExecuting]=useState(false);const intervalRef=useRef(null);// 预定义算法代码模板\nconst algorithmTemplates={bubble_sort:`function bubbleSort(arr) {\n  const steps = [];\n  const n = arr.length;\n  let data = [...arr];\n  \n  steps.push({\n    id: 0,\n    description: \"开始冒泡排序\",\n    data: [...data],\n    highlights: [],\n    comparisons: []\n  });\n  \n  for (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n      // 比较相邻元素\n      steps.push({\n        id: steps.length,\n        description: \\`比较 \\${data[j]} 和 \\${data[j + 1]}\\`,\n        data: [...data],\n        highlights: [j, j + 1],\n        comparisons: [j, j + 1]\n      });\n      \n      if (data[j] > data[j + 1]) {\n        // 交换元素\n        [data[j], data[j + 1]] = [data[j + 1], data[j]];\n        steps.push({\n          id: steps.length,\n          description: \\`交换 \\${data[j + 1]} 和 \\${data[j]}\\`,\n          data: [...data],\n          highlights: [j, j + 1],\n          comparisons: [],\n          swaps: [j, j + 1]\n        });\n      }\n    }\n  }\n  \n  steps.push({\n    id: steps.length,\n    description: \"排序完成\",\n    data: [...data],\n    highlights: [],\n    comparisons: []\n  });\n  \n  return steps;\n}`,quick_sort:`function quickSort(arr, low = 0, high = arr.length - 1, steps = []) {\n  if (steps.length === 0) {\n    steps.push({\n      id: 0,\n      description: \"开始快速排序\",\n      data: [...arr],\n      highlights: [],\n      comparisons: []\n    });\n  }\n  \n  if (low < high) {\n    const pi = partition(arr, low, high, steps);\n    quickSort(arr, low, pi - 1, steps);\n    quickSort(arr, pi + 1, high, steps);\n  }\n  \n  return steps;\n}\n\nfunction partition(arr, low, high, steps) {\n  const pivot = arr[high];\n  let i = low - 1;\n  \n  steps.push({\n    id: steps.length,\n    description: \\`选择基准元素: \\${pivot}\\`,\n    data: [...arr],\n    highlights: [high],\n    comparisons: []\n  });\n  \n  for (let j = low; j < high; j++) {\n    steps.push({\n      id: steps.length,\n      description: \\`比较 \\${arr[j]} 与基准 \\${pivot}\\`,\n      data: [...arr],\n      highlights: [j, high],\n      comparisons: [j, high]\n    });\n    \n    if (arr[j] < pivot) {\n      i++;\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n      steps.push({\n        id: steps.length,\n        description: \\`交换 \\${arr[j]} 和 \\${arr[i]}\\`,\n        data: [...arr],\n        highlights: [i, j],\n        comparisons: [],\n        swaps: [i, j]\n      });\n    }\n  }\n  \n  [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n  steps.push({\n    id: steps.length,\n    description: \\`将基准放到正确位置\\`,\n    data: [...arr],\n    highlights: [i + 1, high],\n    comparisons: [],\n    swaps: [i + 1, high]\n  });\n  \n  return i + 1;\n}`,binary_search:`function binarySearch(arr, target) {\n  const steps = [];\n  let left = 0;\n  let right = arr.length - 1;\n  \n  steps.push({\n    id: 0,\n    description: \\`在有序数组中查找 \\${target}\\`,\n    data: [...arr],\n    highlights: [],\n    comparisons: []\n  });\n  \n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2);\n    \n    steps.push({\n      id: steps.length,\n      description: \\`检查中间位置 \\${mid}: \\${arr[mid]}\\`,\n      data: [...arr],\n      highlights: [mid],\n      comparisons: [mid]\n    });\n    \n    if (arr[mid] === target) {\n      steps.push({\n        id: steps.length,\n        description: \\`找到目标值 \\${target} 在位置 \\${mid}\\`,\n        data: [...arr],\n        highlights: [mid],\n        comparisons: []\n      });\n      return steps;\n    }\n    \n    if (arr[mid] < target) {\n      left = mid + 1;\n      steps.push({\n        id: steps.length,\n        description: \\`\\${arr[mid]} < \\${target}, 在右半部分查找\\`,\n        data: [...arr],\n        highlights: Array.from({length: right - left + 1}, (_, i) => left + i),\n        comparisons: []\n      });\n    } else {\n      right = mid - 1;\n      steps.push({\n        id: steps.length,\n        description: \\`\\${arr[mid]} > \\${target}, 在左半部分查找\\`,\n        data: [...arr],\n        highlights: Array.from({length: right - left + 1}, (_, i) => left + i),\n        comparisons: []\n      });\n    }\n  }\n  \n  steps.push({\n    id: steps.length,\n    description: \\`未找到目标值 \\${target}\\`,\n    data: [...arr],\n    highlights: [],\n    comparisons: []\n  });\n  \n  return steps;\n}`};// 初始化代码\nuseEffect(()=>{if(algorithmTemplates[selectedAlgorithm]){setCode(algorithmTemplates[selectedAlgorithm]);}},[selectedAlgorithm]);// 执行算法代码\nconst executeAlgorithm=useCallback(async()=>{setIsExecuting(true);try{// 创建安全的执行环境\nconst func=new Function('data',`\n        ${code}\n        \n        // 根据算法类型调用相应函数\n        if (typeof bubbleSort !== 'undefined') {\n          return bubbleSort(data);\n        } else if (typeof quickSort !== 'undefined') {\n          return quickSort([...data]);\n        } else if (typeof binarySearch !== 'undefined') {\n          return binarySearch(data, 25); // 默认查找25\n        }\n        \n        return [];\n      `);const result=func([...data]);setSteps(result||[]);setCurrentStep(0);message.success('算法执行成功！');}catch(error){console.error('算法执行错误:',error);message.error('代码执行出错，请检查语法');}finally{setIsExecuting(false);}},[code,data]);// 播放控制\nconst play=useCallback(()=>{if(!steps||steps.length===0)return;if(currentStep>=steps.length-1){setCurrentStep(0);}setIsPlaying(true);},[currentStep,steps]);const pause=useCallback(()=>{setIsPlaying(false);if(intervalRef.current){clearInterval(intervalRef.current);intervalRef.current=null;}},[]);const reset=useCallback(()=>{pause();setCurrentStep(0);},[pause]);const stepForward=useCallback(()=>{if(!steps||steps.length===0)return;if(currentStep<steps.length-1){setCurrentStep(prev=>prev+1);}},[currentStep,steps]);// 自动播放\nuseEffect(()=>{if(isPlaying&&steps&&steps.length>0&&currentStep<steps.length-1){intervalRef.current=setInterval(()=>{setCurrentStep(prev=>{if(!steps||prev>=steps.length-1){setIsPlaying(false);return prev;}return prev+1;});},speed);}else{setIsPlaying(false);if(intervalRef.current){clearInterval(intervalRef.current);intervalRef.current=null;}}return()=>{if(intervalRef.current){clearInterval(intervalRef.current);}};},[isPlaying,currentStep,steps,speed]);// 通知父组件步骤变化\nuseEffect(()=>{if(steps&&steps[currentStep]&&onStepChange){onStepChange(steps[currentStep]);}},[currentStep,steps,onStepChange]);return/*#__PURE__*/_jsx(\"div\",{style:{width:'100%'},children:/*#__PURE__*/_jsxs(Row,{gutter:[16,16],children:[/*#__PURE__*/_jsx(Col,{span:12,children:/*#__PURE__*/_jsx(Card,{title:\"\\u7B97\\u6CD5\\u4EE3\\u7801\",size:\"small\",extra:/*#__PURE__*/_jsxs(Space,{children:[/*#__PURE__*/_jsxs(Select,{value:selectedAlgorithm,onChange:setSelectedAlgorithm,style:{width:120},children:[/*#__PURE__*/_jsx(Option,{value:\"bubble_sort\",children:\"\\u5192\\u6CE1\\u6392\\u5E8F\"}),/*#__PURE__*/_jsx(Option,{value:\"quick_sort\",children:\"\\u5FEB\\u901F\\u6392\\u5E8F\"}),/*#__PURE__*/_jsx(Option,{value:\"binary_search\",children:\"\\u4E8C\\u5206\\u67E5\\u627E\"})]}),/*#__PURE__*/_jsx(Button,{type:\"primary\",onClick:executeAlgorithm,loading:isExecuting,size:\"small\",children:\"\\u6267\\u884C\"})]}),children:/*#__PURE__*/_jsx(TextArea,{value:code,onChange:e=>setCode(e.target.value),placeholder:\"\\u5728\\u6B64\\u8F93\\u5165JavaScript\\u7B97\\u6CD5\\u4EE3\\u7801...\",style:{height:300,fontFamily:'Monaco, Menlo, \"Ubuntu Mono\", monospace',fontSize:'12px'},autoSize:false})})}),/*#__PURE__*/_jsx(Col,{span:12,children:/*#__PURE__*/_jsx(Card,{title:\"\\u53EF\\u89C6\\u5316\\u63A7\\u5236\",size:\"small\",children:/*#__PURE__*/_jsxs(Space,{direction:\"vertical\",style:{width:'100%'},children:[/*#__PURE__*/_jsxs(Space,{children:[/*#__PURE__*/_jsx(Button,{type:isPlaying?\"default\":\"primary\",icon:isPlaying?/*#__PURE__*/_jsx(PauseCircleOutlined,{}):/*#__PURE__*/_jsx(PlayCircleOutlined,{}),onClick:isPlaying?pause:play,disabled:!steps||steps.length===0,children:isPlaying?'暂停':'播放'}),/*#__PURE__*/_jsx(Button,{icon:/*#__PURE__*/_jsx(CaretRightOutlined,{}),onClick:stepForward,disabled:!steps||steps.length===0||currentStep>=steps.length-1,children:\"\\u5355\\u6B65\"}),/*#__PURE__*/_jsx(Button,{icon:/*#__PURE__*/_jsx(ReloadOutlined,{}),onClick:reset,disabled:!steps||steps.length===0,children:\"\\u91CD\\u7F6E\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(Text,{children:[\"\\u64AD\\u653E\\u901F\\u5EA6: \",speed,\"ms\"]}),/*#__PURE__*/_jsx(Slider,{min:100,max:2000,step:100,value:speed,onChange:setSpeed,style:{marginTop:8}})]}),steps&&steps.length>0&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(Text,{children:[\"\\u6B65\\u9AA4: \",currentStep+1,\" / \",steps.length]}),/*#__PURE__*/_jsx(\"div\",{style:{marginTop:8},children:/*#__PURE__*/_jsx(Text,{type:\"secondary\",children:((_steps$currentStep=steps[currentStep])===null||_steps$currentStep===void 0?void 0:_steps$currentStep.description)||''})})]})]})})})]})});};export default AlgorithmVisualizer;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}