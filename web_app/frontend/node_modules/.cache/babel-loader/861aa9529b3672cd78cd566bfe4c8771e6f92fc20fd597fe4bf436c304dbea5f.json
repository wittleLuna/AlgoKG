{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEvent, useMergedState } from 'rc-util';\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport omit from \"rc-util/es/omit\";\nimport pickAttrs from \"rc-util/es/pickAttrs\";\nimport * as React from 'react';\nimport useToggleDates from \"../hooks/useToggleDates\";\nimport PickerTrigger from \"../PickerTrigger\";\nimport { pickTriggerProps } from \"../PickerTrigger/util\";\nimport { toArray } from \"../utils/miscUtil\";\nimport PickerContext from \"./context\";\nimport useCellRender from \"./hooks/useCellRender\";\nimport useFieldsInvalidate from \"./hooks/useFieldsInvalidate\";\nimport useFilledProps from \"./hooks/useFilledProps\";\nimport useOpen from \"./hooks/useOpen\";\nimport usePickerRef from \"./hooks/usePickerRef\";\nimport usePresets from \"./hooks/usePresets\";\nimport useRangeActive from \"./hooks/useRangeActive\";\nimport useRangePickerValue from \"./hooks/useRangePickerValue\";\nimport useRangeValue, { useInnerValue } from \"./hooks/useRangeValue\";\nimport useShowNow from \"./hooks/useShowNow\";\nimport Popup from \"./Popup\";\nimport SingleSelector from \"./Selector/SingleSelector\";\n\n// TODO: isInvalidateDate with showTime.disabledTime should not provide `range` prop\n\n/** Internal usage. For cross function get same aligned props */\n\nfunction Picker(props, ref) {\n  // ========================= Prop =========================\n  var _useFilledProps = useFilledProps(props),\n    _useFilledProps2 = _slicedToArray(_useFilledProps, 6),\n    filledProps = _useFilledProps2[0],\n    internalPicker = _useFilledProps2[1],\n    complexPicker = _useFilledProps2[2],\n    formatList = _useFilledProps2[3],\n    maskFormat = _useFilledProps2[4],\n    isInvalidateDate = _useFilledProps2[5];\n  var _ref = filledProps,\n    prefixCls = _ref.prefixCls,\n    styles = _ref.styles,\n    classNames = _ref.classNames,\n    order = _ref.order,\n    defaultValue = _ref.defaultValue,\n    value = _ref.value,\n    needConfirm = _ref.needConfirm,\n    onChange = _ref.onChange,\n    onKeyDown = _ref.onKeyDown,\n    disabled = _ref.disabled,\n    disabledDate = _ref.disabledDate,\n    minDate = _ref.minDate,\n    maxDate = _ref.maxDate,\n    defaultOpen = _ref.defaultOpen,\n    open = _ref.open,\n    onOpenChange = _ref.onOpenChange,\n    locale = _ref.locale,\n    generateConfig = _ref.generateConfig,\n    picker = _ref.picker,\n    showNow = _ref.showNow,\n    showToday = _ref.showToday,\n    showTime = _ref.showTime,\n    mode = _ref.mode,\n    onPanelChange = _ref.onPanelChange,\n    onCalendarChange = _ref.onCalendarChange,\n    onOk = _ref.onOk,\n    multiple = _ref.multiple,\n    defaultPickerValue = _ref.defaultPickerValue,\n    pickerValue = _ref.pickerValue,\n    onPickerValueChange = _ref.onPickerValueChange,\n    inputReadOnly = _ref.inputReadOnly,\n    suffixIcon = _ref.suffixIcon,\n    removeIcon = _ref.removeIcon,\n    onFocus = _ref.onFocus,\n    onBlur = _ref.onBlur,\n    presets = _ref.presets,\n    components = _ref.components,\n    cellRender = _ref.cellRender,\n    dateRender = _ref.dateRender,\n    monthCellRender = _ref.monthCellRender,\n    onClick = _ref.onClick;\n\n  // ========================= Refs =========================\n  var selectorRef = usePickerRef(ref);\n\n  // ========================= Util =========================\n  function pickerParam(values) {\n    if (values === null) {\n      return null;\n    }\n    return multiple ? values : values[0];\n  }\n  var toggleDates = useToggleDates(generateConfig, locale, internalPicker);\n\n  // ========================= Open =========================\n  var _useOpen = useOpen(open, defaultOpen, [disabled], onOpenChange),\n    _useOpen2 = _slicedToArray(_useOpen, 2),\n    mergedOpen = _useOpen2[0],\n    triggerOpen = _useOpen2[1];\n\n  // ======================= Calendar =======================\n  var onInternalCalendarChange = function onInternalCalendarChange(dates, dateStrings, info) {\n    if (onCalendarChange) {\n      var filteredInfo = _objectSpread({}, info);\n      delete filteredInfo.range;\n      onCalendarChange(pickerParam(dates), pickerParam(dateStrings), filteredInfo);\n    }\n  };\n  var onInternalOk = function onInternalOk(dates) {\n    onOk === null || onOk === void 0 || onOk(pickerParam(dates));\n  };\n\n  // ======================== Values ========================\n  var _useInnerValue = useInnerValue(generateConfig, locale, formatList, false, order, defaultValue, value, onInternalCalendarChange, onInternalOk),\n    _useInnerValue2 = _slicedToArray(_useInnerValue, 5),\n    mergedValue = _useInnerValue2[0],\n    setInnerValue = _useInnerValue2[1],\n    getCalendarValue = _useInnerValue2[2],\n    triggerCalendarChange = _useInnerValue2[3],\n    triggerOk = _useInnerValue2[4];\n  var calendarValue = getCalendarValue();\n\n  // ======================== Active ========================\n  // In SinglePicker, we will always get `activeIndex` is 0.\n  var _useRangeActive = useRangeActive([disabled]),\n    _useRangeActive2 = _slicedToArray(_useRangeActive, 4),\n    focused = _useRangeActive2[0],\n    triggerFocus = _useRangeActive2[1],\n    lastOperation = _useRangeActive2[2],\n    activeIndex = _useRangeActive2[3];\n  var onSharedFocus = function onSharedFocus(event) {\n    triggerFocus(true);\n    onFocus === null || onFocus === void 0 || onFocus(event, {});\n  };\n  var onSharedBlur = function onSharedBlur(event) {\n    triggerFocus(false);\n    onBlur === null || onBlur === void 0 || onBlur(event, {});\n  };\n\n  // ========================= Mode =========================\n  var _useMergedState = useMergedState(picker, {\n      value: mode\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 2),\n    mergedMode = _useMergedState2[0],\n    setMode = _useMergedState2[1];\n\n  /** Extends from `mergedMode` to patch `datetime` mode */\n  var internalMode = mergedMode === 'date' && showTime ? 'datetime' : mergedMode;\n\n  // ======================= Show Now =======================\n  var mergedShowNow = useShowNow(picker, mergedMode, showNow, showToday);\n\n  // ======================== Value =========================\n  var onInternalChange = onChange && function (dates, dateStrings) {\n    onChange(pickerParam(dates), pickerParam(dateStrings));\n  };\n  var _useRangeValue = useRangeValue(_objectSpread(_objectSpread({}, filledProps), {}, {\n      onChange: onInternalChange\n    }), mergedValue, setInnerValue, getCalendarValue, triggerCalendarChange, [],\n    //disabled,\n    formatList, focused, mergedOpen, isInvalidateDate),\n    _useRangeValue2 = _slicedToArray(_useRangeValue, 2),\n    /** Trigger `onChange` directly without check `disabledDate` */\n    triggerSubmitChange = _useRangeValue2[1];\n\n  // ======================= Validate =======================\n  var _useFieldsInvalidate = useFieldsInvalidate(calendarValue, isInvalidateDate),\n    _useFieldsInvalidate2 = _slicedToArray(_useFieldsInvalidate, 2),\n    submitInvalidates = _useFieldsInvalidate2[0],\n    onSelectorInvalid = _useFieldsInvalidate2[1];\n  var submitInvalidate = React.useMemo(function () {\n    return submitInvalidates.some(function (invalidated) {\n      return invalidated;\n    });\n  }, [submitInvalidates]);\n\n  // ===================== Picker Value =====================\n  // Proxy to single pickerValue\n  var onInternalPickerValueChange = function onInternalPickerValueChange(dates, info) {\n    if (onPickerValueChange) {\n      var cleanInfo = _objectSpread(_objectSpread({}, info), {}, {\n        mode: info.mode[0]\n      });\n      delete cleanInfo.range;\n      onPickerValueChange(dates[0], cleanInfo);\n    }\n  };\n  var _useRangePickerValue = useRangePickerValue(generateConfig, locale, calendarValue, [mergedMode], mergedOpen, activeIndex, internalPicker, false,\n    // multiplePanel,\n    defaultPickerValue, pickerValue, toArray(showTime === null || showTime === void 0 ? void 0 : showTime.defaultOpenValue), onInternalPickerValueChange, minDate, maxDate),\n    _useRangePickerValue2 = _slicedToArray(_useRangePickerValue, 2),\n    currentPickerValue = _useRangePickerValue2[0],\n    setCurrentPickerValue = _useRangePickerValue2[1];\n\n  // >>> Mode need wait for `pickerValue`\n  var triggerModeChange = useEvent(function (nextPickerValue, nextMode, triggerEvent) {\n    setMode(nextMode);\n\n    // Compatible with `onPanelChange`\n    if (onPanelChange && triggerEvent !== false) {\n      var lastPickerValue = nextPickerValue || calendarValue[calendarValue.length - 1];\n      onPanelChange(lastPickerValue, nextMode);\n    }\n  });\n\n  // ======================== Submit ========================\n  /**\n   * Different with RangePicker, confirm should check `multiple` logic.\n   * This will never provide `date` instead.\n   */\n  var triggerConfirm = function triggerConfirm() {\n    triggerSubmitChange(getCalendarValue());\n    triggerOpen(false, {\n      force: true\n    });\n  };\n\n  // ======================== Click =========================\n  var onSelectorClick = function onSelectorClick(event) {\n    if (!disabled && !selectorRef.current.nativeElement.contains(document.activeElement)) {\n      // Click to focus the enabled input\n      selectorRef.current.focus();\n    }\n    triggerOpen(true);\n    onClick === null || onClick === void 0 || onClick(event);\n  };\n  var onSelectorClear = function onSelectorClear() {\n    triggerSubmitChange(null);\n    triggerOpen(false, {\n      force: true\n    });\n  };\n\n  // ======================== Hover =========================\n  var _React$useState = React.useState(null),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    hoverSource = _React$useState2[0],\n    setHoverSource = _React$useState2[1];\n  var _React$useState3 = React.useState(null),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    internalHoverValue = _React$useState4[0],\n    setInternalHoverValue = _React$useState4[1];\n  var hoverValues = React.useMemo(function () {\n    var values = [internalHoverValue].concat(_toConsumableArray(calendarValue)).filter(function (date) {\n      return date;\n    });\n    return multiple ? values : values.slice(0, 1);\n  }, [calendarValue, internalHoverValue, multiple]);\n\n  // Selector values is different with RangePicker\n  // which can not use `hoverValue` directly\n  var selectorValues = React.useMemo(function () {\n    if (!multiple && internalHoverValue) {\n      return [internalHoverValue];\n    }\n    return calendarValue.filter(function (date) {\n      return date;\n    });\n  }, [calendarValue, internalHoverValue, multiple]);\n\n  // Clean up `internalHoverValues` when closed\n  React.useEffect(function () {\n    if (!mergedOpen) {\n      setInternalHoverValue(null);\n    }\n  }, [mergedOpen]);\n\n  // ========================================================\n  // ==                       Panels                       ==\n  // ========================================================\n  // ======================= Presets ========================\n  var presetList = usePresets(presets);\n  var onPresetHover = function onPresetHover(nextValue) {\n    setInternalHoverValue(nextValue);\n    setHoverSource('preset');\n  };\n\n  // TODO: handle this\n  var onPresetSubmit = function onPresetSubmit(nextValue) {\n    var nextCalendarValues = multiple ? toggleDates(getCalendarValue(), nextValue) : [nextValue];\n    var passed = triggerSubmitChange(nextCalendarValues);\n    if (passed && !multiple) {\n      triggerOpen(false, {\n        force: true\n      });\n    }\n  };\n  var onNow = function onNow(now) {\n    onPresetSubmit(now);\n  };\n\n  // ======================== Panel =========================\n  var onPanelHover = function onPanelHover(date) {\n    setInternalHoverValue(date);\n    setHoverSource('cell');\n  };\n\n  // >>> Focus\n  var onPanelFocus = function onPanelFocus(event) {\n    triggerOpen(true);\n    onSharedFocus(event);\n  };\n\n  // >>> Calendar\n  var onPanelSelect = function onPanelSelect(date) {\n    lastOperation('panel');\n\n    // Not change values if multiple and current panel is to match with picker\n    if (multiple && internalMode !== picker) {\n      return;\n    }\n    var nextValues = multiple ? toggleDates(getCalendarValue(), date) : [date];\n\n    // Only trigger calendar event but not update internal `calendarValue` state\n    triggerCalendarChange(nextValues);\n\n    // >>> Trigger next active if !needConfirm\n    // Fully logic check `useRangeValue` hook\n    if (!needConfirm && !complexPicker && internalPicker === internalMode) {\n      triggerConfirm();\n    }\n  };\n\n  // >>> Close\n  var onPopupClose = function onPopupClose() {\n    // Close popup\n    triggerOpen(false);\n  };\n\n  // >>> cellRender\n  var onInternalCellRender = useCellRender(cellRender, dateRender, monthCellRender);\n\n  // >>> invalid\n\n  var panelProps = React.useMemo(function () {\n    var domProps = pickAttrs(filledProps, false);\n    var restProps = omit(filledProps, [].concat(_toConsumableArray(Object.keys(domProps)), ['onChange', 'onCalendarChange', 'style', 'className', 'onPanelChange']));\n    return _objectSpread(_objectSpread({}, restProps), {}, {\n      multiple: filledProps.multiple\n    });\n  }, [filledProps]);\n\n  // >>> Render\n  var panel = /*#__PURE__*/React.createElement(Popup, _extends({}, panelProps, {\n    showNow: mergedShowNow,\n    showTime: showTime\n    // Disabled\n    ,\n\n    disabledDate: disabledDate\n    // Focus\n    ,\n\n    onFocus: onPanelFocus,\n    onBlur: onSharedBlur\n    // Mode\n    ,\n\n    picker: picker,\n    mode: mergedMode,\n    internalMode: internalMode,\n    onPanelChange: triggerModeChange\n    // Value\n    ,\n\n    format: maskFormat,\n    value: calendarValue,\n    isInvalid: isInvalidateDate,\n    onChange: null,\n    onSelect: onPanelSelect\n    // PickerValue\n    ,\n\n    pickerValue: currentPickerValue,\n    defaultOpenValue: showTime === null || showTime === void 0 ? void 0 : showTime.defaultOpenValue,\n    onPickerValueChange: setCurrentPickerValue\n    // Hover\n    ,\n\n    hoverValue: hoverValues,\n    onHover: onPanelHover\n    // Submit\n    ,\n\n    needConfirm: needConfirm,\n    onSubmit: triggerConfirm,\n    onOk: triggerOk\n    // Preset\n    ,\n\n    presets: presetList,\n    onPresetHover: onPresetHover,\n    onPresetSubmit: onPresetSubmit,\n    onNow: onNow\n    // Render\n    ,\n\n    cellRender: onInternalCellRender\n  }));\n\n  // ========================================================\n  // ==                      Selector                      ==\n  // ========================================================\n\n  // ======================== Change ========================\n  var onSelectorChange = function onSelectorChange(date) {\n    triggerCalendarChange(date);\n  };\n  var onSelectorInputChange = function onSelectorInputChange() {\n    lastOperation('input');\n  };\n\n  // ======================= Selector =======================\n  var onSelectorFocus = function onSelectorFocus(event) {\n    lastOperation('input');\n    triggerOpen(true, {\n      inherit: true\n    });\n\n    // setActiveIndex(index);\n\n    onSharedFocus(event);\n  };\n  var onSelectorBlur = function onSelectorBlur(event) {\n    triggerOpen(false);\n    onSharedBlur(event);\n  };\n  var onSelectorKeyDown = function onSelectorKeyDown(event, preventDefault) {\n    if (event.key === 'Tab') {\n      triggerConfirm();\n    }\n    onKeyDown === null || onKeyDown === void 0 || onKeyDown(event, preventDefault);\n  };\n\n  // ======================= Context ========================\n  var context = React.useMemo(function () {\n    return {\n      prefixCls: prefixCls,\n      locale: locale,\n      generateConfig: generateConfig,\n      button: components.button,\n      input: components.input\n    };\n  }, [prefixCls, locale, generateConfig, components.button, components.input]);\n\n  // ======================== Effect ========================\n  // >>> Mode\n  // Reset for every active\n  useLayoutEffect(function () {\n    if (mergedOpen && activeIndex !== undefined) {\n      // Legacy compatible. This effect update should not trigger `onPanelChange`\n      triggerModeChange(null, picker, false);\n    }\n  }, [mergedOpen, activeIndex, picker]);\n\n  // >>> For complex picker, we need check if need to focus next one\n  useLayoutEffect(function () {\n    var lastOp = lastOperation();\n\n    // Trade as confirm on field leave\n    if (!mergedOpen && lastOp === 'input') {\n      triggerOpen(false);\n      triggerConfirm();\n    }\n\n    // Submit with complex picker\n    if (!mergedOpen && complexPicker && !needConfirm && lastOp === 'panel') {\n      triggerConfirm();\n    }\n  }, [mergedOpen]);\n\n  // ======================== Render ========================\n  return /*#__PURE__*/React.createElement(PickerContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(PickerTrigger, _extends({}, pickTriggerProps(filledProps), {\n    popupElement: panel,\n    popupStyle: styles.popup,\n    popupClassName: classNames.popup\n    // Visible\n    ,\n\n    visible: mergedOpen,\n    onClose: onPopupClose\n  }), /*#__PURE__*/React.createElement(SingleSelector\n  // Shared\n  , _extends({}, filledProps, {\n    // Ref\n    ref: selectorRef\n    // Icon\n    ,\n\n    suffixIcon: suffixIcon,\n    removeIcon: removeIcon\n    // Active\n    ,\n\n    activeHelp: !!internalHoverValue,\n    allHelp: !!internalHoverValue && hoverSource === 'preset',\n    focused: focused,\n    onFocus: onSelectorFocus,\n    onBlur: onSelectorBlur,\n    onKeyDown: onSelectorKeyDown,\n    onSubmit: triggerConfirm\n    // Change\n    ,\n\n    value: selectorValues,\n    maskFormat: maskFormat,\n    onChange: onSelectorChange,\n    onInputChange: onSelectorInputChange,\n    internalPicker: internalPicker\n    // Format\n    ,\n\n    format: formatList,\n    inputReadOnly: inputReadOnly\n    // Disabled\n    ,\n\n    disabled: disabled\n    // Open\n    ,\n\n    open: mergedOpen,\n    onOpenChange: triggerOpen\n    // Click\n    ,\n\n    onClick: onSelectorClick,\n    onClear: onSelectorClear\n    // Invalid\n    ,\n\n    invalid: submitInvalidate,\n    onInvalid: function onInvalid(invalid) {\n      // Only `single` mode support type date.\n      // `multiple` mode can not typing.\n      onSelectorInvalid(invalid, 0);\n    }\n  }))));\n}\nvar RefPicker = /*#__PURE__*/React.forwardRef(Picker);\nif (process.env.NODE_ENV !== 'production') {\n  RefPicker.displayName = 'RefPicker';\n}\nexport default RefPicker;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}