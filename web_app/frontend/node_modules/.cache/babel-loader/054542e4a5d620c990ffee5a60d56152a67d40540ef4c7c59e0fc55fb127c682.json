{"ast":null,"code":"import { unit } from '@ant-design/cssinjs';\nimport { FastColor } from '@ant-design/fast-color';\nimport { genFocusStyle, resetComponent } from '../../style';\nimport getArrowStyle, { getArrowOffsetToken, MAX_VERTICAL_CONTENT_RADIUS } from '../../style/placementArrow';\nimport { getArrowToken } from '../../style/roundedArrow';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\n// =============================== Base ===============================\nconst genBaseStyle = token => {\n  const {\n    componentCls,\n    padding,\n    paddingXS,\n    borderRadius,\n    borderRadiusXS,\n    colorPrimary,\n    colorFill,\n    indicatorHeight,\n    indicatorWidth,\n    boxShadowTertiary,\n    zIndexPopup,\n    colorBgElevated,\n    fontWeightStrong,\n    marginXS,\n    colorTextLightSolid,\n    tourBorderRadius,\n    colorWhite,\n    primaryNextBtnHoverBg,\n    closeBtnSize,\n    motionDurationSlow,\n    antCls,\n    primaryPrevBtnBg\n  } = token;\n  return [{\n    [componentCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'absolute',\n      zIndex: zIndexPopup,\n      maxWidth: 'fit-content',\n      visibility: 'visible',\n      width: 520,\n      '--antd-arrow-background-color': colorBgElevated,\n      '&-pure': {\n        maxWidth: '100%',\n        position: 'relative'\n      },\n      [`&${componentCls}-hidden`]: {\n        display: 'none'\n      },\n      // ============================= panel content ============================\n      [`${componentCls}-content`]: {\n        position: 'relative'\n      },\n      [`${componentCls}-inner`]: {\n        textAlign: 'start',\n        textDecoration: 'none',\n        borderRadius: tourBorderRadius,\n        boxShadow: boxShadowTertiary,\n        position: 'relative',\n        backgroundColor: colorBgElevated,\n        border: 'none',\n        backgroundClip: 'padding-box',\n        [`${componentCls}-close`]: Object.assign({\n          position: 'absolute',\n          top: padding,\n          insetInlineEnd: padding,\n          color: token.colorIcon,\n          background: 'none',\n          border: 'none',\n          width: closeBtnSize,\n          height: closeBtnSize,\n          borderRadius: token.borderRadiusSM,\n          transition: `background-color ${token.motionDurationMid}, color ${token.motionDurationMid}`,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          cursor: 'pointer',\n          '&:hover': {\n            color: token.colorIconHover,\n            backgroundColor: token.colorBgTextHover\n          },\n          '&:active': {\n            backgroundColor: token.colorBgTextActive\n          }\n        }, genFocusStyle(token)),\n        [`${componentCls}-cover`]: {\n          textAlign: 'center',\n          padding: `${unit(token.calc(padding).add(closeBtnSize).add(paddingXS).equal())} ${unit(padding)} 0`,\n          img: {\n            width: '100%'\n          }\n        },\n        [`${componentCls}-header`]: {\n          padding: `${unit(padding)} ${unit(padding)} ${unit(paddingXS)}`,\n          width: `calc(100% - ${unit(closeBtnSize)})`,\n          wordBreak: 'break-word',\n          [`${componentCls}-title`]: {\n            fontWeight: fontWeightStrong\n          }\n        },\n        [`${componentCls}-description`]: {\n          padding: `0 ${unit(padding)}`,\n          wordWrap: 'break-word'\n        },\n        [`${componentCls}-footer`]: {\n          padding: `${unit(paddingXS)} ${unit(padding)} ${unit(padding)}`,\n          textAlign: 'end',\n          borderRadius: `0 0 ${unit(borderRadiusXS)} ${unit(borderRadiusXS)}`,\n          display: 'flex',\n          [`${componentCls}-indicators`]: {\n            display: 'inline-block',\n            [`${componentCls}-indicator`]: {\n              width: indicatorWidth,\n              height: indicatorHeight,\n              display: 'inline-block',\n              borderRadius: '50%',\n              background: colorFill,\n              '&:not(:last-child)': {\n                marginInlineEnd: indicatorHeight\n              },\n              '&-active': {\n                background: colorPrimary\n              }\n            }\n          },\n          [`${componentCls}-buttons`]: {\n            marginInlineStart: 'auto',\n            [`${antCls}-btn`]: {\n              marginInlineStart: marginXS\n            }\n          }\n        }\n      },\n      // =============================  primary type  ===========================\n      // `$` for panel, `&$` for pure panel\n      [`${componentCls}-primary, &${componentCls}-primary`]: {\n        '--antd-arrow-background-color': colorPrimary,\n        [`${componentCls}-inner`]: {\n          color: colorTextLightSolid,\n          textAlign: 'start',\n          textDecoration: 'none',\n          backgroundColor: colorPrimary,\n          borderRadius,\n          boxShadow: boxShadowTertiary,\n          [`${componentCls}-close`]: {\n            color: colorTextLightSolid\n          },\n          [`${componentCls}-indicators`]: {\n            [`${componentCls}-indicator`]: {\n              background: primaryPrevBtnBg,\n              '&-active': {\n                background: colorTextLightSolid\n              }\n            }\n          },\n          [`${componentCls}-prev-btn`]: {\n            color: colorTextLightSolid,\n            borderColor: primaryPrevBtnBg,\n            backgroundColor: colorPrimary,\n            '&:hover': {\n              backgroundColor: primaryPrevBtnBg,\n              borderColor: 'transparent'\n            }\n          },\n          [`${componentCls}-next-btn`]: {\n            color: colorPrimary,\n            borderColor: 'transparent',\n            background: colorWhite,\n            '&:hover': {\n              background: primaryNextBtnHoverBg\n            }\n          }\n        }\n      }\n    }),\n    // ============================= mask ===========================\n    [`${componentCls}-mask`]: {\n      [`${componentCls}-placeholder-animated`]: {\n        transition: `all ${motionDurationSlow}`\n      }\n    },\n    // =========== Limit left and right placement radius ==============\n    [['&-placement-left', '&-placement-leftTop', '&-placement-leftBottom', '&-placement-right', '&-placement-rightTop', '&-placement-rightBottom'].join(',')]: {\n      [`${componentCls}-inner`]: {\n        borderRadius: token.min(tourBorderRadius, MAX_VERTICAL_CONTENT_RADIUS)\n      }\n    }\n  },\n  // ============================= Arrow ===========================\n  getArrowStyle(token, 'var(--antd-arrow-background-color)')];\n};\n// ============================== Export ==============================\nexport const prepareComponentToken = token => Object.assign(Object.assign({\n  zIndexPopup: token.zIndexPopupBase + 70,\n  closeBtnSize: token.fontSize * token.lineHeight,\n  primaryPrevBtnBg: new FastColor(token.colorTextLightSolid).setA(0.15).toRgbString(),\n  primaryNextBtnHoverBg: new FastColor(token.colorBgTextHover).onBackground(token.colorWhite).toRgbString()\n}, getArrowOffsetToken({\n  contentRadius: token.borderRadiusLG,\n  limitVerticalRadius: true\n})), getArrowToken(token));\nexport default genStyleHooks('Tour', token => {\n  const {\n    borderRadiusLG\n  } = token;\n  const TourToken = mergeToken(token, {\n    indicatorWidth: 6,\n    indicatorHeight: 6,\n    tourBorderRadius: borderRadiusLG\n  });\n  return [genBaseStyle(TourToken)];\n}, prepareComponentToken);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}