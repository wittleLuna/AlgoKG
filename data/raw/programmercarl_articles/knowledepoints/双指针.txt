引入
双指针是一种简单而又灵活的技巧和思想，单独使用可以轻松解决一些特定问题，和其他算法结合也能发挥多样的用处。

双指针顾名思义，就是同时使用两个指针，在序列、链表结构上指向的是位置，在树、图结构中指向的是节点，通过或同向移动，或相向移动来维护、统计信息。

接下来我们来看双指针的几个具体使用方法。

维护区间信息
如果不和其他数据结构结合使用，双指针维护区间信息的最简单模式就是维护具有一定单调性，新增和删去一个元素都很方便处理的信息，就比如正数的和、正整数的积等等。使用双指针维护区间信息也可以与其他数据结构比如差分、单调队列、线段树、主席树等等结合使用。另外将双指针技巧融入算法的还有莫队，莫队中将询问离线排序后，一般也都是用两个指针记录当前要处理的区间，随着指针一步步移动逐渐更新区间信息。

子序列匹配

此类问题需要将字符串 s 与 t 进行匹配，判断 t 是否为 s 的子序列。解决这种问题只需先将两个指针一个 i 放在 s 开始位置，一个 j 放在 t 开始位置，如果 s[i]=t[j] 说明 t 的第 j 位已经在 s 中找到了第一个对应，可以进而检测后面的部分了，那么 i 和 j 同时加一。如果上述等式不成立，则 t 的第 j 位仍然没有被匹配上，所以只给 i 加一，在 s 的后面部分再继续寻找。最后，如果 j 已经移到了超尾位置，说明整个字符串都可以被匹配上，也就是 t 是 s 的一个子序列，否则不是。

利用序列有序性
很多时候在序列上使用双指针之所以能够正确地达到目的，是因为序列的某些性质，最常见的就是利用序列的有序性。

在单向链表中找环
过程
在单向链表中找环也是有多种办法，不过快慢双指针方法是其中最为简洁的方法之一，接下来介绍这种方法。

首先两个指针都指向链表的头部，令一个指针一次走一步，另一个指针一次走两步，如果它们相遇了，证明有环，否则无环，时间复杂度 O(n)。

如果有环的话，怎么找到环的起点呢？

我们列出式子来观察一下，设相遇时，慢指针一共走了 k 步，在环上走了 l 步（快慢指针在环上相遇时，慢指针一定没走完一圈）。快指针走了 2k 步，设环长为 C，则有

 
\begin{align}
& \ 2 k=n \times C+l+(k-l) \\
& \ k=n \times C \\
\end{align}
第一次相遇时 n 取最小正整数 1。也就是说 k=C。那么利用这个等式，可以在两个指针相遇后，将其中一个指针移到表头，让两者都一步一步走，再度相遇的位置即为环的起点。