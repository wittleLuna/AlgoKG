{
  "id": "AP_317e2c6d",
  "title": "反转字符串",
  "alternative_titles": [],
  "platform": "leetcode",
  "url": "https://leetcode.cn/problems/reverse-string/",
  "description": "编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。\n\n不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。\n\n你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。",
  "examples": [],
  "constraints": [],
  "algorithm_tags": [
    "双指针",
    "字符串处理"
  ],
  "data_structure_tags": [
    "数组"
  ],
  "technique_tags": [
    "位运算交换",
    "库函数使用原则"
  ],
  "difficulty": null,
  "solution_approach": "使用双指针方法，在原地反转字符串。从数组两端开始，同时向中间移动并交换元素直到两指针相遇。",
  "key_insights": [
    {
      "content": "利用两个指针分别指向字符数组的起始和结束位置，通过逐步向中心移动并交换指针所指的内容来实现字符串的原地反转。"
    },
    {
      "content": "通过直接操作输入数组并在其中完成所有改变，避免了额外的空间开销，达到了O(1)的空间复杂度。"
    },
    {
      "content": "在解题过程中合理使用库函数（如swap）可以简化代码实现，但应确保理解其内部工作原理。"
    }
  ],
  "step_by_step_explanation": [
    {
      "name": "思路",
      "text": "先说一说题外话：",
      "resources": [],
      "code_snippets": [
        {
          "language": "cpp",
          "code": "void reverseString(vector<char>& s) { for (int i = 0, j = s.size() - 1; i < s.size()/2; i++, j--) { swap(s[i],s[j]); } }",
          "description": "使用双指针方法反转字符串"
        },
        {
          "language": "cpp",
          "code": "class Solution {public: void reverseString(vector<char>& s) { for (int i = 0, j = s.size() - 1; i < s.size()/2; i++, j--) { swap(s[i],s[j]); } }};",
          "description": "封装为类的方法，使用swap函数交换字符"
        },
        {
          "language": "java",
          "code": "class Solution { public void reverseString(char[] s) { int l = 0; int r = s.length - 1; while (l < r) { s[l] ^= s[r]; s[r] ^= s[l]; s[l] ^= s[r]; l++; r--; } }}",
          "description": "使用位运算实现的字符数组反转"
        },
        {
          "language": "java",
          "code": "class Solution { public void reverseString(char[] s) { int l = 0; int r = s.length - 1; while(l < r){ char temp = s[l]; s[l] = s[r]; s[r] = temp; l++; r--; } }}",
          "description": "使用临时变量进行字符交换"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: left, right = 0, len(s) - 1 while left < right: s[left], s[right] = s[right], s[left] left += 1 right -= 1",
          "description": "Python版本的双指针解法"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: stack = [] for char in s: stack.append(char) for i in range(len(s)): s[i] = stack.pop()",
          "description": "利用栈结构实现字符串反转"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: n = len(s) for i in range(n // 2): s[i], s[n - i - 1] = s[n - i - 1], s[i]",
          "description": "基于range的双指针解决方案"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: s[:] = reversed(s)",
          "description": "使用reversed内置函数快速反转"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: s[:] = s[::-1]",
          "description": "通过切片操作完成反转"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: s[:] = [s[i] for i in range(len(s) - 1, -1, -1)]",
          "description": "列表推导式实现反转"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: s.reverse()",
          "description": "直接调用list对象的reverse方法"
        }
      ],
      "subsections": []
    },
    {
      "name": "其他语言版本",
      "text": "#Java：",
      "resources": [],
      "code_snippets": [
        {
          "language": "java",
          "code": "class Solution { public void reverseString(char[] s) { int l = 0; int r = s.length - 1; while (l < r) { s[l] ^= s[r]; s[r] ^= s[l]; s[l] ^= s[r]; l++; r--; } } }",
          "description": "使用位运算交换字符"
        },
        {
          "language": "java",
          "code": "class Solution { public void reverseString(char[] s) { int l = 0; int r = s.length - 1; while(l < r){ char temp = s[l]; s[l] = s[r]; s[r] = temp; l++; r--; } } }",
          "description": "使用临时变量交换字符"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: left, right = 0, len(s) - 1 while left < right: s[left], s[right] = s[right], s[left] left += 1 right -= 1",
          "description": "双指针方法反转字符串"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: stack = [] for char in s: stack.append(char) for i in range(len(s)): s[i] = stack.pop()",
          "description": "使用栈结构反转字符串"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: n = len(s) for i in range(n // 2): s[i], s[n - i - 1] = s[n - i - 1], s[i]",
          "description": "使用range函数实现字符串反转"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: s[:] = reversed(s)",
          "description": "利用reversed函数反转字符串"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: s[:] = s[::-1]",
          "description": "通过切片操作反转字符串"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: s[:] = [s[i] for i in range(len(s) - 1, -1, -1)]",
          "description": "列表推导式反转字符串"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: s.reverse()",
          "description": "使用reverse()方法原地反转字符串"
        }
      ],
      "subsections": []
    },
    {
      "name": "Java：",
      "text": "class Solution {",
      "resources": [],
      "code_snippets": [
        {
          "language": "cpp",
          "code": "class Solution {public: void reverseString(vector<char>& s) {for (int i = 0, j = s.size() - 1; i < s.size()/2; i++, j--) {swap(s[i],s[j]);}}};",
          "description": "使用双指针方法反转字符串"
        },
        {
          "language": "java",
          "code": "class Solution {public void reverseString(char[] s) {int l = 0; int r = s.length - 1; while(l < r){char temp = s[l]; s[l] = s[r]; s[r] = temp; l++; r--;}}}",
          "description": "利用临时变量交换字符实现字符串反转"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: left, right = 0, len(s) - 1 while left < right: s[left], s[right] = s[right], s[left] left += 1 right -= 1",
          "description": "使用双指针进行原地字符串反转"
        }
      ],
      "subsections": []
    },
    {
      "name": "Python：",
      "text": "（版本一） 双指针",
      "resources": [],
      "code_snippets": [
        {
          "language": "cpp",
          "code": "class Solution {public: void reverseString(vector<char>& s) {for (int i = 0, j = s.size() - 1; i < s.size()/2; i++, j--) {swap(s[i],s[j]);}}};",
          "description": "使用双指针方法反转字符串"
        },
        {
          "language": "java",
          "code": "class Solution {public void reverseString(char[] s) {int l = 0; int r = s.length - 1; while(l < r){char temp = s[l]; s[l] = s[r]; s[r] = temp; l++; r--;}}}",
          "description": "使用临时变量交换字符来实现字符串的原地反转"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: left, right = 0, len(s) - 1 while left < right: s[left], s[right] = s[right], s[left] left += 1 right -= 1",
          "description": "双指针法在Python中实现字符串的原地反转"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: stack = [] for char in s: stack.append(char) for i in range(len(s)): s[i] = stack.pop()",
          "description": "使用栈结构实现字符串的反转"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: n = len(s) for i in range(n // 2): s[i], s[n - i - 1] = s[n - i - 1], s[i]",
          "description": "通过range函数和索引操作来实现字符串的原地反转"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: s[:] = reversed(s)",
          "description": "利用reversed函数实现字符串的原地反转"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: s[:] = s[::-1]",
          "description": "使用切片操作快速反转字符串"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: s[:] = [s[i] for i in range(len(s) - 1, -1, -1)]",
          "description": "采用列表推导式的方法来反转字符串"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: s.reverse()",
          "description": "直接调用list对象的reverse方法来实现字符串的原地反转"
        }
      ],
      "subsections": []
    }
  ],
  "complexity_analysis": {
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "explanation": null
  },
  "code_solutions": [
    {
      "language": "C++",
      "code": "void reverseString(vector<char>& s) { for (int i = 0, j = s.size() - 1; i < s.size()/2; i++, j--) { swap(s[i],s[j]); } }",
      "description": null
    },
    {
      "language": "Java",
      "code": "class Solution { public void reverseString(char[] s) { int l = 0; int r = s.length - 1; while (l < r) { s[l] ^= s[r]; s[r] ^= s[l]; s[l] ^= s[r]; l++; r--; } } }",
      "description": null
    },
    {
      "language": "Java",
      "code": "class Solution { public void reverseString(char[] s) { int l = 0; int r = s.length - 1; while(l < r){ char temp = s[l]; s[l] = s[r]; s[r] = temp; l++; r--; } } }",
      "description": null
    },
    {
      "language": "Python",
      "code": "class Solution: def reverseString(self, s: List[str]) -> None: left, right = 0, len(s) - 1 while left < right: s[left], s[right] = s[right], s[left] left += 1 right -= 1",
      "description": null
    },
    {
      "language": "Python",
      "code": "class Solution: def reverseString(self, s: List[str]) -> None: stack = [] for char in s: stack.append(char) for i in range(len(s)): s[i] = stack.pop()",
      "description": null
    },
    {
      "language": "Python",
      "code": "class Solution: def reverseString(self, s: List[str]) -> None: n = len(s) for i in range(n // 2): s[i], s[n - i - 1] = s[n - i - 1], s[i]",
      "description": null
    },
    {
      "language": "Python",
      "code": "class Solution: def reverseString(self, s: List[str]) -> None: s[:] = reversed(s)",
      "description": null
    },
    {
      "language": "Python",
      "code": "class Solution: def reverseString(self, s: List[str]) -> None: s[:] = s[::-1]",
      "description": null
    },
    {
      "language": "Python",
      "code": "class Solution: def reverseString(self, s: List[str]) -> None: s[:] = [s[i] for i in range(len(s) - 1, -1, -1)]",
      "description": null
    },
    {
      "language": "Python",
      "code": "class Solution: def reverseString(self, s: List[str]) -> None: s.reverse()",
      "description": null
    }
  ],
  "common_mistakes": [
    "完全依赖高级语言内置库函数解决题目关键部分，忽略了对算法基础原理的理解。",
    "在不需要的情况下使用过多辅助数据结构，增加了不必要的内存消耗。"
  ],
  "similar_problems": [],
  "follow_up_questions": [],
  "all_resources": [
    {
      "type": "image",
      "content": "https://file1.kamacoder.com/i/algo/344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.gif",
      "description": "图片展示了一个字符串 \"hello\" 的数组表示，其中两个指针 `i` 和 `j` 分别指向首尾字符，常见于字符串反转或双指针算法的解题过程中。",
      "context": "该图片展示了使用双指针方法反转字符串\"hello\"的过程。"
    },
    {
      "type": "gif",
      "content": "https://file1.kamacoder.com/i/algo/344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.gif",
      "description": "GIF展示了通过双指针方法从两端向中心逐步交换字符来实现字符串反转的过程。",
      "context": "该GIF动画展示了使用双指针方法反转字符串\"hello\"的过程。"
    }
  ],
  "source_file": "F:\\My_project\\programmercarl_articles\\problems\\双指针\\反转字符串.txt",
  "extracted_at": "2025-07-21T01:48:41.831566",
  "raw_content": "反转字符串\n力扣题目链接(https://leetcode.cn/problems/reverse-string/)\n\n编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。\n\n不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。\n\n你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。\n\n示例 1：\n输入：[\"h\",\"e\",\"l\",\"l\",\"o\"]\n输出：[\"o\",\"l\",\"l\",\"e\",\"h\"]\n\n示例 2：\n输入：[\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\n输出：[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n\n#思路\n先说一说题外话：\n\n对于这道题目一些同学直接用C++里的一个库函数 reverse，调一下直接完事了， 相信每一门编程语言都有这样的库函数。\n\n如果这么做题的话，这样大家不会清楚反转字符串的实现原理了。\n\n但是也不是说库函数就不能用，是要分场景的。\n\n如果在现场面试中，我们什么时候使用库函数，什么时候不要用库函数呢？\n\n如果题目关键的部分直接用库函数就可以解决，建议不要使用库函数。\n\n毕竟面试官一定不是考察你对库函数的熟悉程度， 如果使用python和java 的同学更需要注意这一点，因为python、java提供的库函数十分丰富。\n\n如果库函数仅仅是 解题过程中的一小部分，并且你已经很清楚这个库函数的内部实现原理的话，可以考虑使用库函数。\n\n建议大家平时在leetcode上练习算法的时候本着这样的原则去练习，这样才有助于我们对算法的理解。\n\n不要沉迷于使用库函数一行代码解决题目之类的技巧，不是说这些技巧不好，而是说这些技巧可以用来娱乐一下。\n\n真正自己写的时候，要保证理解可以实现是相应的功能。\n\n接下来再来讲一下如何解决反转字符串的问题。\n\n大家应该还记得，我们已经讲过了206.反转链表 (https://programmercarl.com/0206.%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.html)。\n\n在反转链表中，使用了双指针的方法。\n\n那么反转字符串依然是使用双指针的方法，只不过对于字符串的反转，其实要比链表简单一些。\n\n因为字符串也是一种数组，所以元素在内存中是连续分布，这就决定了反转链表和反转字符串方式上还是有所差异的。\n\n\n对于字符串，我们定义两个指针（也可以说是索引下标），一个从字符串前面，一个从字符串后面，两个指针同时向中间移动，并交换元素。\n\n以字符串hello为例，过程如下：\n\nhttps://file1.kamacoder.com/i/algo/344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.gif\n\n不难写出如下C++代码:\n\nvoid reverseString(vector<char>& s) {\n    for (int i = 0, j = s.size() - 1; i < s.size()/2; i++, j--) {\n        swap(s[i],s[j]);\n    }\n}\n循环里只要做交换s[i] 和s[j]操作就可以了，那么我这里使用了swap 这个库函数。大家可以使用。\n\n因为相信大家都知道交换函数如何实现，而且这个库函数仅仅是解题中的一部分， 所以这里使用库函数也是可以的。\n\nswap可以有两种实现。\n\n一种就是常见的交换数值：\n\nint tmp = s[i];\ns[i] = s[j];\ns[j] = tmp;\n\n一种就是通过位运算：\n\ns[i] ^= s[j];\ns[j] ^= s[i];\ns[i] ^= s[j];\n这道题目还是比较简单的，但是我正好可以通过这道题目说一说在刷题的时候，使用库函数的原则。\n\n如果题目关键的部分直接用库函数就可以解决，建议不要使用库函数。\n\n如果库函数仅仅是 解题过程中的一小部分，并且你已经很清楚这个库函数的内部实现原理的话，可以考虑使用库函数。\n\n本着这样的原则，我没有使用reverse库函数，而使用swap库函数。\n\n在字符串相关的题目中，库函数对大家的诱惑力是非常大的，因为会有各种反转，切割取词之类的操作，这也是为什么字符串的库函数这么丰富的原因。\n\n相信大家本着我所讲述的原则来做字符串相关的题目，在选择库函数的角度上会有所原则，也会有所收获。\n\nC++代码如下：\n\nclass Solution {\npublic:\n    void reverseString(vector<char>& s) {\n        for (int i = 0, j = s.size() - 1; i < s.size()/2; i++, j--) {\n            swap(s[i],s[j]);\n        }\n    }\n};\n时间复杂度: O(n)\n空间复杂度: O(1)\n#其他语言版本\n#Java：\nclass Solution {\n    public void reverseString(char[] s) {\n        int l = 0;\n        int r = s.length - 1;\n        while (l < r) {\n            s[l] ^= s[r];  //构造 a ^ b 的结果，并放在 a 中\n            s[r] ^= s[l];  //将 a ^ b 这一结果再 ^ b ，存入b中，此时 b = a, a = a ^ b\n            s[l] ^= s[r];  //a ^ b 的结果再 ^ a ，存入 a 中，此时 b = a, a = b 完成交换\n            l++;\n            r--;\n        }\n    }\n}\n\n// 第二种方法用temp来交换数值更多人容易理解些\nclass Solution {\n    public void reverseString(char[] s) {\n        int l = 0;\n        int r = s.length - 1;\n        while(l < r){\n            char temp = s[l];\n            s[l] = s[r];\n            s[r] = temp;\n            l++;\n            r--;\n        }\n    }\n}\n\n\n#Python：\n（版本一） 双指针\n\nclass Solution:\n    def reverseString(self, s: List[str]) -> None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n        left, right = 0, len(s) - 1\n        \n        # 该方法已经不需要判断奇偶数，经测试后时间空间复杂度比用 for i in range(len(s)//2)更低\n        # 因为while每次循环需要进行条件判断，而range函数不需要，直接生成数字，因此时间复杂度更低。推荐使用range\n        while left < right:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n       \n（版本二） 使用栈\n\nclass Solution:\n    def reverseString(self, s: List[str]) -> None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n        stack = []\n        for char in s:\n            stack.append(char)\n        for i in range(len(s)):\n            s[i] = stack.pop()\n       \n（版本三） 使用range\n\nclass Solution:\n    def reverseString(self, s: List[str]) -> None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n        n = len(s)\n        for i in range(n // 2):\n            s[i], s[n - i - 1] = s[n - i - 1], s[i]\n       \n（版本四） 使用reversed\n\nclass Solution:\n    def reverseString(self, s: List[str]) -> None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n        s[:] = reversed(s)\n       \n（版本五） 使用切片\n\nclass Solution:\n    def reverseString(self, s: List[str]) -> None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n        s[:] = s[::-1]\n       \n（版本六） 使用列表推导\n\nclass Solution:\n    def reverseString(self, s: List[str]) -> None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n        s[:] = [s[i] for i in range(len(s) - 1, -1, -1)]\n       \n（版本七） 使用reverse()\n\nclass Solution:\n    def reverseString(self, s: List[str]) -> None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n        # 原地反转,无返回值\n        s.reverse()"
}