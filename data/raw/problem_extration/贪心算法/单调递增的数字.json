{
  "id": "AP_f229af48",
  "title": "单调递增的数字",
  "alternative_titles": [],
  "platform": "leetcode",
  "url": "https://leetcode.cn/problems/monotone-increasing-digits/",
  "description": "一个非负整数 N，找出小于或等于 N 的最大的整数，同时这个整数需要满足其各个位数上的数字是单调递增。\n\n（当且仅当每个相邻位数上的数字 x 和 y 满足 x <= y 时，我们称这个整数是单调递增的。）",
  "examples": [],
  "constraints": [],
  "algorithm_tags": [
    "贪心"
  ],
  "data_structure_tags": [
    "字符串",
    "数组"
  ],
  "technique_tags": [
    "字符操作",
    "边界条件处理"
  ],
  "difficulty": null,
  "solution_approach": "通过贪心算法从右向左遍历数字字符串，找到第一个不满足单调递增的位置后，将该位减一，并将右侧所有位数设置为9。这样可以确保得到的结果是小于或等于N的最大单调递增数字。",
  "key_insights": [
    {
      "content": "当遇到strNum[i - 1] > strNum[i]的情况时，首先使strNum[i - 1]--，然后把strNum[i]以及之后的所有位都设为9。这是因为这样做可以在保证结果仍然小于原数的同时，尽可能地增大结果值。"
    },
    {
      "content": "选择从右向左遍历而非从左向右遍历的原因在于，从前向后修改可能会导致之前已经调整过的部分再次不符合条件。从右向左则可以避免这种情况，因为每次调整只会影响当前及后续位置，而不会影响前面已经确定的部分。"
    },
    {
      "content": "使用一个标志变量flag来记录需要开始赋值为9的位置，以简化代码逻辑并提高效率。"
    }
  ],
  "step_by_step_explanation": [
    {
      "name": "思路",
      "text": "#暴力解法",
      "resources": [],
      "code_snippets": [
        {
          "language": "cpp",
          "code": "class Solution {private: bool checkNum(int num) { int max = 10; while (num) { int t = num % 10; if (max >= t) max = t; else return false; num = num / 10; } return true; } public: int monotoneIncreasingDigits(int N) { for (int i = N; i > 0; i--) { if (checkNum(i)) return i; } return 0; }};",
          "description": "暴力解法"
        },
        {
          "language": "cpp",
          "code": "class Solution {public: int monotoneIncreasingDigits(int N) { string strNum = to_string(N); int flag = strNum.size(); for (int i = strNum.size() - 1; i > 0; i--) { if (strNum[i - 1] > strNum[i]) { flag = i; strNum[i - 1]--; } } for (int i = flag; i < strNum.size(); i++) { strNum[i] = '9'; } return stoi(strNum); }};",
          "description": "贪心算法"
        },
        {
          "language": "java",
          "code": "class Solution {public int monotoneIncreasingDigits(int N) { String[] strings = (N + \"\").split(\"\"); int start = strings.length; for (int i = strings.length - 1; i > 0; i--) { if (Integer.parseInt(strings[i]) < Integer.parseInt(strings[i - 1])) { strings[i - 1] = (Integer.parseInt(strings[i - 1]) - 1) + \"\"; start = i; } } for (int i = start; i < strings.length; i++) { strings[i] = \"9\"; } return Integer.parseInt(String.join(\"\",strings));}}",
          "description": "Java版本1"
        },
        {
          "language": "java",
          "code": "class Solution {public int monotoneIncreasingDigits(int n) { String s = String.valueOf(n); char[] chars = s.toCharArray(); int start = s.length(); for (int i = s.length() - 2; i >= 0; i--) { if (chars[i] > chars[i + 1]) { chars[i]--; start = i+1; } } for (int i = start; i < s.length(); i++) { chars[i] = '9'; } return Integer.parseInt(String.valueOf(chars));}}",
          "description": "Java版本2"
        },
        {
          "language": "python",
          "code": "class Solution: def checkNum(self, num): max_digit = 10 while num: digit = num % 10 if max_digit >= digit: max_digit = digit else: return False num //= 10 return True def monotoneIncreasingDigits(self, N): for i in range(N, 0, -1): if self.checkNum(i): return i return 0",
          "description": "Python暴力解法"
        },
        {
          "language": "python",
          "code": "class Solution: def monotoneIncreasingDigits(self, n: int) -> int: strNum = str(n) flag = len(strNum) for i in range(len(strNum) - 1, 0, -1): if strNum[i - 1] > strNum[i]: flag = i strNum = strNum[:i - 1] + str(int(strNum[i - 1]) - 1) + strNum[i:] for i in range(flag, len(strNum)): strNum = strNum[:i] + '9' + strNum[i + 1:] return int(strNum)",
          "description": "Python贪心算法（版本一）"
        },
        {
          "language": "python",
          "code": "class Solution: def monotoneIncreasingDigits(self, n: int) -> int: strNum = list(str(n)) for i in range(len(strNum) - 1, 0, -1): if strNum[i - 1] > strNum[i]: strNum[i - 1] = str(int(strNum[i - 1]) - 1) for j in range(i, len(strNum)): strNum[j] = '9' return int(''.join(strNum))",
          "description": "Python贪心算法（版本二）"
        },
        {
          "language": "python",
          "code": "class Solution: def monotoneIncreasingDigits(self, n: int) -> int: strNum = list(str(n)) for i in range(len(strNum) - 1, 0, -1): if strNum[i - 1] > strNum[i]: strNum[i - 1] = str(int(strNum[i - 1]) - 1) strNum[i:] = '9' * (len(strNum) - i) return int(''.join(strNum))",
          "description": "Python贪心算法（版本三）"
        },
        {
          "language": "python",
          "code": "class Solution: def monotoneIncreasingDigits(self, n: int) -> int: strNum = str(n) for i in range(len(strNum) - 1, 0, -1): if strNum[i - 1] > strNum[i]: strNum = strNum[:i - 1] + str(int(strNum[i - 1]) - 1) + '9' * (len(strNum) - i) return int(strNum)",
          "description": "Python贪心算法（版本四）精简"
        }
      ],
      "subsections": []
    },
    {
      "name": "暴力解法",
      "text": "题意很简单，那么首先想的就是暴力解法了，来我替大家暴力一波，结果自然是超时！",
      "resources": [],
      "code_snippets": [
        {
          "language": "cpp",
          "code": "class Solution {\nprivate:\n    bool checkNum(int num) {\n        int max = 10;\n        while (num) {\n            int t = num % 10;\n            if (max >= t) max = t;\n            else return false;\n            num = num / 10;\n        }\n        return true;\n    }\npublic:\n    int monotoneIncreasingDigits(int N) {\n        for (int i = N; i > 0; i--) {\n            if (checkNum(i)) return i;\n        }\n        return 0;\n    }\n};",
          "description": "C++暴力解法"
        },
        {
          "language": "cpp",
          "code": "class Solution {\npublic:\n    int monotoneIncreasingDigits(int N) {\n        string strNum = to_string(N);\n        int flag = strNum.size();\n        for (int i = strNum.size() - 1; i > 0; i--) {\n            if (strNum[i - 1] > strNum[i]) {\n                flag = i;\n                strNum[i - 1]--;\n            }\n        }\n        for (int i = flag; i < strNum.size(); i++) {\n            strNum[i] = '9';\n        }\n        return stoi(strNum);\n    }\n};",
          "description": "C++贪心算法"
        },
        {
          "language": "java",
          "code": "class Solution {\n    public int monotoneIncreasingDigits(int N) {\n        String[] strings = (N + \"\").split(\"\");\n        int start = strings.length;\n        for (int i = strings.length - 1; i > 0; i--) {\n            if (Integer.parseInt(strings[i]) < Integer.parseInt(strings[i - 1])) {\n                strings[i - 1] = (Integer.parseInt(strings[i - 1]) - 1) + \"\";\n                start = i;\n            }\n        }\n        for (int i = start; i < strings.length; i++) {\n            strings[i] = \"9\";\n        }\n        return Integer.parseInt(String.join(\"\",strings));\n    }\n}",
          "description": "Java版本1"
        },
        {
          "language": "java",
          "code": "class Solution {\n    public int monotoneIncreasingDigits(int n) {\n        String s = String.valueOf(n);\n        char[] chars = s.toCharArray();\n        int start = s.length();\n        for (int i = s.length() - 2; i >= 0; i--) {\n            if (chars[i] > chars[i + 1]) {\n                chars[i]--;\n                start = i+1;\n            }\n        }\n        for (int i = start; i < s.length(); i++) {\n            chars[i] = '9';\n        }\n        return Integer.parseInt(String.valueOf(chars));\n    }\n}",
          "description": "Java版本2"
        },
        {
          "language": "python",
          "code": "class Solution:\n    def checkNum(self, num):\n        max_digit = 10\n        while num:\n            digit = num % 10\n            if max_digit >= digit:\n                max_digit = digit\n            else:\n                return False\n            num //= 10\n        return True\n\n    def monotoneIncreasingDigits(self, N):\n        for i in range(N, 0, -1):\n            if self.checkNum(i):\n                return i\n        return 0",
          "description": "Python暴力解法"
        },
        {
          "language": "python",
          "code": "class Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n        strNum = str(n)\n        flag = len(strNum)\n        for i in range(len(strNum) - 1, 0, -1):\n            if strNum[i - 1] > strNum[i]:\n                flag = i\n                strNum = strNum[:i - 1] + str(int(strNum[i - 1]) - 1) + strNum[i:]\n        for i in range(flag, len(strNum)):\n            strNum = strNum[:i] + '9' + strNum[i + 1:]\n        return int(strNum)",
          "description": "Python贪心版本一"
        },
        {
          "language": "python",
          "code": "class Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n        strNum = list(str(n))\n        for i in range(len(strNum) - 1, 0, -1):\n            if strNum[i - 1] > strNum[i]:\n                strNum[i - 1] = str(int(strNum[i - 1]) - 1)\n                for j in range(i, len(strNum)):\n                    strNum[j] = '9'\n        return int(''.join(strNum))",
          "description": "Python贪心版本二"
        },
        {
          "language": "python",
          "code": "class Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n        strNum = list(str(n))\n        for i in range(len(strNum) - 1, 0, -1):\n            if strNum[i - 1] > strNum[i]:\n                strNum[i - 1] = str(int(strNum[i - 1]) - 1)\n                strNum[i:] = '9' * (len(strNum) - i)\n        return int(''.join(strNum))",
          "description": "Python贪心版本三"
        },
        {
          "language": "python",
          "code": "class Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n        strNum = str(n)\n        for i in range(len(strNum) - 1, 0, -1):\n            if strNum[i - 1] > strNum[i]:\n                strNum = strNum[:i - 1] + str(int(strNum[i - 1]) - 1) + '9' * (len(strNum) - i)\n        return int(strNum)",
          "description": "Python贪心版本四"
        }
      ],
      "subsections": []
    },
    {
      "name": "贪心算法",
      "text": "题目要求小于等于N的最大单调递增的整数，那么拿一个两位的数字来举例。",
      "resources": [],
      "code_snippets": [
        {
          "language": "cpp",
          "code": "class Solution {private: bool checkNum(int num) { int max = 10; while (num) { int t = num % 10; if (max >= t) max = t; else return false; num = num / 10; } return true; } public: int monotoneIncreasingDigits(int N) { for (int i = N; i > 0; i--) { if (checkNum(i)) return i; } return 0; }};",
          "description": "暴力解法，从N开始逐个检查是否为单调递增的整数。"
        },
        {
          "language": "cpp",
          "code": "class Solution {public: int monotoneIncreasingDigits(int N) { string strNum = to_string(N); int flag = strNum.size(); for (int i = strNum.size() - 1; i > 0; i--) { if (strNum[i - 1] > strNum[i]) { flag = i; strNum[i - 1]--; } } for (int i = flag; i < strNum.size(); i++) { strNum[i] = '9'; } return stoi(strNum); }};",
          "description": "贪心算法版本，通过字符串处理找到最大的单调递增整数。"
        },
        {
          "language": "java",
          "code": "class Solution {public int monotoneIncreasingDigits(int N) { String[] strings = (N + \"\").split(\"\"); int start = strings.length; for (int i = strings.length - 1; i > 0; i--) { if (Integer.parseInt(strings[i]) < Integer.parseInt(strings[i - 1])) { strings[i - 1] = (Integer.parseInt(strings[i - 1]) - 1) + \"\"; start = i; } } for (int i = start; i < strings.length; i++) { strings[i] = \"9\"; } return Integer.parseInt(String.join(\"\",strings)); }}",
          "description": "Java版本一，使用字符串数组处理数字。"
        },
        {
          "language": "java",
          "code": "class Solution {public int monotoneIncreasingDigits(int n) { String s = String.valueOf(n); char[] chars = s.toCharArray(); int start = s.length(); for (int i = s.length() - 2; i >= 0; i--) { if (chars[i] > chars[i + 1]) { chars[i]--; start = i+1; } } for (int i = start; i < s.length(); i++) { chars[i] = '9'; } return Integer.parseInt(String.valueOf(chars)); }}",
          "description": "Java版本二，优化了性能，在字符数组上直接操作。"
        },
        {
          "language": "python",
          "code": "class Solution: def checkNum(self, num): max_digit = 10 while num: digit = num % 10 if max_digit >= digit: max_digit = digit else: return False num //= 10 return True def monotoneIncreasingDigits(self, N): for i in range(N, 0, -1): if self.checkNum(i): return i return 0",
          "description": "Python暴力解法，实现与C++类似逻辑。"
        },
        {
          "language": "python",
          "code": "class Solution: def monotoneIncreasingDigits(self, n: int) -> int: strNum = str(n) flag = len(strNum) for i in range(len(strNum) - 1, 0, -1): if strNum[i - 1] > strNum[i]: flag = i strNum = strNum[:i - 1] + str(int(strNum[i - 1]) - 1) + strNum[i:] for i in range(flag, len(strNum)): strNum = strNum[:i] + '9' + strNum[i + 1:] return int(strNum)",
          "description": "Python贪心算法版本一，将非递增位置调整并填充9。"
        },
        {
          "language": "python",
          "code": "class Solution: def monotoneIncreasingDigits(self, n: int) -> int: strNum = list(str(n)) for i in range(len(strNum) - 1, 0, -1): if strNum[i - 1] > strNum[i]: strNum[i - 1] = str(int(strNum[i - 1]) - 1) for j in range(i, len(strNum)): strNum[j] = '9' return int(''.join(strNum))",
          "description": "Python贪心算法版本二，更高效地处理列表中的字符。"
        },
        {
          "language": "python",
          "code": "class Solution: def monotoneIncreasingDigits(self, n: int) -> int: strNum = list(str(n)) for i in range(len(strNum) - 1, 0, -1): if strNum[i - 1] > strNum[i]: strNum[i - 1] = str(int(strNum[i - 1]) - 1) strNum[i:] = '9' * (len(strNum) - i) return int(''.join(strNum))",
          "description": "Python贪心算法版本三，进一步简化代码。"
        },
        {
          "language": "python",
          "code": "class Solution: def monotoneIncreasingDigits(self, n: int) -> int: strNum = str(n) for i in range(len(strNum) - 1, 0, -1): if strNum[i - 1] > strNum[i]: strNum = strNum[:i - 1] + str(int(strNum[i - 1]) - 1) + '9' * (len(strNum) - i) return int(strNum)",
          "description": "Python贪心算法精简版本，通过字符串切片快速构造结果。"
        }
      ],
      "subsections": []
    },
    {
      "name": "总结",
      "text": "本题只要想清楚个例，例如98，一旦出现strNum[i - 1] > strNum[i]的情况（非单调递增），首先想让strNum[i - 1]减一，strNum[i]赋值9，这样这个整数就是89。就可以很自然想到对应的贪心解法了。",
      "resources": [],
      "code_snippets": [
        {
          "language": "cpp",
          "code": "class Solution {\nprivate:\n    // 判断一个数字的各位上是否是递增\n    bool checkNum(int num) {\n        int max = 10;\n        while (num) {\n            int t = num % 10;\n            if (max >= t) max = t;\n            else return false;\n            num = num / 10;\n        }\n        return true;\n    }\npublic:\n    int monotoneIncreasingDigits(int N) {\n        for (int i = N; i > 0; i--) { // 从大到小遍历\n            if (checkNum(i)) return i;\n        }\n        return 0;\n    }\n};",
          "description": "暴力解法"
        },
        {
          "language": "cpp",
          "code": "class Solution {\npublic:\n    int monotoneIncreasingDigits(int N) {\n        string strNum = to_string(N);\n        // flag用来标记赋值9从哪里开始\n        // 设置为这个默认值，为了防止第二个for循环在flag没有被赋值的情况下执行\n        int flag = strNum.size();\n        for (int i = strNum.size() - 1; i > 0; i--) {\n            if (strNum[i - 1] > strNum[i] ) {\n                flag = i;\n                strNum[i - 1]--;\n            }\n        }\n        for (int i = flag; i < strNum.size(); i++) {\n            strNum[i] = '9';\n        }\n        return stoi(strNum);\n    }\n};",
          "description": "贪心算法"
        },
        {
          "language": "java",
          "code": "class Solution {\n    public int monotoneIncreasingDigits(int N) {\n        String[] strings = (N + \"\").split(\"\");\n        int start = strings.length;\n        for (int i = strings.length - 1; i > 0; i--) {\n            if (Integer.parseInt(strings[i]) < Integer.parseInt(strings[i - 1])) {\n                strings[i - 1] = (Integer.parseInt(strings[i - 1]) - 1) + \"\";\n                start = i;\n            }\n        }\n        for (int i = start; i < strings.length; i++) {\n            strings[i] = \"9\";\n        }\n        return Integer.parseInt(String.join(\"\",strings));\n    }\n}",
          "description": "Java版本1"
        },
        {
          "language": "java",
          "code": "class Solution {\n    public int monotoneIncreasingDigits(int n) {\n        String s = String.valueOf(n);\n        char[] chars = s.toCharArray();\n        int start = s.length();\n        for (int i = s.length() - 2; i >= 0; i--) {\n            if (chars[i] > chars[i + 1]) {\n                chars[i]--;\n                start = i+1;\n            }\n        }\n        for (int i = start; i < s.length(); i++) {\n            chars[i] = '9';\n        }\n        return Integer.parseInt(String.valueOf(chars));\n    }\n}",
          "description": "Java版本2"
        },
        {
          "language": "python",
          "code": "class Solution:\n    def checkNum(self, num):\n        max_digit = 10\n        while num:\n            digit = num % 10\n            if max_digit >= digit:\n                max_digit = digit\n            else:\n                return False\n            num //= 10\n        return True\n\n    def monotoneIncreasingDigits(self, N):\n        for i in range(N, 0, -1):\n            if self.checkNum(i):\n                return i\n        return 0",
          "description": "Python暴力解法"
        },
        {
          "language": "python",
          "code": "class Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n        strNum = str(n)\n        flag = len(strNum)\n        for i in range(len(strNum) - 1, 0, -1):\n            if strNum[i - 1] > strNum[i]:\n                flag = i\n                strNum = strNum[:i - 1] + str(int(strNum[i - 1]) - 1) + strNum[i:]\n        for i in range(flag, len(strNum)):\n            strNum = strNum[:i] + '9' + strNum[i + 1:]\n        return int(strNum)",
          "description": "Python贪心（版本一）"
        },
        {
          "language": "python",
          "code": "class Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n        strNum = list(str(n))\n        for i in range(len(strNum) - 1, 0, -1):\n            if strNum[i - 1] > strNum[i]:\n                strNum[i - 1] = str(int(strNum[i - 1]) - 1)\n                for j in range(i, len(strNum)):\n                    strNum[j] = '9'\n        return int(''.join(strNum))",
          "description": "Python贪心（版本二）"
        },
        {
          "language": "python",
          "code": "class Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n        strNum = list(str(n))\n        for i in range(len(strNum) - 1, 0, -1):\n            if strNum[i - 1] > strNum[i]:\n                strNum[i - 1] = str(int(strNum[i - 1]) - 1)\n                strNum[i:] = '9' * (len(strNum) - i)\n        return int(''.join(strNum))",
          "description": "Python贪心（版本三）"
        },
        {
          "language": "python",
          "code": "class Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n        strNum = str(n)\n        for i in range(len(strNum) - 1, 0, -1):\n            if strNum[i - 1] > strNum[i]:\n                strNum = strNum[:i - 1] + str(int(strNum[i - 1]) - 1) + '9' * (len(strNum) - i)\n        return int(strNum)",
          "description": "Python贪心（版本四）精简"
        }
      ],
      "subsections": []
    },
    {
      "name": "其他语言版本",
      "text": "#Java",
      "resources": [],
      "code_snippets": [
        {
          "language": "cpp",
          "code": "class Solution {\nprivate:\n    bool checkNum(int num) {\n        int max = 10;\n        while (num) {\n            int t = num % 10;\n            if (max >= t) max = t;\n            else return false;\n            num = num / 10;\n        }\n        return true;\n    }\npublic:\n    int monotoneIncreasingDigits(int N) {\n        for (int i = N; i > 0; i--) {\n            if (checkNum(i)) return i;\n        }\n        return 0;\n    }\n};",
          "description": "暴力解法"
        },
        {
          "language": "cpp",
          "code": "class Solution {\npublic:\n    int monotoneIncreasingDigits(int N) {\n        string strNum = to_string(N);\n        int flag = strNum.size();\n        for (int i = strNum.size() - 1; i > 0; i--) {\n            if (strNum[i - 1] > strNum[i]) {\n                flag = i;\n                strNum[i - 1]--;\n            }\n        }\n        for (int i = flag; i < strNum.size(); i++) {\n            strNum[i] = '9';\n        }\n        return stoi(strNum);\n    }\n};",
          "description": "贪心算法"
        },
        {
          "language": "java",
          "code": "class Solution {\n    public int monotoneIncreasingDigits(int N) {\n        String[] strings = (N + \"\").split(\"\");\n        int start = strings.length;\n        for (int i = strings.length - 1; i > 0; i--) {\n            if (Integer.parseInt(strings[i]) < Integer.parseInt(strings[i - 1])) {\n                strings[i - 1] = (Integer.parseInt(strings[i - 1]) - 1) + \"\";\n                start = i;\n            }\n        }\n        for (int i = start; i < strings.length; i++) {\n            strings[i] = \"9\";\n        }\n        return Integer.parseInt(String.join(\"\",strings));\n    }\n}",
          "description": "Java版本1"
        },
        {
          "language": "java",
          "code": "class Solution {\n    public int monotoneIncreasingDigits(int n) {\n        String s = String.valueOf(n);\n        char[] chars = s.toCharArray();\n        int start = s.length();\n        for (int i = s.length() - 2; i >= 0; i--) {\n            if (chars[i] > chars[i + 1]) {\n                chars[i]--;\n                start = i+1;\n            }\n        }\n        for (int i = start; i < s.length(); i++) {\n            chars[i] = '9';\n        }\n        return Integer.parseInt(String.valueOf(chars));\n    }\n}",
          "description": "Java版本2"
        },
        {
          "language": "python",
          "code": "class Solution:\n    def checkNum(self, num):\n        max_digit = 10\n        while num:\n            digit = num % 10\n            if max_digit >= digit:\n                max_digit = digit\n            else:\n                return False\n            num //= 10\n        return True\n\n    def monotoneIncreasingDigits(self, N):\n        for i in range(N, 0, -1):\n            if self.checkNum(i):\n                return i\n        return 0",
          "description": "Python暴力解法"
        },
        {
          "language": "python",
          "code": "class Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n        strNum = str(n)\n        flag = len(strNum)\n        for i in range(len(strNum) - 1, 0, -1):\n            if strNum[i - 1] > strNum[i]:\n                flag = i\n                strNum = strNum[:i - 1] + str(int(strNum[i - 1]) - 1) + strNum[i:]\n        for i in range(flag, len(strNum)):\n            strNum = strNum[:i] + '9' + strNum[i + 1:]\n        return int(strNum)",
          "description": "Python贪心（版本一）"
        },
        {
          "language": "python",
          "code": "class Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n        strNum = list(str(n))\n        for i in range(len(strNum) - 1, 0, -1):\n            if strNum[i - 1] > strNum[i]:\n                strNum[i - 1] = str(int(strNum[i - 1]) - 1)\n                for j in range(i, len(strNum)):\n                    strNum[j] = '9'\n        return int(''.join(strNum))",
          "description": "Python贪心（版本二）"
        },
        {
          "language": "python",
          "code": "class Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n        strNum = list(str(n))\n        for i in range(len(strNum) - 1, 0, -1):\n            if strNum[i - 1] > strNum[i]:\n                strNum[i - 1] = str(int(strNum[i - 1]) - 1)\n                strNum[i:] = '9' * (len(strNum) - i)\n        return int(''.join(strNum))",
          "description": "Python贪心（版本三）"
        },
        {
          "language": "python",
          "code": "class Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n        strNum = str(n)\n        for i in range(len(strNum) - 1, 0, -1):\n            if strNum[i - 1] > strNum[i]:\n                strNum = strNum[:i - 1] + str(int(strNum[i - 1]) - 1) + '9' * (len(strNum) - i)\n        return int(strNum)",
          "description": "Python贪心（版本四）精简"
        }
      ],
      "subsections": []
    },
    {
      "name": "Java",
      "text": "版本1",
      "resources": [],
      "code_snippets": [
        {
          "language": "cpp",
          "code": "class Solution {\nprivate:\n    bool checkNum(int num) {\n        int max = 10;\n        while (num) {\n            int t = num % 10;\n            if (max >= t) max = t;\n            else return false;\n            num = num / 10;\n        }\n        return true;\n    }\npublic:\n    int monotoneIncreasingDigits(int N) {\n        for (int i = N; i > 0; i--) {\n            if (checkNum(i)) return i;\n        }\n        return 0;\n    }\n};",
          "description": "暴力解法"
        },
        {
          "language": "cpp",
          "code": "class Solution {\npublic:\n    int monotoneIncreasingDigits(int N) {\n        string strNum = to_string(N);\n        int flag = strNum.size();\n        for (int i = strNum.size() - 1; i > 0; i--) {\n            if (strNum[i - 1] > strNum[i]) {\n                flag = i;\n                strNum[i - 1]--;\n            }\n        }\n        for (int i = flag; i < strNum.size(); i++) {\n            strNum[i] = '9';\n        }\n        return stoi(strNum);\n    }\n};",
          "description": "贪心算法"
        },
        {
          "language": "java",
          "code": "class Solution {\n    public int monotoneIncreasingDigits(int N) {\n        String[] strings = (N + \"\").split(\"\");\n        int start = strings.length;\n        for (int i = strings.length - 1; i > 0; i--) {\n            if (Integer.parseInt(strings[i]) < Integer.parseInt(strings[i - 1])) {\n                strings[i - 1] = (Integer.parseInt(strings[i - 1]) - 1) + \"\";\n                start = i;\n            }\n        }\n        for (int i = start; i < strings.length; i++) {\n            strings[i] = \"9\";\n        }\n        return Integer.parseInt(String.join(\"\",strings));\n    }\n}",
          "description": "Java版本1"
        },
        {
          "language": "java",
          "code": "class Solution {\n    public int monotoneIncreasingDigits(int n) {\n        String s = String.valueOf(n);\n        char[] chars = s.toCharArray();\n        int start = s.length();\n        for (int i = s.length() - 2; i >= 0; i--) {\n            if (chars[i] > chars[i + 1]) {\n                chars[i]--;\n                start = i+1;\n            }\n        }\n        for (int i = start; i < s.length(); i++) {\n            chars[i] = '9';\n        }\n        return Integer.parseInt(String.valueOf(chars));\n    }\n}",
          "description": "Java版本2"
        },
        {
          "language": "python",
          "code": "class Solution:\n    def checkNum(self, num):\n        max_digit = 10\n        while num:\n            digit = num % 10\n            if max_digit >= digit:\n                max_digit = digit\n            else:\n                return False\n            num //= 10\n        return True\n\n    def monotoneIncreasingDigits(self, N):\n        for i in range(N, 0, -1):\n            if self.checkNum(i):\n                return i\n        return 0",
          "description": "Python暴力解法"
        },
        {
          "language": "python",
          "code": "class Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n        strNum = str(n)\n        flag = len(strNum)\n        for i in range(len(strNum) - 1, 0, -1):\n            if strNum[i - 1] > strNum[i]:\n                flag = i\n                strNum = strNum[:i - 1] + str(int(strNum[i - 1]) - 1) + strNum[i:]\n        for i in range(flag, len(strNum)):\n            strNum = strNum[:i] + '9' + strNum[i + 1:]\n        return int(strNum)",
          "description": "Python贪心（版本一）"
        },
        {
          "language": "python",
          "code": "class Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n        strNum = list(str(n))\n        for i in range(len(strNum) - 1, 0, -1):\n            if strNum[i - 1] > strNum[i]:\n                strNum[i - 1] = str(int(strNum[i - 1]) - 1)\n                for j in range(i, len(strNum)):\n                    strNum[j] = '9'\n        return int(''.join(strNum))",
          "description": "Python贪心（版本二）"
        },
        {
          "language": "python",
          "code": "class Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n        strNum = list(str(n))\n        for i in range(len(strNum) - 1, 0, -1):\n            if strNum[i - 1] > strNum[i]:\n                strNum[i - 1] = str(int(strNum[i - 1]) - 1)\n                strNum[i:] = '9' * (len(strNum) - i)\n        return int(''.join(strNum))",
          "description": "Python贪心（版本三）"
        },
        {
          "language": "python",
          "code": "class Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n        strNum = str(n)\n        for i in range(len(strNum) - 1, 0, -1):\n            if strNum[i - 1] > strNum[i]:\n                strNum = strNum[:i - 1] + str(int(strNum[i - 1]) - 1) + '9' * (len(strNum) - i)\n        return int(strNum)",
          "description": "Python贪心（版本四）精简"
        }
      ],
      "subsections": []
    },
    {
      "name": "Python",
      "text": "暴力",
      "resources": [],
      "code_snippets": [
        {
          "language": "cpp",
          "code": "class Solution {private: bool checkNum(int num) { int max = 10; while (num) { int t = num % 10; if (max >= t) max = t; else return false; num = num / 10; } return true; }public: int monotoneIncreasingDigits(int N) { for (int i = N; i > 0; i--) { if (checkNum(i)) return i; } return 0; }};",
          "description": "C++暴力解法"
        },
        {
          "language": "cpp",
          "code": "class Solution {public: int monotoneIncreasingDigits(int N) { string strNum = to_string(N); int flag = strNum.size(); for (int i = strNum.size() - 1; i > 0; i--) { if (strNum[i - 1] > strNum[i] ) { flag = i; strNum[i - 1]--; } } for (int i = flag; i < strNum.size(); i++) { strNum[i] = '9'; } return stoi(strNum); }};",
          "description": "C++贪心算法"
        },
        {
          "language": "java",
          "code": "class Solution { public int monotoneIncreasingDigits(int N) { String[] strings = (N + \"\").split(\"\"); int start = strings.length; for (int i = strings.length - 1; i > 0; i--) { if (Integer.parseInt(strings[i]) < Integer.parseInt(strings[i - 1])) { strings[i - 1] = (Integer.parseInt(strings[i - 1]) - 1) + \"\"; start = i; } } for (int i = start; i < strings.length; i++) { strings[i] = \"9\"; } return Integer.parseInt(String.join(\"\",strings)); }}",
          "description": "Java版本1"
        },
        {
          "language": "java",
          "code": "class Solution { public int monotoneIncreasingDigits(int n) { String s = String.valueOf(n); char[] chars = s.toCharArray(); int start = s.length(); for (int i = s.length() - 2; i >= 0; i--) { if (chars[i] > chars[i + 1]) { chars[i]--; start = i+1; } } for (int i = start; i < s.length(); i++) { chars[i] = '9'; } return Integer.parseInt(String.valueOf(chars)); }}",
          "description": "Java版本2"
        },
        {
          "language": "python",
          "code": "class Solution: def checkNum(self, num): max_digit = 10 while num: digit = num % 10 if max_digit >= digit: max_digit = digit else: return False num //= 10 return True def monotoneIncreasingDigits(self, N): for i in range(N, 0, -1): if self.checkNum(i): return i return 0",
          "description": "Python暴力解法"
        },
        {
          "language": "python",
          "code": "class Solution: def monotoneIncreasingDigits(self, n: int) -> int: strNum = str(n) flag = len(strNum) for i in range(len(strNum) - 1, 0, -1): if strNum[i - 1] > strNum[i]: flag = i strNum = strNum[:i - 1] + str(int(strNum[i - 1]) - 1) + strNum[i:] for i in range(flag, len(strNum)): strNum = strNum[:i] + '9' + strNum[i + 1:] return int(strNum)",
          "description": "Python贪心（版本一）"
        },
        {
          "language": "python",
          "code": "class Solution: def monotoneIncreasingDigits(self, n: int) -> int: strNum = list(str(n)) for i in range(len(strNum) - 1, 0, -1): if strNum[i - 1] > strNum[i]: strNum[i - 1] = str(int(strNum[i - 1]) - 1) for j in range(i, len(strNum)): strNum[j] = '9' return int(''.join(strNum))",
          "description": "Python贪心（版本二）"
        },
        {
          "language": "python",
          "code": "class Solution: def monotoneIncreasingDigits(self, n: int) -> int: strNum = list(str(n)) for i in range(len(strNum) - 1, 0, -1): if strNum[i - 1] > strNum[i]: strNum[i - 1] = str(int(strNum[i - 1]) - 1) strNum[i:] = '9' * (len(strNum) - i) return int(''.join(strNum))",
          "description": "Python贪心（版本三）"
        },
        {
          "language": "python",
          "code": "class Solution: def monotoneIncreasingDigits(self, n: int) -> int: strNum = str(n) for i in range(len(strNum) - 1, 0, -1): if strNum[i - 1] > strNum[i]: strNum = strNum[:i - 1] + str(int(strNum[i - 1]) - 1) + '9' * (len(strNum) - i) return int(strNum)",
          "description": "Python贪心（版本四）精简"
        }
      ],
      "subsections": []
    }
  ],
  "complexity_analysis": {
    "time_complexity": "O(n × m)",
    "space_complexity": "O(1)",
    "explanation": null
  },
  "code_solutions": [
    {
      "language": "cpp",
      "code": "class Solution {private: bool checkNum(int num) { int max = 10; while (num) { int t = num % 10; if (max >= t) max = t; else return false; num = num / 10; } return true; }public: int monotoneIncreasingDigits(int N) { for (int i = N; i > 0; i--) { if (checkNum(i)) return i; } return 0; }};",
      "description": "暴力解法，从N开始递减检查每个数是否满足条件"
    },
    {
      "language": "cpp",
      "code": "class Solution {public: int monotoneIncreasingDigits(int N) { string strNum = to_string(N); int flag = strNum.size(); for (int i = strNum.size() - 1; i > 0; i--) { if (strNum[i - 1] > strNum[i]) { flag = i; strNum[i - 1]--; } } for (int i = flag; i < strNum.size(); i++) { strNum[i] = '9'; } return stoi(strNum); }};",
      "description": "贪心算法，通过从后向前遍历数字字符串来构造最大的单调递增整数"
    },
    {
      "language": "java",
      "code": "class Solution { public int monotoneIncreasingDigits(int N) { String[] strings = (N + \"\").split(\"\"); int start = strings.length; for (int i = strings.length - 1; i > 0; i--) { if (Integer.parseInt(strings[i]) < Integer.parseInt(strings[i - 1])) { strings[i - 1] = (Integer.parseInt(strings[i - 1]) - 1) + \"\"; start = i; } } for (int i = start; i < strings.length; i++) { strings[i] = \"9\"; } return Integer.parseInt(String.join(\"\",strings)); }}",
      "description": "Java版本，使用String数组处理，将非单调递增位置的前一位减一，并将该位及之后的所有位设为9"
    },
    {
      "language": "java",
      "code": "class Solution { public int monotoneIncreasingDigits(int n) { String s = String.valueOf(n); char[] chars = s.toCharArray(); int start = s.length(); for (int i = s.length() - 2; i >= 0; i--) { if (chars[i] > chars[i + 1]) { chars[i]--; start = i+1; } } for (int i = start; i < s.length(); i++) { chars[i] = '9'; } return Integer.parseInt(String.valueOf(chars)); }}",
      "description": "优化后的Java版本，直接在char数组上操作以减少时间和空间消耗"
    },
    {
      "language": "python",
      "code": "class Solution: def checkNum(self, num): max_digit = 10 while num: digit = num % 10 if max_digit >= digit: max_digit = digit else: return False num //= 10 return True def monotoneIncreasingDigits(self, N): for i in range(N, 0, -1): if self.checkNum(i): return i return 0",
      "description": "Python暴力解法，从N开始递减检查每个数是否满足条件"
    },
    {
      "language": "python",
      "code": "class Solution: def monotoneIncreasingDigits(self, n: int) -> int: strNum = str(n) flag = len(strNum) for i in range(len(strNum) - 1, 0, -1): if strNum[i - 1] > strNum[i]: flag = i strNum = strNum[:i - 1] + str(int(strNum[i - 1]) - 1) + strNum[i:] for i in range(flag, len(strNum)): strNum = strNum[:i] + '9' + strNum[i + 1:] return int(strNum)",
      "description": "Python贪心算法版本一，通过修改字符串中的字符来构造最大的单调递增整数"
    },
    {
      "language": "python",
      "code": "class Solution: def monotoneIncreasingDigits(self, n: int) -> int: strNum = list(str(n)) for i in range(len(strNum) - 1, 0, -1): if strNum[i - 1] > strNum[i]: strNum[i - 1] = str(int(strNum[i - 1]) - 1) for j in range(i, len(strNum)): strNum[j] = '9' return int(''.join(strNum))",
      "description": "Python贪心算法版本二，同样采用列表形式处理字符串以提高效率"
    },
    {
      "language": "python",
      "code": "class Solution: def monotoneIncreasingDigits(self, n: int) -> int: strNum = list(str(n)) for i in range(len(strNum) - 1, 0, -1): if strNum[i - 1] > strNum[i]: strNum[i - 1] = str(int(strNum[i - 1]) - 1) strNum[i:] = '9' * (len(strNum) - i) return int(''.join(strNum))",
      "description": "Python贪心算法版本三，进一步简化了对于后续字符全部设置为9的操作"
    },
    {
      "language": "python",
      "code": "class Solution: def monotoneIncreasingDigits(self, n: int) -> int: strNum = str(n) for i in range(len(strNum) - 1, 0, -1): if strNum[i - 1] > strNum[i]: strNum = strNum[:i - 1] + str(int(strNum[i - 1]) - 1) + '9' * (len(strNum) - i) return int(strNum)",
      "description": "Python贪心算法版本四，精简版，直接在原始字符串上进行必要的修改"
    }
  ],
  "common_mistakes": [
    "直接从左到右尝试修复非递增情况可能导致重复工作或错误结果。",
    "忽略对最左边数字进行特殊处理，比如它可能需要借位的情况。",
    "没有考虑如何高效地实现最终结果转换回整数格式的方法。"
  ],
  "similar_problems": [],
  "follow_up_questions": [],
  "all_resources": [],
  "source_file": "F:\\My_project\\programmercarl_articles\\problems\\贪心算法\\单调递增的数字.txt",
  "extracted_at": "2025-07-22T15:43:34.565346",
  "raw_content": "单调递增的数字\n力扣题目链接(https://leetcode.cn/problems/monotone-increasing-digits/)\n\n给定一个非负整数 N，找出小于或等于 N 的最大的整数，同时这个整数需要满足其各个位数上的数字是单调递增。\n\n（当且仅当每个相邻位数上的数字 x 和 y 满足 x <= y 时，我们称这个整数是单调递增的。）\n\n示例 1:\n\n输入: N = 10\n输出: 9\n示例 2:\n\n输入: N = 1234\n输出: 1234\n示例 3:\n\n输入: N = 332\n输出: 299\n说明: N 是在 [0, 10^9] 范围内的一个整数。\n\n\n#思路\n#暴力解法\n题意很简单，那么首先想的就是暴力解法了，来我替大家暴力一波，结果自然是超时！\n\n代码如下：\n\nclass Solution {\nprivate:\n    // 判断一个数字的各位上是否是递增\n    bool checkNum(int num) {\n        int max = 10;\n        while (num) {\n            int t = num % 10;\n            if (max >= t) max = t;\n            else return false;\n            num = num / 10;\n        }\n        return true;\n    }\npublic:\n    int monotoneIncreasingDigits(int N) {\n        for (int i = N; i > 0; i--) { // 从大到小遍历\n            if (checkNum(i)) return i;\n        }\n        return 0;\n    }\n};\n时间复杂度：O(n × m) m为n的数字长度\n空间复杂度：O(1)\n#贪心算法\n题目要求小于等于N的最大单调递增的整数，那么拿一个两位的数字来举例。\n\n例如：98，一旦出现strNum[i - 1] > strNum[i]的情况（非单调递增），首先想让strNum[i - 1]--，然后strNum[i]给为9，这样这个整数就是89，即小于98的最大的单调递增整数。\n\n这一点如果想清楚了，这道题就好办了。\n\n此时是从前向后遍历还是从后向前遍历呢？\n\n从前向后遍历的话，遇到strNum[i - 1] > strNum[i]的情况，让strNum[i - 1]减一，但此时如果strNum[i - 1]减一了，可能又小于strNum[i - 2]。\n\n这么说有点抽象，举个例子，数字：332，从前向后遍历的话，那么就把变成了329，此时2又小于了第一位的3了，真正的结果应该是299。\n\n那么从后向前遍历，就可以重复利用上次比较得出的结果了，从后向前遍历332的数值变化为：332 -> 329 -> 299\n\n确定了遍历顺序之后，那么此时局部最优就可以推出全局，找不出反例，试试贪心。\n\nC++代码如下：\n\nclass Solution {\npublic:\n    int monotoneIncreasingDigits(int N) {\n        string strNum = to_string(N);\n        // flag用来标记赋值9从哪里开始\n        // 设置为这个默认值，为了防止第二个for循环在flag没有被赋值的情况下执行\n        int flag = strNum.size();\n        for (int i = strNum.size() - 1; i > 0; i--) {\n            if (strNum[i - 1] > strNum[i] ) {\n                flag = i;\n                strNum[i - 1]--;\n            }\n        }\n        for (int i = flag; i < strNum.size(); i++) {\n            strNum[i] = '9';\n        }\n        return stoi(strNum);\n    }\n};\n\n时间复杂度：O(n)，n 为数字长度\n空间复杂度：O(n)，需要一个字符串，转化为字符串操作更方便\n#总结\n本题只要想清楚个例，例如98，一旦出现strNum[i - 1] > strNum[i]的情况（非单调递增），首先想让strNum[i - 1]减一，strNum[i]赋值9，这样这个整数就是89。就可以很自然想到对应的贪心解法了。\n\n想到了贪心，还要考虑遍历顺序，只有从后向前遍历才能重复利用上次比较的结果。\n\n最后代码实现的时候，也需要一些技巧，例如用一个flag来标记从哪里开始赋值9。\n\n#其他语言版本\n#Java\n版本1\nclass Solution {\n    public int monotoneIncreasingDigits(int N) {\n        String[] strings = (N + \"\").split(\"\");\n        int start = strings.length;\n        for (int i = strings.length - 1; i > 0; i--) {\n            if (Integer.parseInt(strings[i]) < Integer.parseInt(strings[i - 1])) {\n                strings[i - 1] = (Integer.parseInt(strings[i - 1]) - 1) + \"\";\n                start = i;\n            }\n        }\n        for (int i = start; i < strings.length; i++) {\n            strings[i] = \"9\";\n        }\n        return Integer.parseInt(String.join(\"\",strings));\n    }\n}\njava版本1中创建了String数组，多次使用Integer.parseInt了方法，这导致不管是耗时还是空间占用都非常高，用时12ms，下面提供一个版本在char数组上原地修改，用时1ms的版本\n\n版本2\nclass Solution {\n    public int monotoneIncreasingDigits(int n) {\n        String s = String.valueOf(n);\n        char[] chars = s.toCharArray();\n        int start = s.length();\n        for (int i = s.length() - 2; i >= 0; i--) {\n            if (chars[i] > chars[i + 1]) {\n                chars[i]--;\n                start = i+1;\n            }\n        }\n        for (int i = start; i < s.length(); i++) {\n            chars[i] = '9';\n        }\n        return Integer.parseInt(String.valueOf(chars));\n    }\n}\n#Python\n暴力\n\nclass Solution:\n    def checkNum(self, num):\n        max_digit = 10\n        while num:\n            digit = num % 10\n            if max_digit >= digit:\n                max_digit = digit\n            else:\n                return False\n            num //= 10\n        return True\n\n    def monotoneIncreasingDigits(self, N):\n        for i in range(N, 0, -1):\n            if self.checkNum(i):\n                return i\n        return 0\n\n贪心（版本一）\n\nclass Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n        # 将整数转换为字符串\n        strNum = str(n)\n        # flag用来标记赋值9从哪里开始\n        # 设置为字符串长度，为了防止第二个for循环在flag没有被赋值的情况下执行\n        flag = len(strNum)\n        \n        # 从右往左遍历字符串\n        for i in range(len(strNum) - 1, 0, -1):\n            # 如果当前字符比前一个字符小，说明需要修改前一个字符\n            if strNum[i - 1] > strNum[i]:\n                flag = i  # 更新flag的值，记录需要修改的位置\n                # 将前一个字符减1，以保证递增性质\n                strNum = strNum[:i - 1] + str(int(strNum[i - 1]) - 1) + strNum[i:]\n        \n        # 将flag位置及之后的字符都修改为9，以保证最大的递增数字\n        for i in range(flag, len(strNum)):\n            strNum = strNum[:i] + '9' + strNum[i + 1:]\n        \n        # 将最终的字符串转换回整数并返回\n        return int(strNum)\n\n贪心（版本二）\n\nclass Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n        # 将整数转换为字符串\n        strNum = list(str(n))\n\n        # 从右往左遍历字符串\n        for i in range(len(strNum) - 1, 0, -1):\n            # 如果当前字符比前一个字符小，说明需要修改前一个字符\n            if strNum[i - 1] > strNum[i]:\n                strNum[i - 1] = str(int(strNum[i - 1]) - 1)  # 将前一个字符减1\n                # 将修改位置后面的字符都设置为9，因为修改前一个字符可能破坏了递增性质\n                for j in range(i, len(strNum)):\n                    strNum[j] = '9'\n\n        # 将列表转换为字符串，并将字符串转换为整数并返回\n        return int(''.join(strNum))\n\n\n贪心（版本三）\n\nclass Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n        # 将整数转换为字符串\n        strNum = list(str(n))\n\n        # 从右往左遍历字符串\n        for i in range(len(strNum) - 1, 0, -1):\n            # 如果当前字符比前一个字符小，说明需要修改前一个字符\n            if strNum[i - 1] > strNum[i]:\n                strNum[i - 1] = str(int(strNum[i - 1]) - 1)  # 将前一个字符减1\n                # 将修改位置后面的字符都设置为9，因为修改前一个字符可能破坏了递增性质\n                strNum[i:] = '9' * (len(strNum) - i)\n\n        # 将列表转换为字符串，并将字符串转换为整数并返回\n        return int(''.join(strNum))\n\n贪心（版本四）精简\n\nclass Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n        strNum = str(n)        \n        for i in range(len(strNum) - 1, 0, -1):\n            # 如果当前字符比前一个字符小，说明需要修改前一个字符\n            if strNum[i - 1] > strNum[i]:\n                # 将前一个字符减1，以保证递增性质\n                # 使用字符串切片操作将修改后的前面部分与后面部分进行拼接\n                strNum = strNum[:i - 1] + str(int(strNum[i - 1]) - 1) + '9' * (len(strNum) - i)       \n        return int(strNum)"
}