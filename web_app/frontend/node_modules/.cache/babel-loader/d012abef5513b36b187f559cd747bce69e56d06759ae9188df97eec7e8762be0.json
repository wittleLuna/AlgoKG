{"ast":null,"code":"\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { PickerPanel as RCPickerPanel } from 'rc-picker';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport { devUseWarning } from '../_util/warning';\nimport { useComponentConfig } from '../config-provider/context';\nimport { useLocale } from '../locale';\nimport CalendarHeader from './Header';\nimport enUS from './locale/en_US';\nimport useStyle from './style';\nconst isSameYear = (date1, date2, config) => {\n  const {\n    getYear\n  } = config;\n  return date1 && date2 && getYear(date1) === getYear(date2);\n};\nconst isSameMonth = (date1, date2, config) => {\n  const {\n    getMonth\n  } = config;\n  return isSameYear(date1, date2, config) && getMonth(date1) === getMonth(date2);\n};\nconst isSameDate = (date1, date2, config) => {\n  const {\n    getDate\n  } = config;\n  return isSameMonth(date1, date2, config) && getDate(date1) === getDate(date2);\n};\nconst generateCalendar = generateConfig => {\n  const Calendar = props => {\n    const {\n      prefixCls: customizePrefixCls,\n      className,\n      rootClassName,\n      style,\n      dateFullCellRender,\n      dateCellRender,\n      monthFullCellRender,\n      monthCellRender,\n      cellRender,\n      fullCellRender,\n      headerRender,\n      value,\n      defaultValue,\n      disabledDate,\n      mode,\n      validRange,\n      fullscreen = true,\n      showWeek,\n      onChange,\n      onPanelChange,\n      onSelect\n    } = props;\n    const {\n      getPrefixCls,\n      direction,\n      className: contextClassName,\n      style: contextStyle\n    } = useComponentConfig('calendar');\n    const prefixCls = getPrefixCls('picker', customizePrefixCls);\n    const calendarPrefixCls = `${prefixCls}-calendar`;\n    const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls, calendarPrefixCls);\n    const today = generateConfig.getNow();\n    // ====================== Warning =======================\n    if (process.env.NODE_ENV !== 'production') {\n      const warning = devUseWarning('Calendar');\n      [['dateFullCellRender', 'fullCellRender'], ['dateCellRender', 'cellRender'], ['monthFullCellRender', 'fullCellRender'], ['monthCellRender', 'cellRender']].forEach(_ref => {\n        let [deprecatedName, newName] = _ref;\n        warning.deprecated(!(deprecatedName in props), deprecatedName, newName);\n      });\n    }\n    // ====================== State =======================\n    // Value\n    const [mergedValue, setMergedValue] = useMergedState(() => value || generateConfig.getNow(), {\n      defaultValue,\n      value\n    });\n    // Mode\n    const [mergedMode, setMergedMode] = useMergedState('month', {\n      value: mode\n    });\n    const panelMode = React.useMemo(() => mergedMode === 'year' ? 'month' : 'date', [mergedMode]);\n    // Disabled Date\n    const mergedDisabledDate = React.useCallback(date => {\n      const notInRange = validRange ? generateConfig.isAfter(validRange[0], date) || generateConfig.isAfter(date, validRange[1]) : false;\n      return notInRange || !!(disabledDate === null || disabledDate === void 0 ? void 0 : disabledDate(date));\n    }, [disabledDate, validRange]);\n    // ====================== Events ======================\n    const triggerPanelChange = (date, newMode) => {\n      onPanelChange === null || onPanelChange === void 0 ? void 0 : onPanelChange(date, newMode);\n    };\n    const triggerChange = date => {\n      setMergedValue(date);\n      if (!isSameDate(date, mergedValue, generateConfig)) {\n        // Trigger when month panel switch month\n        if (panelMode === 'date' && !isSameMonth(date, mergedValue, generateConfig) || panelMode === 'month' && !isSameYear(date, mergedValue, generateConfig)) {\n          triggerPanelChange(date, mergedMode);\n        }\n        onChange === null || onChange === void 0 ? void 0 : onChange(date);\n      }\n    };\n    const triggerModeChange = newMode => {\n      setMergedMode(newMode);\n      triggerPanelChange(mergedValue, newMode);\n    };\n    const onInternalSelect = (date, source) => {\n      triggerChange(date);\n      onSelect === null || onSelect === void 0 ? void 0 : onSelect(date, {\n        source\n      });\n    };\n    // ====================== Render ======================\n    const dateRender = React.useCallback((date, info) => {\n      if (fullCellRender) {\n        return fullCellRender(date, info);\n      }\n      if (dateFullCellRender) {\n        return dateFullCellRender(date);\n      }\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames(`${prefixCls}-cell-inner`, `${calendarPrefixCls}-date`, {\n          [`${calendarPrefixCls}-date-today`]: isSameDate(today, date, generateConfig)\n        })\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: `${calendarPrefixCls}-date-value`\n      }, String(generateConfig.getDate(date)).padStart(2, '0')), /*#__PURE__*/React.createElement(\"div\", {\n        className: `${calendarPrefixCls}-date-content`\n      }, cellRender ? cellRender(date, info) : dateCellRender === null || dateCellRender === void 0 ? void 0 : dateCellRender(date)));\n    }, [dateFullCellRender, dateCellRender, cellRender, fullCellRender]);\n    const monthRender = React.useCallback((date, info) => {\n      if (fullCellRender) {\n        return fullCellRender(date, info);\n      }\n      if (monthFullCellRender) {\n        return monthFullCellRender(date);\n      }\n      const months = info.locale.shortMonths || generateConfig.locale.getShortMonths(info.locale.locale);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames(`${prefixCls}-cell-inner`, `${calendarPrefixCls}-date`, {\n          [`${calendarPrefixCls}-date-today`]: isSameMonth(today, date, generateConfig)\n        })\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: `${calendarPrefixCls}-date-value`\n      }, months[generateConfig.getMonth(date)]), /*#__PURE__*/React.createElement(\"div\", {\n        className: `${calendarPrefixCls}-date-content`\n      }, cellRender ? cellRender(date, info) : monthCellRender === null || monthCellRender === void 0 ? void 0 : monthCellRender(date)));\n    }, [monthFullCellRender, monthCellRender, cellRender, fullCellRender]);\n    const [contextLocale] = useLocale('Calendar', enUS);\n    const locale = Object.assign(Object.assign({}, contextLocale), props.locale);\n    const mergedCellRender = (current, info) => {\n      if (info.type === 'date') {\n        return dateRender(current, info);\n      }\n      if (info.type === 'month') {\n        return monthRender(current, Object.assign(Object.assign({}, info), {\n          locale: locale === null || locale === void 0 ? void 0 : locale.lang\n        }));\n      }\n    };\n    return wrapCSSVar(/*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(calendarPrefixCls, {\n        [`${calendarPrefixCls}-full`]: fullscreen,\n        [`${calendarPrefixCls}-mini`]: !fullscreen,\n        [`${calendarPrefixCls}-rtl`]: direction === 'rtl'\n      }, contextClassName, className, rootClassName, hashId, cssVarCls),\n      style: Object.assign(Object.assign({}, contextStyle), style)\n    }, headerRender ? headerRender({\n      value: mergedValue,\n      type: mergedMode,\n      onChange: nextDate => {\n        onInternalSelect(nextDate, 'customize');\n      },\n      onTypeChange: triggerModeChange\n    }) : (/*#__PURE__*/React.createElement(CalendarHeader, {\n      prefixCls: calendarPrefixCls,\n      value: mergedValue,\n      generateConfig: generateConfig,\n      mode: mergedMode,\n      fullscreen: fullscreen,\n      locale: locale === null || locale === void 0 ? void 0 : locale.lang,\n      validRange: validRange,\n      onChange: onInternalSelect,\n      onModeChange: triggerModeChange\n    })), /*#__PURE__*/React.createElement(RCPickerPanel, {\n      value: mergedValue,\n      prefixCls: prefixCls,\n      locale: locale === null || locale === void 0 ? void 0 : locale.lang,\n      generateConfig: generateConfig,\n      cellRender: mergedCellRender,\n      onSelect: nextDate => {\n        onInternalSelect(nextDate, panelMode);\n      },\n      mode: panelMode,\n      picker: panelMode,\n      disabledDate: mergedDisabledDate,\n      hideHeader: true,\n      showWeek: showWeek\n    })));\n  };\n  if (process.env.NODE_ENV !== 'production') {\n    Calendar.displayName = 'Calendar';\n  }\n  return Calendar;\n};\nexport default generateCalendar;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}