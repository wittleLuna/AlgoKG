{
  "id": "AP_0b11ebbd",
  "title": "反转字符串",
  "alternative_titles": [],
  "platform": "leetcode",
  "url": "https://leetcode.cn/problems/reverse-string/",
  "description": "编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。\n\n不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。\n\n你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。",
  "examples": [],
  "constraints": [],
  "algorithm_tags": [
    "双指针"
  ],
  "data_structure_tags": [
    "数组",
    "字符串"
  ],
  "technique_tags": [
    "原地算法",
    "位操作"
  ],
  "difficulty": null,
  "solution_approach": "通过双指针方法原地反转字符串。定义两个指针分别从字符串的开始和结束位置向中间移动，并交换它们指向的字符，直到两指针相遇。",
  "key_insights": [
    {
      "content": "由于字符串本质上是字符数组，因此可以利用数组中元素连续分布的特点来直接交换两端的值，而不需要额外的空间。"
    },
    {
      "content": "采用双指针（一头一尾）的方式遍历字符串，不仅能够高效完成任务，而且保证了O(1)的空间复杂度要求。"
    }
  ],
  "step_by_step_explanation": [
    {
      "name": "思路",
      "text": "先说一说题外话：",
      "resources": [],
      "code_snippets": [
        {
          "language": "cpp",
          "code": "void reverseString(vector<char>& s) { for (int i = 0, j = s.size() - 1; i < s.size()/2; i++, j--) { swap(s[i],s[j]); } }",
          "description": null
        },
        {
          "language": "java",
          "code": "public void reverseString(char[] s) { int l = 0; int r = s.length - 1; while (l < r) { s[l] ^= s[r]; s[r] ^= s[l]; s[l] ^= s[r]; l++; r--; } }",
          "description": null
        },
        {
          "language": "java",
          "code": "public void reverseString(char[] s) { int l = 0; int r = s.length - 1; while(l < r){ char temp = s[l]; s[l] = s[r]; s[r] = temp; l++; r--; } }",
          "description": null
        },
        {
          "language": "python",
          "code": "def reverseString(self, s: List[str]) -> None: left, right = 0, len(s) - 1 while left < right: s[left], s[right] = s[right], s[left] left += 1 right -= 1",
          "description": null
        },
        {
          "language": "python",
          "code": "def reverseString(self, s: List[str]) -> None: stack = [] for char in s: stack.append(char) for i in range(len(s)): s[i] = stack.pop()",
          "description": null
        },
        {
          "language": "python",
          "code": "def reverseString(self, s: List[str]) -> None: n = len(s) for i in range(n // 2): s[i], s[n - i - 1] = s[n - i - 1], s[i]",
          "description": null
        },
        {
          "language": "python",
          "code": "def reverseString(self, s: List[str]) -> None: s[:] = reversed(s)",
          "description": null
        },
        {
          "language": "python",
          "code": "def reverseString(self, s: List[str]) -> None: s[:] = s[::-1]",
          "description": null
        },
        {
          "language": "python",
          "code": "def reverseString(self, s: List[str]) -> None: s[:] = [s[i] for i in range(len(s) - 1, -1, -1)]",
          "description": null
        },
        {
          "language": "python",
          "code": "def reverseString(self, s: List[str]) -> None: s.reverse()",
          "description": null
        }
      ],
      "subsections": []
    },
    {
      "name": "其他语言版本",
      "text": "#Java：",
      "resources": [],
      "code_snippets": [
        {
          "language": "C++",
          "code": "void reverseString(vector<char>& s) { for (int i = 0, j = s.size() - 1; i < s.size()/2; i++, j--) { swap(s[i],s[j]); } }",
          "description": "使用双指针和swap函数原地反转字符数组"
        },
        {
          "language": "Java",
          "code": "public void reverseString(char[] s) { int l = 0; int r = s.length - 1; while(l < r){ char temp = s[l]; s[l] = s[r]; s[r] = temp; l++; r--; } }",
          "description": "使用双指针和临时变量temp原地反转字符数组"
        },
        {
          "language": "Python",
          "code": "def reverseString(self, s: List[str]) -> None: left, right = 0, len(s) - 1 while left < right: s[left], s[right] = s[right], s[left] left += 1 right -= 1",
          "description": "使用双指针方法原地反转列表"
        },
        {
          "language": "Python",
          "code": "def reverseString(self, s: List[str]) -> None: stack = [] for char in s: stack.append(char) for i in range(len(s)): s[i] = stack.pop()",
          "description": "使用栈来实现字符串的反转"
        },
        {
          "language": "Python",
          "code": "def reverseString(self, s: List[str]) -> None: n = len(s) for i in range(n // 2): s[i], s[n - i - 1] = s[n - i - 1], s[i]",
          "description": "通过range函数确定循环次数，使用双指针交换元素"
        },
        {
          "language": "Python",
          "code": "def reverseString(self, s: List[str]) -> None: s[:] = reversed(s)",
          "description": "利用reversed函数直接反转列表"
        },
        {
          "language": "Python",
          "code": "def reverseString(self, s: List[str]) -> None: s[:] = s[::-1]",
          "description": "使用切片操作快速反转列表"
        },
        {
          "language": "Python",
          "code": "def reverseString(self, s: List[str]) -> None: s[:] = [s[i] for i in range(len(s) - 1, -1, -1)]",
          "description": "通过列表推导式生成反转后的列表"
        },
        {
          "language": "Python",
          "code": "def reverseString(self, s: List[str]) -> None: s.reverse()",
          "description": "调用列表的reverse方法原地反转"
        }
      ],
      "subsections": []
    },
    {
      "name": "Java：",
      "text": "class Solution {",
      "resources": [],
      "code_snippets": [
        {
          "language": "cpp",
          "code": "class Solution {public: void reverseString(vector<char>& s) {for (int i = 0, j = s.size() - 1; i < s.size()/2; i++, j--) {swap(s[i],s[j]);}}};",
          "description": "使用双指针方法反转字符串，通过swap交换字符"
        },
        {
          "language": "java",
          "code": "class Solution {public void reverseString(char[] s) {int l = 0; int r = s.length - 1; while (l < r) {s[l] ^= s[r]; s[r] ^= s[l]; s[l] ^= s[r]; l++; r--;}}}",
          "description": "使用位运算交换字符来反转字符串"
        },
        {
          "language": "java",
          "code": "class Solution {public void reverseString(char[] s) {int l = 0; int r = s.length - 1; while(l < r){char temp = s[l]; s[l] = s[r]; s[r] = temp; l++; r--;} }}",
          "description": "使用临时变量交换字符来反转字符串"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: left, right = 0, len(s) - 1 while left < right: s[left], s[right] = s[right], s[left] left += 1 right -= 1",
          "description": "使用双指针方法并直接交换元素来反转字符串"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: stack = [] for char in s: stack.append(char) for i in range(len(s)): s[i] = stack.pop()",
          "description": "利用栈结构来反转字符串"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: n = len(s) for i in range(n // 2): s[i], s[n - i - 1] = s[n - i - 1], s[i]",
          "description": "使用range函数配合索引来反转字符串"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: s[:] = reversed(s)",
          "description": "使用reversed函数来反转字符串"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: s[:] = s[::-1]",
          "description": "使用切片操作来反转字符串"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: s[:] = [s[i] for i in range(len(s) - 1, -1, -1)]",
          "description": "通过列表推导式生成新的顺序来反转字符串"
        },
        {
          "language": "python",
          "code": "class Solution: def reverseString(self, s: List[str]) -> None: s.reverse()",
          "description": "使用list的reverse方法就地反转字符串"
        }
      ],
      "subsections": []
    },
    {
      "name": "Python：",
      "text": "（版本一） 双指针",
      "resources": [],
      "code_snippets": [
        {
          "language": "cpp",
          "code": "void reverseString(vector<char>& s) { for (int i = 0, j = s.size() - 1; i < s.size()/2; i++, j--) { swap(s[i],s[j]); } }",
          "description": "使用双指针和swap函数实现字符串反转"
        },
        {
          "language": "java",
          "code": "public void reverseString(char[] s) { int l = 0, r = s.length - 1; while (l < r) { s[l] ^= s[r]; s[r] ^= s[l]; s[l] ^= s[r]; l++; r--; } }",
          "description": "使用位运算交换字符实现字符串反转"
        },
        {
          "language": "java",
          "code": "public void reverseString(char[] s) { int l = 0, r = s.length - 1; while(l < r){ char temp = s[l]; s[l] = s[r]; s[r] = temp; l++; r--; } }",
          "description": "使用临时变量交换字符实现字符串反转"
        },
        {
          "language": "python",
          "code": "def reverseString(self, s: List[str]) -> None: left, right = 0, len(s) - 1 while left < right: s[left], s[right] = s[right], s[left] left += 1 right -= 1",
          "description": "使用双指针实现列表元素交换"
        },
        {
          "language": "python",
          "code": "def reverseString(self, s: List[str]) -> None: stack = [] for char in s: stack.append(char) for i in range(len(s)): s[i] = stack.pop()",
          "description": "使用栈结构实现列表反转"
        },
        {
          "language": "python",
          "code": "def reverseString(self, s: List[str]) -> None: n = len(s) for i in range(n // 2): s[i], s[n - i - 1] = s[n - i - 1], s[i]",
          "description": "使用range函数配合索引实现列表反转"
        },
        {
          "language": "python",
          "code": "def reverseString(self, s: List[str]) -> None: s[:] = reversed(s)",
          "description": "使用reversed函数直接反转列表"
        },
        {
          "language": "python",
          "code": "def reverseString(self, s: List[str]) -> None: s[:] = s[::-1]",
          "description": "使用切片操作反转列表"
        },
        {
          "language": "python",
          "code": "def reverseString(self, s: List[str]) -> None: s[:] = [s[i] for i in range(len(s) - 1, -1, -1)]",
          "description": "使用列表推导式反转列表"
        },
        {
          "language": "python",
          "code": "def reverseString(self, s: List[str]) -> None: s.reverse()",
          "description": "使用列表自带的reverse方法反转列表"
        }
      ],
      "subsections": []
    }
  ],
  "complexity_analysis": {
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "explanation": null
  },
  "code_solutions": [
    {
      "language": "C++",
      "code": "void reverseString(vector<char>& s) { for (int i = 0, j = s.size() - 1; i < s.size()/2; i++, j--) { swap(s[i],s[j]); } }",
      "description": null
    },
    {
      "language": "Java",
      "code": "class Solution { public void reverseString(char[] s) { int l = 0; int r = s.length - 1; while (l < r) { s[l] ^= s[r]; s[r] ^= s[l]; s[l] ^= s[r]; l++; r--; } } }",
      "description": null
    },
    {
      "language": "Java",
      "code": "class Solution { public void reverseString(char[] s) { int l = 0; int r = s.length - 1; while(l < r){ char temp = s[l]; s[l] = s[r]; s[r] = temp; l++; r--; } } }",
      "description": null
    },
    {
      "language": "Python",
      "code": "class Solution: def reverseString(self, s: List[str]) -> None: left, right = 0, len(s) - 1 while left < right: s[left], s[right] = s[right], s[left] left += 1 right -= 1",
      "description": null
    },
    {
      "language": "Python",
      "code": "class Solution: def reverseString(self, s: List[str]) -> None: stack = [] for char in s: stack.append(char) for i in range(len(s)): s[i] = stack.pop()",
      "description": null
    },
    {
      "language": "Python",
      "code": "class Solution: def reverseString(self, s: List[str]) -> None: n = len(s) for i in range(n // 2): s[i], s[n - i - 1] = s[n - i - 1], s[i]",
      "description": null
    },
    {
      "language": "Python",
      "code": "class Solution: def reverseString(self, s: List[str]) -> None: s[:] = reversed(s)",
      "description": null
    },
    {
      "language": "Python",
      "code": "class Solution: def reverseString(self, s: List[str]) -> None: s[:] = s[::-1]",
      "description": null
    },
    {
      "language": "Python",
      "code": "class Solution: def reverseString(self, s: List[str]) -> None: s[:] = [s[i] for i in range(len(s) - 1, -1, -1)]",
      "description": null
    },
    {
      "language": "Python",
      "code": "class Solution: def reverseString(self, s: List[str]) -> None: s.reverse()",
      "description": null
    }
  ],
  "common_mistakes": [
    "使用了需要额外空间的方法如创建新数组或使用内置reverse函数，违反题目要求。",
    "忽略了对边界条件的处理，比如空字符串或者长度为1的字符串情况。"
  ],
  "similar_problems": [],
  "follow_up_questions": [],
  "all_resources": [
    {
      "type": "image",
      "content": "https://file1.kamacoder.com/i/algo/344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.gif",
      "description": "图片链接: https://file1.kamacoder.com/i/algo/344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.gif",
      "context": "该图片展示了以字符串\"hello\"为例，通过两个指针从两端向中间移动并交换元素来实现字符串反转的过程。"
    },
    {
      "type": "gif",
      "content": "https://file1.kamacoder.com/i/algo/344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.gif",
      "description": "GIF展示了通过双指针方法从两端向中心逐个交换字符来反转字符串\"hello\"的过程。",
      "context": "GIF动画展示了通过双指针法逐步交换字符串两端字符以实现整个字符串反转的过程。"
    }
  ],
  "source_file": "F:\\My_project\\programmercarl_articles\\problems\\字符串\\反转字符串.txt",
  "extracted_at": "2025-07-21T18:49:02.919264",
  "raw_content": "反转字符串\n力扣题目链接(https://leetcode.cn/problems/reverse-string/)\n\n编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。\n\n不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。\n\n你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。\n\n示例 1：\n输入：[\"h\",\"e\",\"l\",\"l\",\"o\"]\n输出：[\"o\",\"l\",\"l\",\"e\",\"h\"]\n\n示例 2：\n输入：[\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\n输出：[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n\n\n#思路\n先说一说题外话：\n\n对于这道题目一些同学直接用C++里的一个库函数 reverse，调一下直接完事了， 相信每一门编程语言都有这样的库函数。\n\n如果这么做题的话，这样大家不会清楚反转字符串的实现原理了。\n\n但是也不是说库函数就不能用，是要分场景的。\n\n如果在现场面试中，我们什么时候使用库函数，什么时候不要用库函数呢？\n\n如果题目关键的部分直接用库函数就可以解决，建议不要使用库函数。\n\n毕竟面试官一定不是考察你对库函数的熟悉程度， 如果使用python和java 的同学更需要注意这一点，因为python、java提供的库函数十分丰富。\n\n如果库函数仅仅是 解题过程中的一小部分，并且你已经很清楚这个库函数的内部实现原理的话，可以考虑使用库函数。\n\n建议大家平时在leetcode上练习算法的时候本着这样的原则去练习，这样才有助于我们对算法的理解。\n\n不要沉迷于使用库函数一行代码解决题目之类的技巧，不是说这些技巧不好，而是说这些技巧可以用来娱乐一下。\n\n真正自己写的时候，要保证理解可以实现是相应的功能。\n\n接下来再来讲一下如何解决反转字符串的问题。\n\n大家应该还记得，我们已经讲过了206.反转链表 (opens new window)。\n\n在反转链表中，使用了双指针的方法。\n\n那么反转字符串依然是使用双指针的方法，只不过对于字符串的反转，其实要比链表简单一些。\n\n因为字符串也是一种数组，所以元素在内存中是连续分布，这就决定了反转链表和反转字符串方式上还是有所差异的。\n\n如果对数组和链表原理不清楚的同学，可以看这两篇，关于链表，你该了解这些！ (opens new window)，必须掌握的数组理论知识 (opens new window)。\n\n对于字符串，我们定义两个指针（也可以说是索引下标），一个从字符串前面，一个从字符串后面，两个指针同时向中间移动，并交换元素。\n\n以字符串hello为例，过程如下：\nhttps://file1.kamacoder.com/i/algo/344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.gif\n\n不难写出如下C++代码:\n\nvoid reverseString(vector<char>& s) {\n    for (int i = 0, j = s.size() - 1; i < s.size()/2; i++, j--) {\n        swap(s[i],s[j]);\n    }\n}\n循环里只要做交换s[i] 和s[j]操作就可以了，那么我这里使用了swap 这个库函数。大家可以使用。\n\n因为相信大家都知道交换函数如何实现，而且这个库函数仅仅是解题中的一部分， 所以这里使用库函数也是可以的。\n\nswap可以有两种实现。\n\n一种就是常见的交换数值：\n\nint tmp = s[i];\ns[i] = s[j];\ns[j] = tmp;\n\n一种就是通过位运算：\n\ns[i] ^= s[j];\ns[j] ^= s[i];\ns[i] ^= s[j];\n这道题目还是比较简单的，但是我正好可以通过这道题目说一说在刷题的时候，使用库函数的原则。\n\n如果题目关键的部分直接用库函数就可以解决，建议不要使用库函数。\n\n如果库函数仅仅是 解题过程中的一小部分，并且你已经很清楚这个库函数的内部实现原理的话，可以考虑使用库函数。\n\n本着这样的原则，我没有使用reverse库函数，而使用swap库函数。\n\n在字符串相关的题目中，库函数对大家的诱惑力是非常大的，因为会有各种反转，切割取词之类的操作，这也是为什么字符串的库函数这么丰富的原因。\n\n相信大家本着我所讲述的原则来做字符串相关的题目，在选择库函数的角度上会有所原则，也会有所收获。\n\nC++代码如下：\n\nclass Solution {\npublic:\n    void reverseString(vector<char>& s) {\n        for (int i = 0, j = s.size() - 1; i < s.size()/2; i++, j--) {\n            swap(s[i],s[j]);\n        }\n    }\n};\n时间复杂度: O(n)\n空间复杂度: O(1)\n#其他语言版本\n#Java：\nclass Solution {\n    public void reverseString(char[] s) {\n        int l = 0;\n        int r = s.length - 1;\n        while (l < r) {\n            s[l] ^= s[r];  //构造 a ^ b 的结果，并放在 a 中\n            s[r] ^= s[l];  //将 a ^ b 这一结果再 ^ b ，存入b中，此时 b = a, a = a ^ b\n            s[l] ^= s[r];  //a ^ b 的结果再 ^ a ，存入 a 中，此时 b = a, a = b 完成交换\n            l++;\n            r--;\n        }\n    }\n}\n\n// 第二种方法用temp来交换数值更多人容易理解些\nclass Solution {\n    public void reverseString(char[] s) {\n        int l = 0;\n        int r = s.length - 1;\n        while(l < r){\n            char temp = s[l];\n            s[l] = s[r];\n            s[r] = temp;\n            l++;\n            r--;\n        }\n    }\n}\n\n\n#Python：\n（版本一） 双指针\n\nclass Solution:\n    def reverseString(self, s: List[str]) -> None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n        left, right = 0, len(s) - 1\n        \n        # 该方法已经不需要判断奇偶数，经测试后时间空间复杂度比用 for i in range(len(s)//2)更低\n        # 因为while每次循环需要进行条件判断，而range函数不需要，直接生成数字，因此时间复杂度更低。推荐使用range\n        while left < right:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n       \n（版本二） 使用栈\n\nclass Solution:\n    def reverseString(self, s: List[str]) -> None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n        stack = []\n        for char in s:\n            stack.append(char)\n        for i in range(len(s)):\n            s[i] = stack.pop()\n       \n（版本三） 使用range\n\nclass Solution:\n    def reverseString(self, s: List[str]) -> None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n        n = len(s)\n        for i in range(n // 2):\n            s[i], s[n - i - 1] = s[n - i - 1], s[i]\n       \n（版本四） 使用reversed\n\nclass Solution:\n    def reverseString(self, s: List[str]) -> None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n        s[:] = reversed(s)\n       \n（版本五） 使用切片\n\nclass Solution:\n    def reverseString(self, s: List[str]) -> None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n        s[:] = s[::-1]\n       \n（版本六） 使用列表推导\n\nclass Solution:\n    def reverseString(self, s: List[str]) -> None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n        s[:] = [s[i] for i in range(len(s) - 1, -1, -1)]\n       \n（版本七） 使用reverse()\n\nclass Solution:\n    def reverseString(self, s: List[str]) -> None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n        # 原地反转,无返回值\n        s.reverse()"
}