{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport toArray from \"rc-util/es/Children/toArray\";\nfunction getCollapsible(collapsible) {\n  if (collapsible && typeof collapsible === 'object') {\n    return collapsible;\n  }\n  const mergedCollapsible = !!collapsible;\n  return {\n    start: mergedCollapsible,\n    end: mergedCollapsible\n  };\n}\n/**\n * Convert `children` into `items`.\n */\nfunction useItems(children) {\n  const items = React.useMemo(() => toArray(children).filter(item => /*#__PURE__*/React.isValidElement(item)).map(node => {\n    const {\n      props\n    } = node;\n    const {\n        collapsible\n      } = props,\n      restProps = __rest(props, [\"collapsible\"]);\n    return Object.assign(Object.assign({}, restProps), {\n      collapsible: getCollapsible(collapsible)\n    });\n  }), [children]);\n  return items;\n}\nexport default useItems;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}