{
  "id": "AP804",
  "name": "贪心算法",
  "alias": [
    "greedy algorithm",
    "贪婪算法"
  ],
  "type": "algorithm_paradigm",
  "description": "贪心算法是一种在每一步选择中都采取当前状态下最好或最优的选择，从而希望导致结果是全局最好或最优的算法。它用计算机来模拟一个「贪心」的人做出决策的过程。这个人每一步行动总是按某种指标选取最优的操作，但不考虑以后可能造成的影响。",
  "key_concepts": [
    "局部最优",
    "全局最优",
    "最优子结构",
    "反证法",
    "归纳法"
  ],
  "applications": [
    "优化问题",
    "资源分配",
    "有最优子结构的问题",
    "提高组难度以下的题目"
  ],
  "created_at": "2025-07-19T13:04:41Z",
  "updated_at": "2025-07-19T13:05:17Z",
  "source_files": [
    "贪心算法_kama.txt",
    "贪心算法_wiki.txt"
  ],
  "spacy_entities": {
    "ALGORITHM_PARADIGM": [
      "回溯算法",
      "动态规划",
      "贪心算法",
      "贪心策略",
      "贪心",
      "贪婪",
      "greedy"
    ],
    "DATA_STRUCTURE": [
      "堆",
      "树",
      "链表",
      "二叉树",
      "队列",
      "数组",
      "优先队列"
    ],
    "CORE_CONCEPT": [
      "回溯算法",
      "动态规划",
      "全局最优",
      "贪心策略",
      "局部最优",
      "时间复杂度",
      "状态转移",
      "最优子结构",
      "回溯"
    ],
    "TECHNIQUE": [
      "排序",
      "后悔解法"
    ]
  }
}