{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\n\n/**\n * Sync value with state.\n * This should only used for internal which not affect outside calculation.\n * Since it's not safe for suspense.\n */\nexport default function useSyncState(defaultValue, controlledValue) {\n  var valueRef = React.useRef(defaultValue);\n  var _React$useState = React.useState({}),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    forceUpdate = _React$useState2[1];\n  var getter = function getter(useControlledValueFirst) {\n    return useControlledValueFirst && controlledValue !== undefined ? controlledValue : valueRef.current;\n  };\n  var setter = function setter(nextValue) {\n    valueRef.current = nextValue;\n    forceUpdate({});\n  };\n  return [getter, setter, getter(true)];\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}