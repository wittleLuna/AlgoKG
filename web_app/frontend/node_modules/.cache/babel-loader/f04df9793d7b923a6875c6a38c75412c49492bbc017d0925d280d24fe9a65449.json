{"ast":null,"code":"import axios from'axios';class ApiService{constructor(){this.client=void 0;this.baseURL=void 0;this.baseURL=process.env.REACT_APP_API_URL||'http://127.0.0.1/api';this.client=axios.create({baseURL:this.baseURL,timeout:180000,// 增加到3分钟 (180秒)\nheaders:{'Content-Type':'application/json'}});// 请求拦截器\nthis.client.interceptors.request.use(config=>{var _config$method;console.log(`发送请求: ${(_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase()} ${config.url}`);return config;},error=>{console.error('请求错误:',error);return Promise.reject(error);});// 响应拦截器\nthis.client.interceptors.response.use(response=>{console.log(`收到响应: ${response.status} ${response.config.url}`);return response;},error=>{var _error$message,_error$response,_error$response2,_error$response3,_error$response4;console.error('响应错误:',error);// 检查是否是用户主动取消的请求\nif(error.code==='ERR_CANCELED'||(_error$message=error.message)!==null&&_error$message!==void 0&&_error$message.includes('canceled')){// 用户主动取消，不显示错误提示\nthrow error;}if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===500){throw new Error('服务器内部错误，请稍后重试');}else if(((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)===404){throw new Error('请求的资源不存在');}else if(error.code==='ECONNABORTED'){throw new Error('查询处理时间较长，请稍后重试或简化问题');}else if(((_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status)===504){throw new Error('网关超时，服务器处理时间过长');}else if(((_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.status)===502){throw new Error('服务器连接错误，请稍后重试');}throw error;});}/**\r\n   * 发送问答查询 - 针对复杂查询使用更长的超时时间\r\n   */async query(request,signal){try{const response=await this.client.post('/api/v1/qa/query',request,{signal,timeout:180000// 单独为QA查询设置3分钟超时\n});return response.data;}catch(error){console.error('查询失败:',error);// 针对超时错误提供更好的用户提示\nif(error.code==='ECONNABORTED'){throw new Error('查询处理时间较长，这通常发生在复杂的知识图谱查询中。请稍后重试或尝试简化问题。');}throw error;}}/**\r\n   * 流式问答查询 - 增加重试和错误恢复机制\r\n   */async*queryStream(request,signal){let retryCount=0;const maxRetries=2;while(retryCount<=maxRetries){try{var _response$body;// 创建一个带超时的 AbortController\nconst timeoutController=new AbortController();const timeoutId=setTimeout(()=>{timeoutController.abort();},300000);// 5分钟超时\n// 组合用户的signal和超时signal\nconst combinedSignal=signal?this.combineAbortSignals([signal,timeoutController.signal]):timeoutController.signal;const response=await fetch(`${this.baseURL}/api/v1/qa/query/stream`,{method:'POST',headers:{'Content-Type':'application/json','Cache-Control':'no-cache','Accept':'text/event-stream'},body:JSON.stringify(request),signal:combinedSignal,// 禁用缓存\ncache:'no-store'});// 清除超时定时器\nclearTimeout(timeoutId);if(!response.ok){if(response.status===502||response.status===503||response.status===504){// 服务器错误，可以重试\nthrow new Error(`Server error: ${response.status}`);}throw new Error(`HTTP error! status: ${response.status}`);}const reader=(_response$body=response.body)===null||_response$body===void 0?void 0:_response$body.getReader();if(!reader){throw new Error('无法获取响应流');}const decoder=new TextDecoder();let buffer='';let hasReceivedData=false;try{while(true){// 检查是否已被取消\nif(signal!==null&&signal!==void 0&&signal.aborted||timeoutController.signal.aborted){throw new DOMException('请求已取消或超时','AbortError');}let readResult;try{readResult=await reader.read();}catch(readError){console.warn('读取流数据时出错:',readError);if(hasReceivedData){// 如果已经接收到数据，则正常结束\nbreak;}throw readError;}const{done,value}=readResult;if(done){console.log('流式响应正常结束');break;}hasReceivedData=true;buffer+=decoder.decode(value,{stream:true});const lines=buffer.split('\\n');buffer=lines.pop()||'';for(const line of lines){if(line.trim()==='')continue;if(line.startsWith('data: ')){const dataContent=line.slice(6).trim();if(dataContent==='[DONE]'){console.log('接收到结束标记');return;}try{const data=JSON.parse(dataContent);yield data;}catch(parseError){console.warn('解析SSE数据失败:',parseError,'原始数据:',dataContent);}}else if(line.startsWith('event: ')||line.startsWith('id: ')){// SSE事件类型或ID，暂时忽略\ncontinue;}else{console.warn('未识别的SSE格式:',line);}}}}finally{try{reader.releaseLock();}catch(e){console.warn('释放reader失败:',e);}clearTimeout(timeoutId);}// 如果成功完成，退出重试循环\nreturn;}catch(error){console.error(`流式查询失败 (尝试 ${retryCount+1}/${maxRetries+1}):`,error);retryCount++;// 如果是用户取消或达到最大重试次数，直接抛出错误\nif(error.name==='AbortError'||retryCount>maxRetries){var _error$message2,_error$message3,_error$message4;if(error.name==='AbortError'){throw new Error('查询超时或被取消');}// 根据错误类型给出具体建议\nif((_error$message2=error.message)!==null&&_error$message2!==void 0&&_error$message2.includes('ERR_INCOMPLETE_CHUNKED_ENCODING')||(_error$message3=error.message)!==null&&_error$message3!==void 0&&_error$message3.includes('network error')){throw new Error('网络连接不稳定，请检查网络状况后重试');}else if((_error$message4=error.message)!==null&&_error$message4!==void 0&&_error$message4.includes('Server error')){throw new Error('服务器暂时不可用，请稍后重试');}throw new Error(`流式查询失败: ${error.message}`);}// 等待一段时间后重试\nawait new Promise(resolve=>setTimeout(resolve,1000*retryCount));console.log(`准备重试流式查询 (${retryCount}/${maxRetries})`);}}}/**\r\n   * 组合多个 AbortSignal\r\n   */combineAbortSignals(signals){const controller=new AbortController();const onAbort=()=>{controller.abort();};for(const signal of signals){if(signal.aborted){controller.abort();break;}signal.addEventListener('abort',onAbort);}// 清理事件监听器\ncontroller.signal.addEventListener('abort',()=>{for(const signal of signals){signal.removeEventListener('abort',onAbort);}});return controller.signal;}/**\r\n   * 获取相似题目 - 保持较短超时\r\n   */async getSimilarProblems(problemTitle){let count=arguments.length>1&&arguments[1]!==undefined?arguments[1]:5;try{const response=await this.client.post('/api/v1/qa/similar-problems',{problem_title:problemTitle,count,include_solutions:true},{timeout:60000// 相似题目查询1分钟超时\n});return response.data;}catch(error){console.error('获取相似题目失败:',error);throw error;}}/**\r\n   * 处理概念点击 - 可能需要较长时间\r\n   */async handleConceptClick(conceptName,sourceQuery,contextType){try{const response=await this.client.post('/api/v1/qa/concept/click',{concept_name:conceptName,source_query:sourceQuery,context_type:contextType},{timeout:120000// 概念查询2分钟超时\n});return response.data;}catch(error){console.error('处理概念点击失败:',error);throw error;}}/**\r\n   * 获取知识图谱数据 - 可能需要较长时间\r\n   */async getGraphData(entityName,entityType){try{const response=await this.client.post('/api/v1/graph/query',{entity_name:entityName,entity_type:entityType,depth:2,limit:20},{timeout:120000// 图谱查询2分钟超时\n});return response.data;}catch(error){console.error('获取图谱数据失败:',error);throw error;}}/**\r\n   * 获取题目图谱 - 可能需要较长时间\r\n   */async getProblemGraph(problemTitle){try{const response=await this.client.get(`/api/v1/graph/problem/${encodeURIComponent(problemTitle)}/graph`,{timeout:120000// 题目图谱2分钟超时\n});return response.data;}catch(error){console.error('获取题目图谱失败:',error);throw error;}}/**\r\n   * 获取概念图谱 - 可能需要较长时间\r\n   */async getConceptGraph(conceptName){try{const response=await this.client.get(`/api/v1/graph/concept/${encodeURIComponent(conceptName)}/graph`,{timeout:120000// 概念图谱2分钟超时\n});return response.data;}catch(error){console.error('获取概念图谱失败:',error);throw error;}}/**\r\n   * 提交反馈 - 快速操作\r\n   */async submitFeedback(feedback){try{await this.client.post('/api/v1/qa/feedback',feedback,{timeout:15000// 反馈提交15秒超时\n});}catch(error){console.error('提交反馈失败:',error);throw error;}}/**\r\n   * 获取会话历史 - 快速操作\r\n   */async getSessionHistory(sessionId){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;try{const response=await this.client.get(`/api/v1/qa/sessions/${sessionId}/history`,{params:{limit},timeout:30000// 会话历史30秒超时\n});return response.data;}catch(error){console.error('获取会话历史失败:',error);throw error;}}/**\r\n   * 清除会话 - 快速操作\r\n   */async clearSession(sessionId){try{await this.client.delete(`/api/v1/qa/sessions/${sessionId}`,{timeout:15000// 清除会话15秒超时\n});}catch(error){console.error('清除会话失败:',error);throw error;}}/**\r\n   * 健康检查 - 快速操作\r\n   */async healthCheck(){try{const response=await this.client.get('/health',{timeout:10000// 健康检查10秒超时\n});return response.data;}catch(error){console.error('健康检查失败:',error);throw error;}}/**\r\n   * 获取图谱统计信息 - 中等耗时\r\n   */async getGraphStatistics(){try{const response=await this.client.get('/api/v1/graph/statistics',{timeout:60000// 统计信息1分钟超时\n});return response.data;}catch(error){console.error('获取图谱统计失败:',error);throw error;}}/**\r\n   * 创建可取消的查询方法 - 用于长时间查询\r\n   */createCancellableQuery(){var _this=this;const controller=new AbortController();return{query:request=>this.query(request,controller.signal),queryStream:request=>this.queryStream(request,controller.signal),queryWithFallback:function(request){let preferStream=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;return _this.queryWithFallback(request,preferStream,controller.signal);},cancel:()=>{console.log('取消查询请求');controller.abort();},signal:controller.signal};}}// 创建单例实例\nexport const apiService=new ApiService();export default apiService;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}