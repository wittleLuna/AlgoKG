{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { formatValue, isInRange, isSame } from \"../utils/dateUtil\";\nimport { PickerHackContext, usePanelContext } from \"./context\";\nexport default function PanelBody(props) {\n  var rowNum = props.rowNum,\n    colNum = props.colNum,\n    baseDate = props.baseDate,\n    getCellDate = props.getCellDate,\n    prefixColumn = props.prefixColumn,\n    rowClassName = props.rowClassName,\n    titleFormat = props.titleFormat,\n    getCellText = props.getCellText,\n    getCellClassName = props.getCellClassName,\n    headerCells = props.headerCells,\n    _props$cellSelection = props.cellSelection,\n    cellSelection = _props$cellSelection === void 0 ? true : _props$cellSelection,\n    disabledDate = props.disabledDate;\n  var _usePanelContext = usePanelContext(),\n    prefixCls = _usePanelContext.prefixCls,\n    type = _usePanelContext.panelType,\n    now = _usePanelContext.now,\n    contextDisabledDate = _usePanelContext.disabledDate,\n    cellRender = _usePanelContext.cellRender,\n    onHover = _usePanelContext.onHover,\n    hoverValue = _usePanelContext.hoverValue,\n    hoverRangeValue = _usePanelContext.hoverRangeValue,\n    generateConfig = _usePanelContext.generateConfig,\n    values = _usePanelContext.values,\n    locale = _usePanelContext.locale,\n    onSelect = _usePanelContext.onSelect;\n  var mergedDisabledDate = disabledDate || contextDisabledDate;\n  var cellPrefixCls = \"\".concat(prefixCls, \"-cell\");\n\n  // ============================= Context ==============================\n  var _React$useContext = React.useContext(PickerHackContext),\n    onCellDblClick = _React$useContext.onCellDblClick;\n\n  // ============================== Value ===============================\n  var matchValues = function matchValues(date) {\n    return values.some(function (singleValue) {\n      return singleValue && isSame(generateConfig, locale, date, singleValue, type);\n    });\n  };\n\n  // =============================== Body ===============================\n  var rows = [];\n  for (var row = 0; row < rowNum; row += 1) {\n    var rowNode = [];\n    var rowStartDate = void 0;\n    var _loop = function _loop() {\n      var offset = row * colNum + col;\n      var currentDate = getCellDate(baseDate, offset);\n      var disabled = mergedDisabledDate === null || mergedDisabledDate === void 0 ? void 0 : mergedDisabledDate(currentDate, {\n        type: type\n      });\n\n      // Row Start Cell\n      if (col === 0) {\n        rowStartDate = currentDate;\n        if (prefixColumn) {\n          rowNode.push(prefixColumn(rowStartDate));\n        }\n      }\n\n      // Range\n      var inRange = false;\n      var rangeStart = false;\n      var rangeEnd = false;\n      if (cellSelection && hoverRangeValue) {\n        var _hoverRangeValue = _slicedToArray(hoverRangeValue, 2),\n          hoverStart = _hoverRangeValue[0],\n          hoverEnd = _hoverRangeValue[1];\n        inRange = isInRange(generateConfig, hoverStart, hoverEnd, currentDate);\n        rangeStart = isSame(generateConfig, locale, currentDate, hoverStart, type);\n        rangeEnd = isSame(generateConfig, locale, currentDate, hoverEnd, type);\n      }\n\n      // Title\n      var title = titleFormat ? formatValue(currentDate, {\n        locale: locale,\n        format: titleFormat,\n        generateConfig: generateConfig\n      }) : undefined;\n\n      // Render\n      var inner = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(cellPrefixCls, \"-inner\")\n      }, getCellText(currentDate));\n      rowNode.push(/*#__PURE__*/React.createElement(\"td\", {\n        key: col,\n        title: title,\n        className: classNames(cellPrefixCls, _objectSpread(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, \"\".concat(cellPrefixCls, \"-disabled\"), disabled), \"\".concat(cellPrefixCls, \"-hover\"), (hoverValue || []).some(function (date) {\n          return isSame(generateConfig, locale, currentDate, date, type);\n        })), \"\".concat(cellPrefixCls, \"-in-range\"), inRange && !rangeStart && !rangeEnd), \"\".concat(cellPrefixCls, \"-range-start\"), rangeStart), \"\".concat(cellPrefixCls, \"-range-end\"), rangeEnd), \"\".concat(prefixCls, \"-cell-selected\"), !hoverRangeValue &&\n        // WeekPicker use row instead\n        type !== 'week' && matchValues(currentDate)), getCellClassName(currentDate))),\n        onClick: function onClick() {\n          if (!disabled) {\n            onSelect(currentDate);\n          }\n        },\n        onDoubleClick: function onDoubleClick() {\n          if (!disabled && onCellDblClick) {\n            onCellDblClick();\n          }\n        },\n        onMouseEnter: function onMouseEnter() {\n          if (!disabled) {\n            onHover === null || onHover === void 0 || onHover(currentDate);\n          }\n        },\n        onMouseLeave: function onMouseLeave() {\n          if (!disabled) {\n            onHover === null || onHover === void 0 || onHover(null);\n          }\n        }\n      }, cellRender ? cellRender(currentDate, {\n        prefixCls: prefixCls,\n        originNode: inner,\n        today: now,\n        type: type,\n        locale: locale\n      }) : inner));\n    };\n    for (var col = 0; col < colNum; col += 1) {\n      _loop();\n    }\n    rows.push(/*#__PURE__*/React.createElement(\"tr\", {\n      key: row,\n      className: rowClassName === null || rowClassName === void 0 ? void 0 : rowClassName(rowStartDate)\n    }, rowNode));\n  }\n\n  // ============================== Render ==============================\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-body\")\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"\".concat(prefixCls, \"-content\")\n  }, headerCells && /*#__PURE__*/React.createElement(\"thead\", null, /*#__PURE__*/React.createElement(\"tr\", null, headerCells)), /*#__PURE__*/React.createElement(\"tbody\", null, rows)));\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}