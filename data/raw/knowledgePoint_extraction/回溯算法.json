{
  "id": "AP964",
  "name": "回溯法",
  "alias": [
    "回溯搜索法",
    "backtracking",
    "Backtracking"
  ],
  "type": "algorithm_paradigm",
  "description": "回溯法是一种通过递归和剪枝来解决组合、切割、子集、排列等问题的算法范式。它也是一种在深度优先搜索（DFS）和广度优先搜索（BFS）中常用的技巧，其本质是走不通就回头。",
  "key_concepts": [
    "递归",
    "剪枝",
    "路径",
    "回溯",
    "构造空间树",
    "边界条件",
    "目标条件"
  ],
  "applications": [
    "组合问题",
    "切割问题",
    "子集问题",
    "排列问题",
    "棋盘问题",
    "分割问题"
  ],
  "created_at": "2025-07-19T12:59:30Z",
  "updated_at": "2025-07-19T13:00:05Z",
  "source_files": [
    "回溯算法_kama.txt",
    "回溯算法_wiki.txt"
  ],
  "spacy_entities": {
    "PROBLEM_TYPE": [
      "切割问题",
      "组合问题",
      "子集问题",
      "排列问题",
      "N皇后问题",
      "解数独问题"
    ],
    "ALGORITHM_PARADIGM": [
      "回溯算法",
      "回溯法",
      "暴力搜索",
      "回溯",
      "递归",
      "backtracking",
      "BFS",
      "深度优先搜索",
      "DFS",
      "广度优先搜索"
    ],
    "DATA_STRUCTURE": [
      "集合",
      "树",
      "图",
      "二叉树"
    ],
    "CORE_CONCEPT": [
      "回溯算法",
      "递归",
      "剪枝",
      "路径",
      "回溯",
      "边界条件"
    ],
    "TECHNIQUE": [
      "回溯法"
    ]
  }
}