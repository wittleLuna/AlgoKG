{"ast":null,"code":"/**\n * 用户认证服务\n */class AuthService{constructor(){this.baseURL='/api/v1';this.tokenKey='auth_token';this.userKey='current_user';}// 获取存储的令牌\ngetToken(){return localStorage.getItem(this.tokenKey);}// 设置令牌\nsetToken(token){localStorage.setItem(this.tokenKey,token);}// 移除令牌\nremoveToken(){localStorage.removeItem(this.tokenKey);localStorage.removeItem(this.userKey);}// 获取当前用户\ngetCurrentUser(){const userStr=localStorage.getItem(this.userKey);return userStr?JSON.parse(userStr):null;}// 设置当前用户\nsetCurrentUser(user){localStorage.setItem(this.userKey,JSON.stringify(user));}// 检查是否已登录\nisAuthenticated(){return!!this.getToken();}// 获取请求头\ngetAuthHeaders(){const token=this.getToken();return{'Content-Type':'application/json',...(token&&{'Authorization':`Bearer ${token}`})};}// 处理API响应\nasync handleResponse(response){if(!response.ok){const error=await response.json().catch(()=>({detail:'请求失败'}));throw new Error(error.detail||`HTTP ${response.status}`);}return response.json();}// 用户注册\nasync register(data){console.log('发送注册请求:',data);const response=await fetch(`${this.baseURL}/auth/register`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)});console.log('注册响应状态:',response.status);if(!response.ok){const errorText=await response.text();console.error('注册错误响应:',errorText);try{const errorJson=JSON.parse(errorText);throw new Error(errorJson.detail||`HTTP ${response.status}`);}catch{throw new Error(`HTTP ${response.status}: ${errorText}`);}}const result=await response.json();// 保存令牌和用户信息\nthis.setToken(result.access_token);this.setCurrentUser(result.user);return result;}// 用户登录\nasync login(data){const response=await fetch(`${this.baseURL}/auth/login`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)});const result=await this.handleResponse(response);// 保存令牌和用户信息\nthis.setToken(result.access_token);this.setCurrentUser(result.user);return result;}// 用户登出\nasync logout(){try{await fetch(`${this.baseURL}/auth/logout`,{method:'POST',headers:this.getAuthHeaders()});}catch(error){console.warn('登出请求失败:',error);}finally{// 无论请求是否成功，都清除本地存储\nthis.removeToken();}}// 获取用户资料\nasync getUserProfile(){const response=await fetch(`${this.baseURL}/auth/me`,{headers:this.getAuthHeaders()});return this.handleResponse(response);}// 更新用户信息\nasync updateUser(data){const response=await fetch(`${this.baseURL}/auth/me`,{method:'PUT',headers:this.getAuthHeaders(),body:JSON.stringify(data)});const result=await this.handleResponse(response);// 更新本地存储的用户信息\nthis.setCurrentUser(result);return result;}// 验证令牌\nasync verifyToken(){const response=await fetch(`${this.baseURL}/auth/verify-token`,{headers:this.getAuthHeaders()});const result=await this.handleResponse(response);// 更新本地存储的用户信息\nthis.setCurrentUser(result);return result;}// 添加收藏\nasync addFavorite(itemType,itemId,title,description){const response=await fetch(`${this.baseURL}/auth/favorites`,{method:'POST',headers:this.getAuthHeaders(),body:JSON.stringify({item_type:itemType,item_id:itemId,title,description})});return this.handleResponse(response);}// 获取收藏列表\nasync getFavorites(itemType){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:50;let offset=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;const params=new URLSearchParams({limit:limit.toString(),offset:offset.toString()});if(itemType){params.append('item_type',itemType);}const response=await fetch(`${this.baseURL}/auth/favorites?${params}`,{headers:this.getAuthHeaders()});return this.handleResponse(response);}// 移除收藏\nasync removeFavorite(itemType,itemId){const response=await fetch(`${this.baseURL}/auth/favorites/${itemType}/${itemId}`,{method:'DELETE',headers:this.getAuthHeaders()});await this.handleResponse(response);}// 添加搜索历史\nasync addSearchHistory(query,searchType){let resultsCount=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;const response=await fetch(`${this.baseURL}/auth/search-history`,{method:'POST',headers:this.getAuthHeaders(),body:JSON.stringify({query,search_type:searchType,results_count:resultsCount})});return this.handleResponse(response);}// 获取搜索历史\nasync getSearchHistory(searchType){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:50;let offset=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;const params=new URLSearchParams({limit:limit.toString(),offset:offset.toString()});if(searchType){params.append('search_type',searchType);}const response=await fetch(`${this.baseURL}/auth/search-history?${params}`,{headers:this.getAuthHeaders()});return this.handleResponse(response);}// 清空搜索历史\nasync clearSearchHistory(searchType){const params=searchType?`?search_type=${searchType}`:'';const response=await fetch(`${this.baseURL}/auth/search-history${params}`,{method:'DELETE',headers:this.getAuthHeaders()});await this.handleResponse(response);}// 会话管理相关方法\nasync createSession(sessionData){const response=await fetch(`${this.baseURL}/auth/sessions`,{method:'POST',headers:this.getAuthHeaders(),body:JSON.stringify(sessionData)});return this.handleResponse(response);}async getUserSessions(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:50;let offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;const params=new URLSearchParams({limit:limit.toString(),offset:offset.toString()});const response=await fetch(`${this.baseURL}/auth/sessions?${params}`,{headers:this.getAuthHeaders()});return this.handleResponse(response);}async getSession(sessionId){const response=await fetch(`${this.baseURL}/auth/sessions/${sessionId}`,{headers:this.getAuthHeaders()});return this.handleResponse(response);}async updateSession(sessionId,sessionData){const response=await fetch(`${this.baseURL}/auth/sessions/${sessionId}`,{method:'PUT',headers:this.getAuthHeaders(),body:JSON.stringify(sessionData)});return this.handleResponse(response);}async deleteSession(sessionId){const response=await fetch(`${this.baseURL}/auth/sessions/${sessionId}`,{method:'DELETE',headers:this.getAuthHeaders()});await this.handleResponse(response);}}// 导出单例实例\nexport const authService=new AuthService();export default authService;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}