{"ast":null,"code":"\"use client\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { FastColor } from '@ant-design/fast-color';\nimport CheckCircleFilled from \"@ant-design/icons/es/icons/CheckCircleFilled\";\nimport CheckOutlined from \"@ant-design/icons/es/icons/CheckOutlined\";\nimport CloseCircleFilled from \"@ant-design/icons/es/icons/CloseCircleFilled\";\nimport CloseOutlined from \"@ant-design/icons/es/icons/CloseOutlined\";\nimport classNames from 'classnames';\nimport omit from \"rc-util/es/omit\";\nimport { devUseWarning } from '../_util/warning';\nimport { ConfigContext } from '../config-provider';\nimport Circle from './Circle';\nimport Line from './Line';\nimport Steps from './Steps';\nimport useStyle from './style';\nimport { getSize, getSuccessPercent, validProgress } from './utils';\nexport const ProgressTypes = ['line', 'circle', 'dashboard'];\nconst ProgressStatuses = ['normal', 'exception', 'active', 'success'];\nconst Progress = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n      prefixCls: customizePrefixCls,\n      className,\n      rootClassName,\n      steps,\n      strokeColor,\n      percent = 0,\n      size = 'default',\n      showInfo = true,\n      type = 'line',\n      status,\n      format,\n      style,\n      percentPosition = {}\n    } = props,\n    restProps = __rest(props, [\"prefixCls\", \"className\", \"rootClassName\", \"steps\", \"strokeColor\", \"percent\", \"size\", \"showInfo\", \"type\", \"status\", \"format\", \"style\", \"percentPosition\"]);\n  const {\n    align: infoAlign = 'end',\n    type: infoPosition = 'outer'\n  } = percentPosition;\n  const strokeColorNotArray = Array.isArray(strokeColor) ? strokeColor[0] : strokeColor;\n  const strokeColorNotGradient = typeof strokeColor === 'string' || Array.isArray(strokeColor) ? strokeColor : undefined;\n  const strokeColorIsBright = React.useMemo(() => {\n    if (strokeColorNotArray) {\n      const color = typeof strokeColorNotArray === 'string' ? strokeColorNotArray : Object.values(strokeColorNotArray)[0];\n      return new FastColor(color).isLight();\n    }\n    return false;\n  }, [strokeColor]);\n  const percentNumber = React.useMemo(() => {\n    var _a, _b;\n    const successPercent = getSuccessPercent(props);\n    return parseInt(successPercent !== undefined ? (_a = successPercent !== null && successPercent !== void 0 ? successPercent : 0) === null || _a === void 0 ? void 0 : _a.toString() : (_b = percent !== null && percent !== void 0 ? percent : 0) === null || _b === void 0 ? void 0 : _b.toString(), 10);\n  }, [percent, props.success, props.successPercent]);\n  const progressStatus = React.useMemo(() => {\n    if (!ProgressStatuses.includes(status) && percentNumber >= 100) {\n      return 'success';\n    }\n    return status || 'normal';\n  }, [status, percentNumber]);\n  const {\n    getPrefixCls,\n    direction,\n    progress: progressStyle\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('progress', customizePrefixCls);\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls);\n  const isLineType = type === 'line';\n  const isPureLineType = isLineType && !steps;\n  const progressInfo = React.useMemo(() => {\n    if (!showInfo) {\n      return null;\n    }\n    const successPercent = getSuccessPercent(props);\n    let text;\n    const textFormatter = format || (number => `${number}%`);\n    const isBrightInnerColor = isLineType && strokeColorIsBright && infoPosition === 'inner';\n    if (infoPosition === 'inner' || format || progressStatus !== 'exception' && progressStatus !== 'success') {\n      text = textFormatter(validProgress(percent), validProgress(successPercent));\n    } else if (progressStatus === 'exception') {\n      text = isLineType ? /*#__PURE__*/React.createElement(CloseCircleFilled, null) : /*#__PURE__*/React.createElement(CloseOutlined, null);\n    } else if (progressStatus === 'success') {\n      text = isLineType ? /*#__PURE__*/React.createElement(CheckCircleFilled, null) : /*#__PURE__*/React.createElement(CheckOutlined, null);\n    }\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: classNames(`${prefixCls}-text`, {\n        [`${prefixCls}-text-bright`]: isBrightInnerColor,\n        [`${prefixCls}-text-${infoAlign}`]: isPureLineType,\n        [`${prefixCls}-text-${infoPosition}`]: isPureLineType\n      }),\n      title: typeof text === 'string' ? text : undefined\n    }, text);\n  }, [showInfo, percent, percentNumber, progressStatus, type, prefixCls, format]);\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('Progress');\n    warning.deprecated(!('successPercent' in props), 'successPercent', 'success.percent');\n    warning.deprecated(!('width' in props), 'width', 'size');\n    if (type === 'circle' || type === 'dashboard') {\n      if (Array.isArray(size)) {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'usage', 'Type \"circle\" and \"dashboard\" do not accept array as `size`, please use number or preset size instead.') : void 0;\n      } else if (typeof size === 'object') {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'usage', 'Type \"circle\" and \"dashboard\" do not accept object as `size`, please use number or preset size instead.') : void 0;\n      }\n    }\n    if (props.success && 'progress' in props.success) {\n      warning.deprecated(false, 'success.progress', 'success.percent');\n    }\n  }\n  let progress;\n  // Render progress shape\n  if (type === 'line') {\n    progress = steps ? (/*#__PURE__*/React.createElement(Steps, Object.assign({}, props, {\n      strokeColor: strokeColorNotGradient,\n      prefixCls: prefixCls,\n      steps: typeof steps === 'object' ? steps.count : steps\n    }), progressInfo)) : (/*#__PURE__*/React.createElement(Line, Object.assign({}, props, {\n      strokeColor: strokeColorNotArray,\n      prefixCls: prefixCls,\n      direction: direction,\n      percentPosition: {\n        align: infoAlign,\n        type: infoPosition\n      }\n    }), progressInfo));\n  } else if (type === 'circle' || type === 'dashboard') {\n    progress = /*#__PURE__*/React.createElement(Circle, Object.assign({}, props, {\n      strokeColor: strokeColorNotArray,\n      prefixCls: prefixCls,\n      progressStatus: progressStatus\n    }), progressInfo);\n  }\n  const classString = classNames(prefixCls, `${prefixCls}-status-${progressStatus}`, {\n    [`${prefixCls}-${type === 'dashboard' && 'circle' || type}`]: type !== 'line',\n    [`${prefixCls}-inline-circle`]: type === 'circle' && getSize(size, 'circle')[0] <= 20,\n    [`${prefixCls}-line`]: isPureLineType,\n    [`${prefixCls}-line-align-${infoAlign}`]: isPureLineType,\n    [`${prefixCls}-line-position-${infoPosition}`]: isPureLineType,\n    [`${prefixCls}-steps`]: steps,\n    [`${prefixCls}-show-info`]: showInfo,\n    [`${prefixCls}-${size}`]: typeof size === 'string',\n    [`${prefixCls}-rtl`]: direction === 'rtl'\n  }, progressStyle === null || progressStyle === void 0 ? void 0 : progressStyle.className, className, rootClassName, hashId, cssVarCls);\n  return wrapCSSVar(/*#__PURE__*/React.createElement(\"div\", Object.assign({\n    ref: ref,\n    style: Object.assign(Object.assign({}, progressStyle === null || progressStyle === void 0 ? void 0 : progressStyle.style), style),\n    className: classString,\n    role: \"progressbar\",\n    \"aria-valuenow\": percentNumber,\n    \"aria-valuemin\": 0,\n    \"aria-valuemax\": 100\n  }, omit(restProps, ['trailColor', 'strokeWidth', 'width', 'gapDegree', 'gapPosition', 'strokeLinecap', 'success', 'successPercent'])), progress));\n});\nif (process.env.NODE_ENV !== 'production') {\n  Progress.displayName = 'Progress';\n}\nexport default Progress;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}