{"ast":null,"code":"export const CallableInstance =\n/**\n * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n */\n\n/** @type {unknown} */\n\n/**\n * @this {Function}\n * @param {string | symbol} property\n * @returns {(...parameters: Array<unknown>) => unknown}\n */\nfunction (property) {\n  const self = this;\n  const constr = self.constructor;\n  const proto = /** @type {Record<string | symbol, Function>} */\n  // Prototypes do exist.\n  // type-coverage:ignore-next-line\n  constr.prototype;\n  const value = proto[property];\n  /** @type {(...parameters: Array<unknown>) => unknown} */\n  const apply = function () {\n    return value.apply(apply, arguments);\n  };\n  Object.setPrototypeOf(apply, proto);\n\n  // Not needed for us in `unified`: we only call this on the `copy`\n  // function,\n  // and we don't need to add its fields (`length`, `name`)\n  // over.\n  // See also: GH-246.\n  // const names = Object.getOwnPropertyNames(value)\n  //\n  // for (const p of names) {\n  //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n  //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n  // }\n\n  return apply;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}