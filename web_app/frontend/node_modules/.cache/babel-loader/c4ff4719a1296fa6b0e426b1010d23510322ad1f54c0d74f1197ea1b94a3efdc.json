{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEvent, useMergedState } from 'rc-util';\nimport raf from \"rc-util/es/raf\";\nimport React from 'react';\n\n/**\n * Will be `true` immediately for next effect.\n * But will be `false` for a delay of effect.\n */\nexport default function useDelayState(value, defaultValue, onChange) {\n  var _useMergedState = useMergedState(defaultValue, {\n      value: value\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 2),\n    state = _useMergedState2[0],\n    setState = _useMergedState2[1];\n  var nextValueRef = React.useRef(value);\n\n  // ============================= Update =============================\n  var rafRef = React.useRef();\n  var cancelRaf = function cancelRaf() {\n    raf.cancel(rafRef.current);\n  };\n  var doUpdate = useEvent(function () {\n    setState(nextValueRef.current);\n    if (onChange && state !== nextValueRef.current) {\n      onChange(nextValueRef.current);\n    }\n  });\n  var updateValue = useEvent(function (next, immediately) {\n    cancelRaf();\n    nextValueRef.current = next;\n    if (next || immediately) {\n      doUpdate();\n    } else {\n      rafRef.current = raf(doUpdate);\n    }\n  });\n  React.useEffect(function () {\n    return cancelRaf;\n  }, []);\n  return [state, updateValue];\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}