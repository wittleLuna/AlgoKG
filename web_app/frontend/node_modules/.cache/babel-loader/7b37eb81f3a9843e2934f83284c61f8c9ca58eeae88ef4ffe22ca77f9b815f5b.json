{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Portal from '@rc-component/portal';\nimport classnames from 'classnames';\nimport CSSMotion from 'rc-motion';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { PreviewGroupContext } from \"./context\";\nvar Operations = function Operations(props) {\n  var visible = props.visible,\n    maskTransitionName = props.maskTransitionName,\n    getContainer = props.getContainer,\n    prefixCls = props.prefixCls,\n    rootClassName = props.rootClassName,\n    icons = props.icons,\n    countRender = props.countRender,\n    showSwitch = props.showSwitch,\n    showProgress = props.showProgress,\n    current = props.current,\n    transform = props.transform,\n    count = props.count,\n    scale = props.scale,\n    minScale = props.minScale,\n    maxScale = props.maxScale,\n    closeIcon = props.closeIcon,\n    onActive = props.onActive,\n    onClose = props.onClose,\n    onZoomIn = props.onZoomIn,\n    onZoomOut = props.onZoomOut,\n    onRotateRight = props.onRotateRight,\n    onRotateLeft = props.onRotateLeft,\n    onFlipX = props.onFlipX,\n    onFlipY = props.onFlipY,\n    onReset = props.onReset,\n    toolbarRender = props.toolbarRender,\n    zIndex = props.zIndex,\n    image = props.image;\n  var groupContext = useContext(PreviewGroupContext);\n  var rotateLeft = icons.rotateLeft,\n    rotateRight = icons.rotateRight,\n    zoomIn = icons.zoomIn,\n    zoomOut = icons.zoomOut,\n    close = icons.close,\n    left = icons.left,\n    right = icons.right,\n    flipX = icons.flipX,\n    flipY = icons.flipY;\n  var toolClassName = \"\".concat(prefixCls, \"-operations-operation\");\n  React.useEffect(function () {\n    var onKeyDown = function onKeyDown(e) {\n      if (e.keyCode === KeyCode.ESC) {\n        onClose();\n      }\n    };\n    if (visible) {\n      window.addEventListener('keydown', onKeyDown);\n    }\n    return function () {\n      window.removeEventListener('keydown', onKeyDown);\n    };\n  }, [visible]);\n  var handleActive = function handleActive(e, offset) {\n    e.preventDefault();\n    e.stopPropagation();\n    onActive(offset);\n  };\n  var renderOperation = React.useCallback(function (_ref) {\n    var type = _ref.type,\n      disabled = _ref.disabled,\n      onClick = _ref.onClick,\n      icon = _ref.icon;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: type,\n      className: classnames(toolClassName, \"\".concat(prefixCls, \"-operations-operation-\").concat(type), _defineProperty({}, \"\".concat(prefixCls, \"-operations-operation-disabled\"), !!disabled)),\n      onClick: onClick\n    }, icon);\n  }, [toolClassName, prefixCls]);\n  var switchPrevNode = showSwitch ? renderOperation({\n    icon: left,\n    onClick: function onClick(e) {\n      return handleActive(e, -1);\n    },\n    type: 'prev',\n    disabled: current === 0\n  }) : undefined;\n  var switchNextNode = showSwitch ? renderOperation({\n    icon: right,\n    onClick: function onClick(e) {\n      return handleActive(e, 1);\n    },\n    type: 'next',\n    disabled: current === count - 1\n  }) : undefined;\n  var flipYNode = renderOperation({\n    icon: flipY,\n    onClick: onFlipY,\n    type: 'flipY'\n  });\n  var flipXNode = renderOperation({\n    icon: flipX,\n    onClick: onFlipX,\n    type: 'flipX'\n  });\n  var rotateLeftNode = renderOperation({\n    icon: rotateLeft,\n    onClick: onRotateLeft,\n    type: 'rotateLeft'\n  });\n  var rotateRightNode = renderOperation({\n    icon: rotateRight,\n    onClick: onRotateRight,\n    type: 'rotateRight'\n  });\n  var zoomOutNode = renderOperation({\n    icon: zoomOut,\n    onClick: onZoomOut,\n    type: 'zoomOut',\n    disabled: scale <= minScale\n  });\n  var zoomInNode = renderOperation({\n    icon: zoomIn,\n    onClick: onZoomIn,\n    type: 'zoomIn',\n    disabled: scale === maxScale\n  });\n  var toolbarNode = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-operations\")\n  }, flipYNode, flipXNode, rotateLeftNode, rotateRightNode, zoomOutNode, zoomInNode);\n  return /*#__PURE__*/React.createElement(CSSMotion, {\n    visible: visible,\n    motionName: maskTransitionName\n  }, function (_ref2) {\n    var className = _ref2.className,\n      style = _ref2.style;\n    return /*#__PURE__*/React.createElement(Portal, {\n      open: true,\n      getContainer: getContainer !== null && getContainer !== void 0 ? getContainer : document.body\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classnames(\"\".concat(prefixCls, \"-operations-wrapper\"), className, rootClassName),\n      style: _objectSpread(_objectSpread({}, style), {}, {\n        zIndex: zIndex\n      })\n    }, closeIcon === null ? null : /*#__PURE__*/React.createElement(\"button\", {\n      className: \"\".concat(prefixCls, \"-close\"),\n      onClick: onClose\n    }, closeIcon || close), showSwitch && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: classnames(\"\".concat(prefixCls, \"-switch-left\"), _defineProperty({}, \"\".concat(prefixCls, \"-switch-left-disabled\"), current === 0)),\n      onClick: function onClick(e) {\n        return handleActive(e, -1);\n      }\n    }, left), /*#__PURE__*/React.createElement(\"div\", {\n      className: classnames(\"\".concat(prefixCls, \"-switch-right\"), _defineProperty({}, \"\".concat(prefixCls, \"-switch-right-disabled\"), current === count - 1)),\n      onClick: function onClick(e) {\n        return handleActive(e, 1);\n      }\n    }, right)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefixCls, \"-footer\")\n    }, showProgress && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefixCls, \"-progress\")\n    }, countRender ? countRender(current + 1, count) : /*#__PURE__*/React.createElement(\"bdi\", null, \"\".concat(current + 1, \" / \").concat(count))), toolbarRender ? toolbarRender(toolbarNode, _objectSpread(_objectSpread({\n      icons: {\n        prevIcon: switchPrevNode,\n        nextIcon: switchNextNode,\n        flipYIcon: flipYNode,\n        flipXIcon: flipXNode,\n        rotateLeftIcon: rotateLeftNode,\n        rotateRightIcon: rotateRightNode,\n        zoomOutIcon: zoomOutNode,\n        zoomInIcon: zoomInNode\n      },\n      actions: {\n        onActive: onActive,\n        onFlipY: onFlipY,\n        onFlipX: onFlipX,\n        onRotateLeft: onRotateLeft,\n        onRotateRight: onRotateRight,\n        onZoomOut: onZoomOut,\n        onZoomIn: onZoomIn,\n        onReset: onReset,\n        onClose: onClose\n      },\n      transform: transform\n    }, groupContext ? {\n      current: current,\n      total: count\n    } : {}), {}, {\n      image: image\n    })) : toolbarNode)));\n  });\n};\nexport default Operations;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}